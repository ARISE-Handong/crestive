Iteration 0 (0s): covered 0 branches [0 reach funs, 0 reach branches].
server started
2020
complete cnct_server
complete cnct_client
svr = 3, clt = 4
Total Elapsed Time: 1.007
  Search Time: 1.007
  Solving Time: 2.81617e-322
  Program Time: 2.91499e-322
remote run 0
input string empty
parsin not complete!
branch size: 43
costraint size: 30
costraint size1: 30
costraint siz2e: 30
constraints_idx[0]:2constraints_idx[1]:3constraints_idx[2]:4constraints_idx[3]:5constraints_idx[4]:7constraints_idx[5]:8constraints_idx[6]:9constraints_idx[7]:11constraints_idx[8]:12constraints_idx[9]:13constraints_idx[10]:15constraints_idx[11]:16constraints_idx[12]:17constraints_idx[13]:19constraints_idx[14]:20constraints_idx[15]:21constraints_idx[16]:23constraints_idx[17]:24constraints_idx[18]:25constraints_idx[19]:27constraints_idx[20]:28constraints_idx[21]:29constraints_idx[22]:31constraints_idx[23]:32constraints_idx[24]:33constraints_idx[25]:35constraints_idx[26]:36constraints_idx[27]:37constraints_idx[28]:39constraints_idx[29]:40costraint idx front: 2
parsing complete!
Iteration 1 (1s): covered 8 branches [1 reach funs, 10 reach branches].
Constraint Size : 30
files.byte = 1234
no hi..
nRcv : 1024
no break..
file_info.st_size : 1024
files.byte 1234
no hi..
nRcv : 210
no break..
file_info.st_size : 1234
files.byte 1234
send done...
after SymbolicPath
Solving Branch is 29!!!!
before solve at
sat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (>= (+ 0 (* x0 1)) 0))
(assert (<= (+ (- 8) (* x1 1)) 0))
(assert (<= (+ 0 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 10) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (<= (+ (- 7) (* x1 1)) 0))
(assert (> (+ 1 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (> (+ 2 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))
(assert (> (+ 3 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (<= (+ (- 4) (* x1 1)) 0))
(assert (> (+ 4 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 5 (* x0 1)) 0))
(assert (<= (+ (- 3) (* x1 1)) 0))
(assert (> (+ 5 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 6 (* x0 1)) 0))
(assert (<= (+ (- 2) (* x1 1)) 0))
(assert (> (+ 6 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 7 (* x0 1)) 0))
(assert (<= (+ (- 1) (* x1 1)) 0))
(assert (> (+ 7 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 8 (* x0 1)) 0))
(assert (<= (+ 0 (* x1 1)) 0))
(assert (> (+ 8 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 9 (* x0 1)) 0))
(assert (<= (+ 1 (* x1 1)) 0))
(rmodel->model-converter-wrapper
x1 -> (- 2147483646)
x0 -> 715827882
)

==============
after solve
Total Elapsed Time: 1.11059
  Search Time: 1.01621
  Solving Time: 0.070417
  Program Time: 0.023964
remote run 0
input string 715827882
-2147483646

parsin not complete!
branch size: 44
costraint size: 31
costraint size1: 31
costraint siz2e: 31
constraints_idx[0]:2constraints_idx[1]:3constraints_idx[2]:4constraints_idx[3]:5constraints_idx[4]:7constraints_idx[5]:8constraints_idx[6]:9constraints_idx[7]:11constraints_idx[8]:12constraints_idx[9]:13constraints_idx[10]:15constraints_idx[11]:16constraints_idx[12]:17constraints_idx[13]:19constraints_idx[14]:20constraints_idx[15]:21constraints_idx[16]:23constraints_idx[17]:24constraints_idx[18]:25constraints_idx[19]:27constraints_idx[20]:28constraints_idx[21]:29constraints_idx[22]:31constraints_idx[23]:32constraints_idx[24]:33constraints_idx[25]:35constraints_idx[26]:36constraints_idx[27]:37constraints_idx[28]:39constraints_idx[29]:40constraints_idx[30]:41costraint idx front: 2
parsing complete!
Iteration 2 (1s): covered 8 branches [1 reach funs, 10 reach branches].
path.constraints_idx[29]=40
-1 6 10 12 14 15 6 10 12 13 6 10 12 13 6 10 12 13 6 10 12 13 6 10 12 13 6 10 12 13 6 10 12 13 6 10 12 13 6 10 11 7 -2 
-1 6 10 12 14 15 6 10 12 13 6 10 12 13 6 10 12 13 6 10 12 13 6 10 12 13 6 10 12 13 6 10 12 13 6 10 12 13 6 10 12 13 7 -2 
Constraint Size : 31
files.byte = 1280
no hi..
nRcv : 1024
no break..
file_info.st_size : 1024
files.byte 1280
no hi..
nRcv : 256
no break..
file_info.st_size : 1280
files.byte 1280
send done...
after run
after updatecover
after branch_idx
prev_ex 
cur_ex 
third branch_idx = 40
after checkprediction
after SymbolicPath
Solving Branch is 30!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (>= (+ 0 (* x0 1)) 0))
(assert (<= (+ (- 8) (* x1 1)) 0))
(assert (<= (+ 0 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 10) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (<= (+ (- 7) (* x1 1)) 0))
(assert (> (+ 1 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (> (+ 2 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))
(assert (> (+ 3 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (<= (+ (- 4) (* x1 1)) 0))
(assert (> (+ 4 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 5 (* x0 1)) 0))
(assert (<= (+ (- 3) (* x1 1)) 0))
(assert (> (+ 5 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 6 (* x0 1)) 0))
(assert (<= (+ (- 2) (* x1 1)) 0))
(assert (> (+ 6 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 7 (* x0 1)) 0))
(assert (<= (+ (- 1) (* x1 1)) 0))
(assert (> (+ 7 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 8 (* x0 1)) 0))
(assert (<= (+ 0 (* x1 1)) 0))
(assert (> (+ 8 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 9 (* x0 1)) 0))
(assert (<= (+ 1 (* x1 1)) 0))
(assert (<= (+ 9 (* x0 3) (* x1 1)) 0))

==============
after for loop
after pureDfs final
Solving Branch is 28!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (>= (+ 0 (* x0 1)) 0))
(assert (<= (+ (- 8) (* x1 1)) 0))
(assert (<= (+ 0 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 10) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (<= (+ (- 7) (* x1 1)) 0))
(assert (> (+ 1 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (> (+ 2 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))
(assert (> (+ 3 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (<= (+ (- 4) (* x1 1)) 0))
(assert (> (+ 4 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 5 (* x0 1)) 0))
(assert (<= (+ (- 3) (* x1 1)) 0))
(assert (> (+ 5 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 6 (* x0 1)) 0))
(assert (<= (+ (- 2) (* x1 1)) 0))
(assert (> (+ 6 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 7 (* x0 1)) 0))
(assert (<= (+ (- 1) (* x1 1)) 0))
(assert (> (+ 7 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 8 (* x0 1)) 0))
(assert (<= (+ 0 (* x1 1)) 0))
(assert (> (+ 8 (* x0 3) (* x1 1)) 0))
(assert (< (+ 9 (* x0 1)) 0))

==============
Solving Branch is 27!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (>= (+ 0 (* x0 1)) 0))
(assert (<= (+ (- 8) (* x1 1)) 0))
(assert (<= (+ 0 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 10) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (<= (+ (- 7) (* x1 1)) 0))
(assert (> (+ 1 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (> (+ 2 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))
(assert (> (+ 3 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (<= (+ (- 4) (* x1 1)) 0))
(assert (> (+ 4 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 5 (* x0 1)) 0))
(assert (<= (+ (- 3) (* x1 1)) 0))
(assert (> (+ 5 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 6 (* x0 1)) 0))
(assert (<= (+ (- 2) (* x1 1)) 0))
(assert (> (+ 6 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 7 (* x0 1)) 0))
(assert (<= (+ (- 1) (* x1 1)) 0))
(assert (> (+ 7 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 8 (* x0 1)) 0))
(assert (<= (+ 0 (* x1 1)) 0))
(assert (<= (+ 8 (* x0 3) (* x1 1)) 0))

==============
Solving Branch is 26!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (>= (+ 0 (* x0 1)) 0))
(assert (<= (+ (- 8) (* x1 1)) 0))
(assert (<= (+ 0 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 10) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (<= (+ (- 7) (* x1 1)) 0))
(assert (> (+ 1 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (> (+ 2 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))
(assert (> (+ 3 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (<= (+ (- 4) (* x1 1)) 0))
(assert (> (+ 4 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 5 (* x0 1)) 0))
(assert (<= (+ (- 3) (* x1 1)) 0))
(assert (> (+ 5 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 6 (* x0 1)) 0))
(assert (<= (+ (- 2) (* x1 1)) 0))
(assert (> (+ 6 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 7 (* x0 1)) 0))
(assert (<= (+ (- 1) (* x1 1)) 0))
(assert (> (+ 7 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 8 (* x0 1)) 0))
(assert (> (+ 0 (* x1 1)) 0))

==============
Solving Branch is 25!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (>= (+ 0 (* x0 1)) 0))
(assert (<= (+ (- 8) (* x1 1)) 0))
(assert (<= (+ 0 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 10) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (<= (+ (- 7) (* x1 1)) 0))
(assert (> (+ 1 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (> (+ 2 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))
(assert (> (+ 3 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (<= (+ (- 4) (* x1 1)) 0))
(assert (> (+ 4 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 5 (* x0 1)) 0))
(assert (<= (+ (- 3) (* x1 1)) 0))
(assert (> (+ 5 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 6 (* x0 1)) 0))
(assert (<= (+ (- 2) (* x1 1)) 0))
(assert (> (+ 6 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 7 (* x0 1)) 0))
(assert (<= (+ (- 1) (* x1 1)) 0))
(assert (> (+ 7 (* x0 3) (* x1 1)) 0))
(assert (< (+ 8 (* x0 1)) 0))

==============
Solving Branch is 24!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (>= (+ 0 (* x0 1)) 0))
(assert (<= (+ (- 8) (* x1 1)) 0))
(assert (<= (+ 0 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 10) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (<= (+ (- 7) (* x1 1)) 0))
(assert (> (+ 1 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (> (+ 2 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))
(assert (> (+ 3 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (<= (+ (- 4) (* x1 1)) 0))
(assert (> (+ 4 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 5 (* x0 1)) 0))
(assert (<= (+ (- 3) (* x1 1)) 0))
(assert (> (+ 5 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 6 (* x0 1)) 0))
(assert (<= (+ (- 2) (* x1 1)) 0))
(assert (> (+ 6 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 7 (* x0 1)) 0))
(assert (<= (+ (- 1) (* x1 1)) 0))
(assert (<= (+ 7 (* x0 3) (* x1 1)) 0))

==============
Solving Branch is 23!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (>= (+ 0 (* x0 1)) 0))
(assert (<= (+ (- 8) (* x1 1)) 0))
(assert (<= (+ 0 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 10) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (<= (+ (- 7) (* x1 1)) 0))
(assert (> (+ 1 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (> (+ 2 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))
(assert (> (+ 3 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (<= (+ (- 4) (* x1 1)) 0))
(assert (> (+ 4 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 5 (* x0 1)) 0))
(assert (<= (+ (- 3) (* x1 1)) 0))
(assert (> (+ 5 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 6 (* x0 1)) 0))
(assert (<= (+ (- 2) (* x1 1)) 0))
(assert (> (+ 6 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 7 (* x0 1)) 0))
(assert (> (+ (- 1) (* x1 1)) 0))

==============
Solving Branch is 22!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (>= (+ 0 (* x0 1)) 0))
(assert (<= (+ (- 8) (* x1 1)) 0))
(assert (<= (+ 0 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 10) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (<= (+ (- 7) (* x1 1)) 0))
(assert (> (+ 1 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (> (+ 2 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))
(assert (> (+ 3 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (<= (+ (- 4) (* x1 1)) 0))
(assert (> (+ 4 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 5 (* x0 1)) 0))
(assert (<= (+ (- 3) (* x1 1)) 0))
(assert (> (+ 5 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 6 (* x0 1)) 0))
(assert (<= (+ (- 2) (* x1 1)) 0))
(assert (> (+ 6 (* x0 3) (* x1 1)) 0))
(assert (< (+ 7 (* x0 1)) 0))

==============
Solving Branch is 21!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (>= (+ 0 (* x0 1)) 0))
(assert (<= (+ (- 8) (* x1 1)) 0))
(assert (<= (+ 0 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 10) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (<= (+ (- 7) (* x1 1)) 0))
(assert (> (+ 1 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (> (+ 2 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))
(assert (> (+ 3 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (<= (+ (- 4) (* x1 1)) 0))
(assert (> (+ 4 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 5 (* x0 1)) 0))
(assert (<= (+ (- 3) (* x1 1)) 0))
(assert (> (+ 5 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 6 (* x0 1)) 0))
(assert (<= (+ (- 2) (* x1 1)) 0))
(assert (<= (+ 6 (* x0 3) (* x1 1)) 0))

==============
Solving Branch is 20!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (>= (+ 0 (* x0 1)) 0))
(assert (<= (+ (- 8) (* x1 1)) 0))
(assert (<= (+ 0 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 10) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (<= (+ (- 7) (* x1 1)) 0))
(assert (> (+ 1 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (> (+ 2 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))
(assert (> (+ 3 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (<= (+ (- 4) (* x1 1)) 0))
(assert (> (+ 4 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 5 (* x0 1)) 0))
(assert (<= (+ (- 3) (* x1 1)) 0))
(assert (> (+ 5 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 6 (* x0 1)) 0))
(assert (> (+ (- 2) (* x1 1)) 0))

==============
Solving Branch is 19!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (>= (+ 0 (* x0 1)) 0))
(assert (<= (+ (- 8) (* x1 1)) 0))
(assert (<= (+ 0 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 10) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (<= (+ (- 7) (* x1 1)) 0))
(assert (> (+ 1 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (> (+ 2 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))
(assert (> (+ 3 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (<= (+ (- 4) (* x1 1)) 0))
(assert (> (+ 4 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 5 (* x0 1)) 0))
(assert (<= (+ (- 3) (* x1 1)) 0))
(assert (> (+ 5 (* x0 3) (* x1 1)) 0))
(assert (< (+ 6 (* x0 1)) 0))

==============
Solving Branch is 18!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (>= (+ 0 (* x0 1)) 0))
(assert (<= (+ (- 8) (* x1 1)) 0))
(assert (<= (+ 0 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 10) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (<= (+ (- 7) (* x1 1)) 0))
(assert (> (+ 1 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (> (+ 2 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))
(assert (> (+ 3 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (<= (+ (- 4) (* x1 1)) 0))
(assert (> (+ 4 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 5 (* x0 1)) 0))
(assert (<= (+ (- 3) (* x1 1)) 0))
(assert (<= (+ 5 (* x0 3) (* x1 1)) 0))

==============
Solving Branch is 17!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (>= (+ 0 (* x0 1)) 0))
(assert (<= (+ (- 8) (* x1 1)) 0))
(assert (<= (+ 0 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 10) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (<= (+ (- 7) (* x1 1)) 0))
(assert (> (+ 1 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (> (+ 2 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))
(assert (> (+ 3 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (<= (+ (- 4) (* x1 1)) 0))
(assert (> (+ 4 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 5 (* x0 1)) 0))
(assert (> (+ (- 3) (* x1 1)) 0))

==============
Solving Branch is 16!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (>= (+ 0 (* x0 1)) 0))
(assert (<= (+ (- 8) (* x1 1)) 0))
(assert (<= (+ 0 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 10) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (<= (+ (- 7) (* x1 1)) 0))
(assert (> (+ 1 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (> (+ 2 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))
(assert (> (+ 3 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (<= (+ (- 4) (* x1 1)) 0))
(assert (> (+ 4 (* x0 3) (* x1 1)) 0))
(assert (< (+ 5 (* x0 1)) 0))

==============
Solving Branch is 15!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (>= (+ 0 (* x0 1)) 0))
(assert (<= (+ (- 8) (* x1 1)) 0))
(assert (<= (+ 0 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 10) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (<= (+ (- 7) (* x1 1)) 0))
(assert (> (+ 1 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (> (+ 2 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))
(assert (> (+ 3 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (<= (+ (- 4) (* x1 1)) 0))
(assert (<= (+ 4 (* x0 3) (* x1 1)) 0))

==============
Solving Branch is 14!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (>= (+ 0 (* x0 1)) 0))
(assert (<= (+ (- 8) (* x1 1)) 0))
(assert (<= (+ 0 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 10) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (<= (+ (- 7) (* x1 1)) 0))
(assert (> (+ 1 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (> (+ 2 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))
(assert (> (+ 3 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (> (+ (- 4) (* x1 1)) 0))

==============
Solving Branch is 13!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (>= (+ 0 (* x0 1)) 0))
(assert (<= (+ (- 8) (* x1 1)) 0))
(assert (<= (+ 0 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 10) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (<= (+ (- 7) (* x1 1)) 0))
(assert (> (+ 1 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (> (+ 2 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))
(assert (> (+ 3 (* x0 3) (* x1 1)) 0))
(assert (< (+ 4 (* x0 1)) 0))

==============
Solving Branch is 12!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (>= (+ 0 (* x0 1)) 0))
(assert (<= (+ (- 8) (* x1 1)) 0))
(assert (<= (+ 0 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 10) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (<= (+ (- 7) (* x1 1)) 0))
(assert (> (+ 1 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (> (+ 2 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))
(assert (<= (+ 3 (* x0 3) (* x1 1)) 0))

==============
Solving Branch is 11!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (>= (+ 0 (* x0 1)) 0))
(assert (<= (+ (- 8) (* x1 1)) 0))
(assert (<= (+ 0 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 10) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (<= (+ (- 7) (* x1 1)) 0))
(assert (> (+ 1 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (> (+ 2 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (> (+ (- 5) (* x1 1)) 0))

==============
Solving Branch is 10!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (>= (+ 0 (* x0 1)) 0))
(assert (<= (+ (- 8) (* x1 1)) 0))
(assert (<= (+ 0 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 10) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (<= (+ (- 7) (* x1 1)) 0))
(assert (> (+ 1 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (> (+ 2 (* x0 3) (* x1 1)) 0))
(assert (< (+ 3 (* x0 1)) 0))

==============
Solving Branch is 9!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (>= (+ 0 (* x0 1)) 0))
(assert (<= (+ (- 8) (* x1 1)) 0))
(assert (<= (+ 0 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 10) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (<= (+ (- 7) (* x1 1)) 0))
(assert (> (+ 1 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (<= (+ 2 (* x0 3) (* x1 1)) 0))

==============
Solving Branch is 8!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (>= (+ 0 (* x0 1)) 0))
(assert (<= (+ (- 8) (* x1 1)) 0))
(assert (<= (+ 0 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 10) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (<= (+ (- 7) (* x1 1)) 0))
(assert (> (+ 1 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (> (+ (- 6) (* x1 1)) 0))

==============
Solving Branch is 7!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (>= (+ 0 (* x0 1)) 0))
(assert (<= (+ (- 8) (* x1 1)) 0))
(assert (<= (+ 0 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 10) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (<= (+ (- 7) (* x1 1)) 0))
(assert (> (+ 1 (* x0 3) (* x1 1)) 0))
(assert (< (+ 2 (* x0 1)) 0))

==============
Solving Branch is 6!!!!
before solve at
sat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (>= (+ 0 (* x0 1)) 0))
(assert (<= (+ (- 8) (* x1 1)) 0))
(assert (<= (+ 0 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 10) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (<= (+ (- 7) (* x1 1)) 0))
(assert (<= (+ 1 (* x0 3) (* x1 1)) 0))
(rmodel->model-converter-wrapper
x1 -> (- 1)
x0 -> 0
)

==============
after solve
Total Elapsed Time: 1.18517
  Search Time: 1.01872
  Solving Time: 0.116514
  Program Time: 0.049939
remote run 0
input string 0
-1

parsin not complete!
branch size: 45
costraint size: 32
costraint size1: 32
costraint siz2e: 32
constraints_idx[0]:2constraints_idx[1]:3constraints_idx[2]:4constraints_idx[3]:5constraints_idx[4]:7constraints_idx[5]:8constraints_idx[6]:9constraints_idx[7]:10constraints_idx[8]:12constraints_idx[9]:13constraints_idx[10]:14constraints_idx[11]:16constraints_idx[12]:17constraints_idx[13]:18constraints_idx[14]:20constraints_idx[15]:21constraints_idx[16]:22constraints_idx[17]:24constraints_idx[18]:25constraints_idx[19]:26constraints_idx[20]:28constraints_idx[21]:29constraints_idx[22]:30constraints_idx[23]:32constraints_idx[24]:33constraints_idx[25]:34constraints_idx[26]:36constraints_idx[27]:37constraints_idx[28]:38constraints_idx[29]:40constraints_idx[30]:41constraints_idx[31]:42costraint idx front: 2
parsing complete!
Iteration 3 (1s): covered 8 branches [1 reach funs, 10 reach branches].
path.constraints_idx[6]=9
-1 6 10 12 14 15 6 10 12 13 6 10 12 13 6 10 12 13 6 10 12 13 6 10 12 13 6 10 12 13 6 10 12 13 6 10 12 13 6 10 11 7 -2 
-1 6 10 12 14 15 6 10 12 14 15 6 10 12 13 6 10 12 13 6 10 12 13 6 10 12 13 6 10 12 13 6 10 12 13 6 10 12 13 6 10 12 13 7 -2 
Constraint Size : 32
files.byte = 1326
no hi..
nRcv : 1024
no break..
file_info.st_size : 1024
files.byte 1326
no hi..
nRcv : 302
no break..
file_info.st_size : 1326
files.byte 1326
send done...
after run
after updatecover
after branch_idx
prev_ex 
cur_ex 
third branch_idx = 9
after checkprediction
after SymbolicPath
Solving Branch is 31!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (>= (+ 0 (* x0 1)) 0))
(assert (<= (+ (- 8) (* x1 1)) 0))
(assert (<= (+ 0 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 10) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (<= (+ (- 7) (* x1 1)) 0))
(assert (<= (+ 1 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 9) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (> (+ 2 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))
(assert (> (+ 3 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (<= (+ (- 4) (* x1 1)) 0))
(assert (> (+ 4 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 5 (* x0 1)) 0))
(assert (<= (+ (- 3) (* x1 1)) 0))
(assert (> (+ 5 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 6 (* x0 1)) 0))
(assert (<= (+ (- 2) (* x1 1)) 0))
(assert (> (+ 6 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 7 (* x0 1)) 0))
(assert (<= (+ (- 1) (* x1 1)) 0))
(assert (> (+ 7 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 8 (* x0 1)) 0))
(assert (<= (+ 0 (* x1 1)) 0))
(assert (> (+ 8 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 9 (* x0 1)) 0))
(assert (<= (+ 1 (* x1 1)) 0))
(assert (<= (+ 9 (* x0 3) (* x1 1)) 0))

==============
Solving Branch is 30!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (>= (+ 0 (* x0 1)) 0))
(assert (<= (+ (- 8) (* x1 1)) 0))
(assert (<= (+ 0 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 10) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (<= (+ (- 7) (* x1 1)) 0))
(assert (<= (+ 1 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 9) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (> (+ 2 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))
(assert (> (+ 3 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (<= (+ (- 4) (* x1 1)) 0))
(assert (> (+ 4 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 5 (* x0 1)) 0))
(assert (<= (+ (- 3) (* x1 1)) 0))
(assert (> (+ 5 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 6 (* x0 1)) 0))
(assert (<= (+ (- 2) (* x1 1)) 0))
(assert (> (+ 6 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 7 (* x0 1)) 0))
(assert (<= (+ (- 1) (* x1 1)) 0))
(assert (> (+ 7 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 8 (* x0 1)) 0))
(assert (<= (+ 0 (* x1 1)) 0))
(assert (> (+ 8 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 9 (* x0 1)) 0))
(assert (> (+ 1 (* x1 1)) 0))

==============
Solving Branch is 29!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (>= (+ 0 (* x0 1)) 0))
(assert (<= (+ (- 8) (* x1 1)) 0))
(assert (<= (+ 0 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 10) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (<= (+ (- 7) (* x1 1)) 0))
(assert (<= (+ 1 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 9) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (> (+ 2 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))
(assert (> (+ 3 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (<= (+ (- 4) (* x1 1)) 0))
(assert (> (+ 4 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 5 (* x0 1)) 0))
(assert (<= (+ (- 3) (* x1 1)) 0))
(assert (> (+ 5 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 6 (* x0 1)) 0))
(assert (<= (+ (- 2) (* x1 1)) 0))
(assert (> (+ 6 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 7 (* x0 1)) 0))
(assert (<= (+ (- 1) (* x1 1)) 0))
(assert (> (+ 7 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 8 (* x0 1)) 0))
(assert (<= (+ 0 (* x1 1)) 0))
(assert (> (+ 8 (* x0 3) (* x1 1)) 0))
(assert (< (+ 9 (* x0 1)) 0))

==============
Solving Branch is 28!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (>= (+ 0 (* x0 1)) 0))
(assert (<= (+ (- 8) (* x1 1)) 0))
(assert (<= (+ 0 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 10) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (<= (+ (- 7) (* x1 1)) 0))
(assert (<= (+ 1 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 9) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (> (+ 2 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))
(assert (> (+ 3 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (<= (+ (- 4) (* x1 1)) 0))
(assert (> (+ 4 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 5 (* x0 1)) 0))
(assert (<= (+ (- 3) (* x1 1)) 0))
(assert (> (+ 5 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 6 (* x0 1)) 0))
(assert (<= (+ (- 2) (* x1 1)) 0))
(assert (> (+ 6 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 7 (* x0 1)) 0))
(assert (<= (+ (- 1) (* x1 1)) 0))
(assert (> (+ 7 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 8 (* x0 1)) 0))
(assert (<= (+ 0 (* x1 1)) 0))
(assert (<= (+ 8 (* x0 3) (* x1 1)) 0))

==============
Solving Branch is 27!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (>= (+ 0 (* x0 1)) 0))
(assert (<= (+ (- 8) (* x1 1)) 0))
(assert (<= (+ 0 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 10) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (<= (+ (- 7) (* x1 1)) 0))
(assert (<= (+ 1 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 9) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (> (+ 2 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))
(assert (> (+ 3 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (<= (+ (- 4) (* x1 1)) 0))
(assert (> (+ 4 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 5 (* x0 1)) 0))
(assert (<= (+ (- 3) (* x1 1)) 0))
(assert (> (+ 5 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 6 (* x0 1)) 0))
(assert (<= (+ (- 2) (* x1 1)) 0))
(assert (> (+ 6 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 7 (* x0 1)) 0))
(assert (<= (+ (- 1) (* x1 1)) 0))
(assert (> (+ 7 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 8 (* x0 1)) 0))
(assert (> (+ 0 (* x1 1)) 0))

==============
Solving Branch is 26!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (>= (+ 0 (* x0 1)) 0))
(assert (<= (+ (- 8) (* x1 1)) 0))
(assert (<= (+ 0 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 10) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (<= (+ (- 7) (* x1 1)) 0))
(assert (<= (+ 1 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 9) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (> (+ 2 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))
(assert (> (+ 3 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (<= (+ (- 4) (* x1 1)) 0))
(assert (> (+ 4 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 5 (* x0 1)) 0))
(assert (<= (+ (- 3) (* x1 1)) 0))
(assert (> (+ 5 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 6 (* x0 1)) 0))
(assert (<= (+ (- 2) (* x1 1)) 0))
(assert (> (+ 6 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 7 (* x0 1)) 0))
(assert (<= (+ (- 1) (* x1 1)) 0))
(assert (> (+ 7 (* x0 3) (* x1 1)) 0))
(assert (< (+ 8 (* x0 1)) 0))

==============
Solving Branch is 25!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (>= (+ 0 (* x0 1)) 0))
(assert (<= (+ (- 8) (* x1 1)) 0))
(assert (<= (+ 0 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 10) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (<= (+ (- 7) (* x1 1)) 0))
(assert (<= (+ 1 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 9) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (> (+ 2 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))
(assert (> (+ 3 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (<= (+ (- 4) (* x1 1)) 0))
(assert (> (+ 4 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 5 (* x0 1)) 0))
(assert (<= (+ (- 3) (* x1 1)) 0))
(assert (> (+ 5 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 6 (* x0 1)) 0))
(assert (<= (+ (- 2) (* x1 1)) 0))
(assert (> (+ 6 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 7 (* x0 1)) 0))
(assert (<= (+ (- 1) (* x1 1)) 0))
(assert (<= (+ 7 (* x0 3) (* x1 1)) 0))

==============
Solving Branch is 24!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (>= (+ 0 (* x0 1)) 0))
(assert (<= (+ (- 8) (* x1 1)) 0))
(assert (<= (+ 0 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 10) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (<= (+ (- 7) (* x1 1)) 0))
(assert (<= (+ 1 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 9) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (> (+ 2 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))
(assert (> (+ 3 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (<= (+ (- 4) (* x1 1)) 0))
(assert (> (+ 4 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 5 (* x0 1)) 0))
(assert (<= (+ (- 3) (* x1 1)) 0))
(assert (> (+ 5 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 6 (* x0 1)) 0))
(assert (<= (+ (- 2) (* x1 1)) 0))
(assert (> (+ 6 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 7 (* x0 1)) 0))
(assert (> (+ (- 1) (* x1 1)) 0))

==============
Solving Branch is 23!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (>= (+ 0 (* x0 1)) 0))
(assert (<= (+ (- 8) (* x1 1)) 0))
(assert (<= (+ 0 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 10) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (<= (+ (- 7) (* x1 1)) 0))
(assert (<= (+ 1 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 9) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (> (+ 2 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))
(assert (> (+ 3 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (<= (+ (- 4) (* x1 1)) 0))
(assert (> (+ 4 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 5 (* x0 1)) 0))
(assert (<= (+ (- 3) (* x1 1)) 0))
(assert (> (+ 5 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 6 (* x0 1)) 0))
(assert (<= (+ (- 2) (* x1 1)) 0))
(assert (> (+ 6 (* x0 3) (* x1 1)) 0))
(assert (< (+ 7 (* x0 1)) 0))

==============
Solving Branch is 22!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (>= (+ 0 (* x0 1)) 0))
(assert (<= (+ (- 8) (* x1 1)) 0))
(assert (<= (+ 0 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 10) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (<= (+ (- 7) (* x1 1)) 0))
(assert (<= (+ 1 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 9) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (> (+ 2 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))
(assert (> (+ 3 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (<= (+ (- 4) (* x1 1)) 0))
(assert (> (+ 4 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 5 (* x0 1)) 0))
(assert (<= (+ (- 3) (* x1 1)) 0))
(assert (> (+ 5 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 6 (* x0 1)) 0))
(assert (<= (+ (- 2) (* x1 1)) 0))
(assert (<= (+ 6 (* x0 3) (* x1 1)) 0))

==============
Solving Branch is 21!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (>= (+ 0 (* x0 1)) 0))
(assert (<= (+ (- 8) (* x1 1)) 0))
(assert (<= (+ 0 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 10) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (<= (+ (- 7) (* x1 1)) 0))
(assert (<= (+ 1 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 9) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (> (+ 2 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))
(assert (> (+ 3 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (<= (+ (- 4) (* x1 1)) 0))
(assert (> (+ 4 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 5 (* x0 1)) 0))
(assert (<= (+ (- 3) (* x1 1)) 0))
(assert (> (+ 5 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 6 (* x0 1)) 0))
(assert (> (+ (- 2) (* x1 1)) 0))

==============
Solving Branch is 20!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (>= (+ 0 (* x0 1)) 0))
(assert (<= (+ (- 8) (* x1 1)) 0))
(assert (<= (+ 0 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 10) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (<= (+ (- 7) (* x1 1)) 0))
(assert (<= (+ 1 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 9) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (> (+ 2 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))
(assert (> (+ 3 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (<= (+ (- 4) (* x1 1)) 0))
(assert (> (+ 4 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 5 (* x0 1)) 0))
(assert (<= (+ (- 3) (* x1 1)) 0))
(assert (> (+ 5 (* x0 3) (* x1 1)) 0))
(assert (< (+ 6 (* x0 1)) 0))

==============
Solving Branch is 19!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (>= (+ 0 (* x0 1)) 0))
(assert (<= (+ (- 8) (* x1 1)) 0))
(assert (<= (+ 0 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 10) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (<= (+ (- 7) (* x1 1)) 0))
(assert (<= (+ 1 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 9) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (> (+ 2 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))
(assert (> (+ 3 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (<= (+ (- 4) (* x1 1)) 0))
(assert (> (+ 4 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 5 (* x0 1)) 0))
(assert (<= (+ (- 3) (* x1 1)) 0))
(assert (<= (+ 5 (* x0 3) (* x1 1)) 0))

==============
Solving Branch is 18!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (>= (+ 0 (* x0 1)) 0))
(assert (<= (+ (- 8) (* x1 1)) 0))
(assert (<= (+ 0 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 10) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (<= (+ (- 7) (* x1 1)) 0))
(assert (<= (+ 1 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 9) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (> (+ 2 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))
(assert (> (+ 3 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (<= (+ (- 4) (* x1 1)) 0))
(assert (> (+ 4 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 5 (* x0 1)) 0))
(assert (> (+ (- 3) (* x1 1)) 0))

==============
Solving Branch is 17!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (>= (+ 0 (* x0 1)) 0))
(assert (<= (+ (- 8) (* x1 1)) 0))
(assert (<= (+ 0 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 10) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (<= (+ (- 7) (* x1 1)) 0))
(assert (<= (+ 1 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 9) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (> (+ 2 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))
(assert (> (+ 3 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (<= (+ (- 4) (* x1 1)) 0))
(assert (> (+ 4 (* x0 3) (* x1 1)) 0))
(assert (< (+ 5 (* x0 1)) 0))

==============
Solving Branch is 16!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (>= (+ 0 (* x0 1)) 0))
(assert (<= (+ (- 8) (* x1 1)) 0))
(assert (<= (+ 0 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 10) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (<= (+ (- 7) (* x1 1)) 0))
(assert (<= (+ 1 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 9) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (> (+ 2 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))
(assert (> (+ 3 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (<= (+ (- 4) (* x1 1)) 0))
(assert (<= (+ 4 (* x0 3) (* x1 1)) 0))

==============
Solving Branch is 15!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (>= (+ 0 (* x0 1)) 0))
(assert (<= (+ (- 8) (* x1 1)) 0))
(assert (<= (+ 0 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 10) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (<= (+ (- 7) (* x1 1)) 0))
(assert (<= (+ 1 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 9) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (> (+ 2 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))
(assert (> (+ 3 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (> (+ (- 4) (* x1 1)) 0))

==============
Solving Branch is 14!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (>= (+ 0 (* x0 1)) 0))
(assert (<= (+ (- 8) (* x1 1)) 0))
(assert (<= (+ 0 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 10) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (<= (+ (- 7) (* x1 1)) 0))
(assert (<= (+ 1 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 9) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (> (+ 2 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))
(assert (> (+ 3 (* x0 3) (* x1 1)) 0))
(assert (< (+ 4 (* x0 1)) 0))

==============
Solving Branch is 13!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (>= (+ 0 (* x0 1)) 0))
(assert (<= (+ (- 8) (* x1 1)) 0))
(assert (<= (+ 0 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 10) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (<= (+ (- 7) (* x1 1)) 0))
(assert (<= (+ 1 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 9) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (> (+ 2 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))
(assert (<= (+ 3 (* x0 3) (* x1 1)) 0))

==============
Solving Branch is 12!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (>= (+ 0 (* x0 1)) 0))
(assert (<= (+ (- 8) (* x1 1)) 0))
(assert (<= (+ 0 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 10) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (<= (+ (- 7) (* x1 1)) 0))
(assert (<= (+ 1 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 9) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (> (+ 2 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (> (+ (- 5) (* x1 1)) 0))

==============
Solving Branch is 11!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (>= (+ 0 (* x0 1)) 0))
(assert (<= (+ (- 8) (* x1 1)) 0))
(assert (<= (+ 0 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 10) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (<= (+ (- 7) (* x1 1)) 0))
(assert (<= (+ 1 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 9) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (> (+ 2 (* x0 3) (* x1 1)) 0))
(assert (< (+ 3 (* x0 1)) 0))

==============
Solving Branch is 10!!!!
before solve at
sat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (>= (+ 0 (* x0 1)) 0))
(assert (<= (+ (- 8) (* x1 1)) 0))
(assert (<= (+ 0 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 10) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (<= (+ (- 7) (* x1 1)) 0))
(assert (<= (+ 1 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 9) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (<= (+ 2 (* x0 3) (* x1 1)) 0))
(rmodel->model-converter-wrapper
x1 -> (- 2)
x0 -> 0
)

==============
after solve
Total Elapsed Time: 1.24929
  Search Time: 1.02052
  Solving Time: 0.163943
  Program Time: 0.064826
remote run 0
input string 0
-2

parsin not complete!
branch size: 46
costraint size: 33
costraint size1: 33
costraint siz2e: 33
constraints_idx[0]:2constraints_idx[1]:3constraints_idx[2]:4constraints_idx[3]:5constraints_idx[4]:7constraints_idx[5]:8constraints_idx[6]:9constraints_idx[7]:10constraints_idx[8]:12constraints_idx[9]:13constraints_idx[10]:14constraints_idx[11]:15constraints_idx[12]:17constraints_idx[13]:18constraints_idx[14]:19constraints_idx[15]:21constraints_idx[16]:22constraints_idx[17]:23constraints_idx[18]:25constraints_idx[19]:26constraints_idx[20]:27constraints_idx[21]:29constraints_idx[22]:30constraints_idx[23]:31constraints_idx[24]:33constraints_idx[25]:34constraints_idx[26]:35constraints_idx[27]:37constraints_idx[28]:38constraints_idx[29]:39constraints_idx[30]:41constraints_idx[31]:42constraints_idx[32]:43costraint idx front: 2
parsing complete!
Iteration 4 (1s): covered 8 branches [1 reach funs, 10 reach branches].
path.constraints_idx[10]=14
-1 6 10 12 14 15 6 10 12 14 15 6 10 12 13 6 10 12 13 6 10 12 13 6 10 12 13 6 10 12 13 6 10 12 13 6 10 12 13 6 10 12 13 7 -2 
-1 6 10 12 14 15 6 10 12 14 15 6 10 12 14 15 6 10 12 13 6 10 12 13 6 10 12 13 6 10 12 13 6 10 12 13 6 10 12 13 6 10 12 13 7 -2 
Constraint Size : 33
files.byte = 1372
no hi..
nRcv : 1024
no break..
file_info.st_size : 1024
files.byte 1372
no hi..
nRcv : 348
no break..
file_info.st_size : 1372
files.byte 1372
send done...
after run
after updatecover
after branch_idx
prev_ex 
cur_ex 
third branch_idx = 14
after checkprediction
after SymbolicPath
Solving Branch is 32!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (>= (+ 0 (* x0 1)) 0))
(assert (<= (+ (- 8) (* x1 1)) 0))
(assert (<= (+ 0 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 10) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (<= (+ (- 7) (* x1 1)) 0))
(assert (<= (+ 1 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 9) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (<= (+ 2 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 8) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))
(assert (> (+ 3 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (<= (+ (- 4) (* x1 1)) 0))
(assert (> (+ 4 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 5 (* x0 1)) 0))
(assert (<= (+ (- 3) (* x1 1)) 0))
(assert (> (+ 5 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 6 (* x0 1)) 0))
(assert (<= (+ (- 2) (* x1 1)) 0))
(assert (> (+ 6 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 7 (* x0 1)) 0))
(assert (<= (+ (- 1) (* x1 1)) 0))
(assert (> (+ 7 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 8 (* x0 1)) 0))
(assert (<= (+ 0 (* x1 1)) 0))
(assert (> (+ 8 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 9 (* x0 1)) 0))
(assert (<= (+ 1 (* x1 1)) 0))
(assert (<= (+ 9 (* x0 3) (* x1 1)) 0))

==============
Solving Branch is 31!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (>= (+ 0 (* x0 1)) 0))
(assert (<= (+ (- 8) (* x1 1)) 0))
(assert (<= (+ 0 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 10) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (<= (+ (- 7) (* x1 1)) 0))
(assert (<= (+ 1 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 9) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (<= (+ 2 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 8) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))
(assert (> (+ 3 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (<= (+ (- 4) (* x1 1)) 0))
(assert (> (+ 4 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 5 (* x0 1)) 0))
(assert (<= (+ (- 3) (* x1 1)) 0))
(assert (> (+ 5 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 6 (* x0 1)) 0))
(assert (<= (+ (- 2) (* x1 1)) 0))
(assert (> (+ 6 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 7 (* x0 1)) 0))
(assert (<= (+ (- 1) (* x1 1)) 0))
(assert (> (+ 7 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 8 (* x0 1)) 0))
(assert (<= (+ 0 (* x1 1)) 0))
(assert (> (+ 8 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 9 (* x0 1)) 0))
(assert (> (+ 1 (* x1 1)) 0))

==============
Solving Branch is 30!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (>= (+ 0 (* x0 1)) 0))
(assert (<= (+ (- 8) (* x1 1)) 0))
(assert (<= (+ 0 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 10) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (<= (+ (- 7) (* x1 1)) 0))
(assert (<= (+ 1 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 9) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (<= (+ 2 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 8) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))
(assert (> (+ 3 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (<= (+ (- 4) (* x1 1)) 0))
(assert (> (+ 4 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 5 (* x0 1)) 0))
(assert (<= (+ (- 3) (* x1 1)) 0))
(assert (> (+ 5 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 6 (* x0 1)) 0))
(assert (<= (+ (- 2) (* x1 1)) 0))
(assert (> (+ 6 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 7 (* x0 1)) 0))
(assert (<= (+ (- 1) (* x1 1)) 0))
(assert (> (+ 7 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 8 (* x0 1)) 0))
(assert (<= (+ 0 (* x1 1)) 0))
(assert (> (+ 8 (* x0 3) (* x1 1)) 0))
(assert (< (+ 9 (* x0 1)) 0))

==============
Solving Branch is 29!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (>= (+ 0 (* x0 1)) 0))
(assert (<= (+ (- 8) (* x1 1)) 0))
(assert (<= (+ 0 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 10) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (<= (+ (- 7) (* x1 1)) 0))
(assert (<= (+ 1 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 9) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (<= (+ 2 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 8) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))
(assert (> (+ 3 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (<= (+ (- 4) (* x1 1)) 0))
(assert (> (+ 4 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 5 (* x0 1)) 0))
(assert (<= (+ (- 3) (* x1 1)) 0))
(assert (> (+ 5 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 6 (* x0 1)) 0))
(assert (<= (+ (- 2) (* x1 1)) 0))
(assert (> (+ 6 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 7 (* x0 1)) 0))
(assert (<= (+ (- 1) (* x1 1)) 0))
(assert (> (+ 7 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 8 (* x0 1)) 0))
(assert (<= (+ 0 (* x1 1)) 0))
(assert (<= (+ 8 (* x0 3) (* x1 1)) 0))

==============
Solving Branch is 28!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (>= (+ 0 (* x0 1)) 0))
(assert (<= (+ (- 8) (* x1 1)) 0))
(assert (<= (+ 0 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 10) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (<= (+ (- 7) (* x1 1)) 0))
(assert (<= (+ 1 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 9) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (<= (+ 2 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 8) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))
(assert (> (+ 3 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (<= (+ (- 4) (* x1 1)) 0))
(assert (> (+ 4 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 5 (* x0 1)) 0))
(assert (<= (+ (- 3) (* x1 1)) 0))
(assert (> (+ 5 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 6 (* x0 1)) 0))
(assert (<= (+ (- 2) (* x1 1)) 0))
(assert (> (+ 6 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 7 (* x0 1)) 0))
(assert (<= (+ (- 1) (* x1 1)) 0))
(assert (> (+ 7 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 8 (* x0 1)) 0))
(assert (> (+ 0 (* x1 1)) 0))

==============
Solving Branch is 27!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (>= (+ 0 (* x0 1)) 0))
(assert (<= (+ (- 8) (* x1 1)) 0))
(assert (<= (+ 0 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 10) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (<= (+ (- 7) (* x1 1)) 0))
(assert (<= (+ 1 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 9) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (<= (+ 2 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 8) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))
(assert (> (+ 3 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (<= (+ (- 4) (* x1 1)) 0))
(assert (> (+ 4 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 5 (* x0 1)) 0))
(assert (<= (+ (- 3) (* x1 1)) 0))
(assert (> (+ 5 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 6 (* x0 1)) 0))
(assert (<= (+ (- 2) (* x1 1)) 0))
(assert (> (+ 6 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 7 (* x0 1)) 0))
(assert (<= (+ (- 1) (* x1 1)) 0))
(assert (> (+ 7 (* x0 3) (* x1 1)) 0))
(assert (< (+ 8 (* x0 1)) 0))

==============
Solving Branch is 26!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (>= (+ 0 (* x0 1)) 0))
(assert (<= (+ (- 8) (* x1 1)) 0))
(assert (<= (+ 0 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 10) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (<= (+ (- 7) (* x1 1)) 0))
(assert (<= (+ 1 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 9) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (<= (+ 2 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 8) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))
(assert (> (+ 3 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (<= (+ (- 4) (* x1 1)) 0))
(assert (> (+ 4 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 5 (* x0 1)) 0))
(assert (<= (+ (- 3) (* x1 1)) 0))
(assert (> (+ 5 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 6 (* x0 1)) 0))
(assert (<= (+ (- 2) (* x1 1)) 0))
(assert (> (+ 6 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 7 (* x0 1)) 0))
(assert (<= (+ (- 1) (* x1 1)) 0))
(assert (<= (+ 7 (* x0 3) (* x1 1)) 0))

==============
Solving Branch is 25!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (>= (+ 0 (* x0 1)) 0))
(assert (<= (+ (- 8) (* x1 1)) 0))
(assert (<= (+ 0 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 10) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (<= (+ (- 7) (* x1 1)) 0))
(assert (<= (+ 1 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 9) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (<= (+ 2 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 8) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))
(assert (> (+ 3 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (<= (+ (- 4) (* x1 1)) 0))
(assert (> (+ 4 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 5 (* x0 1)) 0))
(assert (<= (+ (- 3) (* x1 1)) 0))
(assert (> (+ 5 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 6 (* x0 1)) 0))
(assert (<= (+ (- 2) (* x1 1)) 0))
(assert (> (+ 6 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 7 (* x0 1)) 0))
(assert (> (+ (- 1) (* x1 1)) 0))

==============
Solving Branch is 24!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (>= (+ 0 (* x0 1)) 0))
(assert (<= (+ (- 8) (* x1 1)) 0))
(assert (<= (+ 0 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 10) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (<= (+ (- 7) (* x1 1)) 0))
(assert (<= (+ 1 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 9) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (<= (+ 2 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 8) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))
(assert (> (+ 3 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (<= (+ (- 4) (* x1 1)) 0))
(assert (> (+ 4 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 5 (* x0 1)) 0))
(assert (<= (+ (- 3) (* x1 1)) 0))
(assert (> (+ 5 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 6 (* x0 1)) 0))
(assert (<= (+ (- 2) (* x1 1)) 0))
(assert (> (+ 6 (* x0 3) (* x1 1)) 0))
(assert (< (+ 7 (* x0 1)) 0))

==============
Solving Branch is 23!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (>= (+ 0 (* x0 1)) 0))
(assert (<= (+ (- 8) (* x1 1)) 0))
(assert (<= (+ 0 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 10) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (<= (+ (- 7) (* x1 1)) 0))
(assert (<= (+ 1 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 9) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (<= (+ 2 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 8) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))
(assert (> (+ 3 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (<= (+ (- 4) (* x1 1)) 0))
(assert (> (+ 4 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 5 (* x0 1)) 0))
(assert (<= (+ (- 3) (* x1 1)) 0))
(assert (> (+ 5 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 6 (* x0 1)) 0))
(assert (<= (+ (- 2) (* x1 1)) 0))
(assert (<= (+ 6 (* x0 3) (* x1 1)) 0))

==============
Solving Branch is 22!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (>= (+ 0 (* x0 1)) 0))
(assert (<= (+ (- 8) (* x1 1)) 0))
(assert (<= (+ 0 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 10) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (<= (+ (- 7) (* x1 1)) 0))
(assert (<= (+ 1 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 9) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (<= (+ 2 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 8) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))
(assert (> (+ 3 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (<= (+ (- 4) (* x1 1)) 0))
(assert (> (+ 4 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 5 (* x0 1)) 0))
(assert (<= (+ (- 3) (* x1 1)) 0))
(assert (> (+ 5 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 6 (* x0 1)) 0))
(assert (> (+ (- 2) (* x1 1)) 0))

==============
Solving Branch is 21!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (>= (+ 0 (* x0 1)) 0))
(assert (<= (+ (- 8) (* x1 1)) 0))
(assert (<= (+ 0 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 10) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (<= (+ (- 7) (* x1 1)) 0))
(assert (<= (+ 1 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 9) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (<= (+ 2 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 8) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))
(assert (> (+ 3 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (<= (+ (- 4) (* x1 1)) 0))
(assert (> (+ 4 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 5 (* x0 1)) 0))
(assert (<= (+ (- 3) (* x1 1)) 0))
(assert (> (+ 5 (* x0 3) (* x1 1)) 0))
(assert (< (+ 6 (* x0 1)) 0))

==============
Solving Branch is 20!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (>= (+ 0 (* x0 1)) 0))
(assert (<= (+ (- 8) (* x1 1)) 0))
(assert (<= (+ 0 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 10) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (<= (+ (- 7) (* x1 1)) 0))
(assert (<= (+ 1 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 9) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (<= (+ 2 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 8) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))
(assert (> (+ 3 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (<= (+ (- 4) (* x1 1)) 0))
(assert (> (+ 4 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 5 (* x0 1)) 0))
(assert (<= (+ (- 3) (* x1 1)) 0))
(assert (<= (+ 5 (* x0 3) (* x1 1)) 0))

==============
Solving Branch is 19!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (>= (+ 0 (* x0 1)) 0))
(assert (<= (+ (- 8) (* x1 1)) 0))
(assert (<= (+ 0 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 10) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (<= (+ (- 7) (* x1 1)) 0))
(assert (<= (+ 1 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 9) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (<= (+ 2 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 8) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))
(assert (> (+ 3 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (<= (+ (- 4) (* x1 1)) 0))
(assert (> (+ 4 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 5 (* x0 1)) 0))
(assert (> (+ (- 3) (* x1 1)) 0))

==============
Solving Branch is 18!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (>= (+ 0 (* x0 1)) 0))
(assert (<= (+ (- 8) (* x1 1)) 0))
(assert (<= (+ 0 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 10) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (<= (+ (- 7) (* x1 1)) 0))
(assert (<= (+ 1 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 9) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (<= (+ 2 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 8) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))
(assert (> (+ 3 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (<= (+ (- 4) (* x1 1)) 0))
(assert (> (+ 4 (* x0 3) (* x1 1)) 0))
(assert (< (+ 5 (* x0 1)) 0))

==============
Solving Branch is 17!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (>= (+ 0 (* x0 1)) 0))
(assert (<= (+ (- 8) (* x1 1)) 0))
(assert (<= (+ 0 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 10) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (<= (+ (- 7) (* x1 1)) 0))
(assert (<= (+ 1 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 9) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (<= (+ 2 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 8) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))
(assert (> (+ 3 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (<= (+ (- 4) (* x1 1)) 0))
(assert (<= (+ 4 (* x0 3) (* x1 1)) 0))

==============
Solving Branch is 16!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (>= (+ 0 (* x0 1)) 0))
(assert (<= (+ (- 8) (* x1 1)) 0))
(assert (<= (+ 0 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 10) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (<= (+ (- 7) (* x1 1)) 0))
(assert (<= (+ 1 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 9) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (<= (+ 2 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 8) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))
(assert (> (+ 3 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (> (+ (- 4) (* x1 1)) 0))

==============
Solving Branch is 15!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (>= (+ 0 (* x0 1)) 0))
(assert (<= (+ (- 8) (* x1 1)) 0))
(assert (<= (+ 0 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 10) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (<= (+ (- 7) (* x1 1)) 0))
(assert (<= (+ 1 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 9) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (<= (+ 2 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 8) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))
(assert (> (+ 3 (* x0 3) (* x1 1)) 0))
(assert (< (+ 4 (* x0 1)) 0))

==============
Solving Branch is 14!!!!
before solve at
sat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (>= (+ 0 (* x0 1)) 0))
(assert (<= (+ (- 8) (* x1 1)) 0))
(assert (<= (+ 0 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 10) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (<= (+ (- 7) (* x1 1)) 0))
(assert (<= (+ 1 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 9) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (<= (+ 2 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 8) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))
(assert (<= (+ 3 (* x0 3) (* x1 1)) 0))
(rmodel->model-converter-wrapper
x1 -> (- 3)
x0 -> 0
)

==============
after solve
Total Elapsed Time: 1.31033
  Search Time: 1.02258
  Solving Time: 0.206527
  Program Time: 0.081223
remote run 0
input string 0
-3

parsin not complete!
branch size: 47
costraint size: 34
costraint size1: 34
costraint siz2e: 34
constraints_idx[0]:2constraints_idx[1]:3constraints_idx[2]:4constraints_idx[3]:5constraints_idx[4]:7constraints_idx[5]:8constraints_idx[6]:9constraints_idx[7]:10constraints_idx[8]:12constraints_idx[9]:13constraints_idx[10]:14constraints_idx[11]:15constraints_idx[12]:17constraints_idx[13]:18constraints_idx[14]:19constraints_idx[15]:20constraints_idx[16]:22constraints_idx[17]:23constraints_idx[18]:24constraints_idx[19]:26constraints_idx[20]:27constraints_idx[21]:28constraints_idx[22]:30constraints_idx[23]:31constraints_idx[24]:32constraints_idx[25]:34constraints_idx[26]:35constraints_idx[27]:36constraints_idx[28]:38constraints_idx[29]:39constraints_idx[30]:40constraints_idx[31]:42constraints_idx[32]:43constraints_idx[33]:44costraint idx front: 2
parsing complete!
Iteration 5 (1s): covered 8 branches [1 reach funs, 10 reach branches].
path.constraints_idx[14]=19
-1 6 10 12 14 15 6 10 12 14 15 6 10 12 14 15 6 10 12 13 6 10 12 13 6 10 12 13 6 10 12 13 6 10 12 13 6 10 12 13 6 10 12 13 7 -2 
-1 6 10 12 14 15 6 10 12 14 15 6 10 12 14 15 6 10 12 14 15 6 10 12 13 6 10 12 13 6 10 12 13 6 10 12 13 6 10 12 13 6 10 12 13 7 -2 
Constraint Size : 34
files.byte = 1418
no hi..
nRcv : 1024
no break..
file_info.st_size : 1024
files.byte 1418
no hi..
nRcv : 394
no break..
file_info.st_size : 1418
files.byte 1418
send done...
after run
after updatecover
after branch_idx
prev_ex 
cur_ex 
third branch_idx = 19
after checkprediction
after SymbolicPath
Solving Branch is 33!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (>= (+ 0 (* x0 1)) 0))
(assert (<= (+ (- 8) (* x1 1)) 0))
(assert (<= (+ 0 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 10) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (<= (+ (- 7) (* x1 1)) 0))
(assert (<= (+ 1 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 9) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (<= (+ 2 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 8) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))
(assert (<= (+ 3 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 7) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (<= (+ (- 4) (* x1 1)) 0))
(assert (> (+ 4 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 5 (* x0 1)) 0))
(assert (<= (+ (- 3) (* x1 1)) 0))
(assert (> (+ 5 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 6 (* x0 1)) 0))
(assert (<= (+ (- 2) (* x1 1)) 0))
(assert (> (+ 6 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 7 (* x0 1)) 0))
(assert (<= (+ (- 1) (* x1 1)) 0))
(assert (> (+ 7 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 8 (* x0 1)) 0))
(assert (<= (+ 0 (* x1 1)) 0))
(assert (> (+ 8 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 9 (* x0 1)) 0))
(assert (<= (+ 1 (* x1 1)) 0))
(assert (<= (+ 9 (* x0 3) (* x1 1)) 0))

==============
Solving Branch is 32!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (>= (+ 0 (* x0 1)) 0))
(assert (<= (+ (- 8) (* x1 1)) 0))
(assert (<= (+ 0 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 10) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (<= (+ (- 7) (* x1 1)) 0))
(assert (<= (+ 1 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 9) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (<= (+ 2 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 8) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))
(assert (<= (+ 3 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 7) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (<= (+ (- 4) (* x1 1)) 0))
(assert (> (+ 4 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 5 (* x0 1)) 0))
(assert (<= (+ (- 3) (* x1 1)) 0))
(assert (> (+ 5 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 6 (* x0 1)) 0))
(assert (<= (+ (- 2) (* x1 1)) 0))
(assert (> (+ 6 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 7 (* x0 1)) 0))
(assert (<= (+ (- 1) (* x1 1)) 0))
(assert (> (+ 7 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 8 (* x0 1)) 0))
(assert (<= (+ 0 (* x1 1)) 0))
(assert (> (+ 8 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 9 (* x0 1)) 0))
(assert (> (+ 1 (* x1 1)) 0))

==============
Solving Branch is 31!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (>= (+ 0 (* x0 1)) 0))
(assert (<= (+ (- 8) (* x1 1)) 0))
(assert (<= (+ 0 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 10) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (<= (+ (- 7) (* x1 1)) 0))
(assert (<= (+ 1 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 9) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (<= (+ 2 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 8) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))
(assert (<= (+ 3 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 7) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (<= (+ (- 4) (* x1 1)) 0))
(assert (> (+ 4 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 5 (* x0 1)) 0))
(assert (<= (+ (- 3) (* x1 1)) 0))
(assert (> (+ 5 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 6 (* x0 1)) 0))
(assert (<= (+ (- 2) (* x1 1)) 0))
(assert (> (+ 6 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 7 (* x0 1)) 0))
(assert (<= (+ (- 1) (* x1 1)) 0))
(assert (> (+ 7 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 8 (* x0 1)) 0))
(assert (<= (+ 0 (* x1 1)) 0))
(assert (> (+ 8 (* x0 3) (* x1 1)) 0))
(assert (< (+ 9 (* x0 1)) 0))

==============
Solving Branch is 30!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (>= (+ 0 (* x0 1)) 0))
(assert (<= (+ (- 8) (* x1 1)) 0))
(assert (<= (+ 0 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 10) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (<= (+ (- 7) (* x1 1)) 0))
(assert (<= (+ 1 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 9) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (<= (+ 2 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 8) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))
(assert (<= (+ 3 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 7) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (<= (+ (- 4) (* x1 1)) 0))
(assert (> (+ 4 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 5 (* x0 1)) 0))
(assert (<= (+ (- 3) (* x1 1)) 0))
(assert (> (+ 5 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 6 (* x0 1)) 0))
(assert (<= (+ (- 2) (* x1 1)) 0))
(assert (> (+ 6 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 7 (* x0 1)) 0))
(assert (<= (+ (- 1) (* x1 1)) 0))
(assert (> (+ 7 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 8 (* x0 1)) 0))
(assert (<= (+ 0 (* x1 1)) 0))
(assert (<= (+ 8 (* x0 3) (* x1 1)) 0))

==============
Solving Branch is 29!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (>= (+ 0 (* x0 1)) 0))
(assert (<= (+ (- 8) (* x1 1)) 0))
(assert (<= (+ 0 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 10) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (<= (+ (- 7) (* x1 1)) 0))
(assert (<= (+ 1 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 9) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (<= (+ 2 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 8) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))
(assert (<= (+ 3 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 7) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (<= (+ (- 4) (* x1 1)) 0))
(assert (> (+ 4 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 5 (* x0 1)) 0))
(assert (<= (+ (- 3) (* x1 1)) 0))
(assert (> (+ 5 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 6 (* x0 1)) 0))
(assert (<= (+ (- 2) (* x1 1)) 0))
(assert (> (+ 6 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 7 (* x0 1)) 0))
(assert (<= (+ (- 1) (* x1 1)) 0))
(assert (> (+ 7 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 8 (* x0 1)) 0))
(assert (> (+ 0 (* x1 1)) 0))

==============
Solving Branch is 28!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (>= (+ 0 (* x0 1)) 0))
(assert (<= (+ (- 8) (* x1 1)) 0))
(assert (<= (+ 0 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 10) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (<= (+ (- 7) (* x1 1)) 0))
(assert (<= (+ 1 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 9) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (<= (+ 2 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 8) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))
(assert (<= (+ 3 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 7) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (<= (+ (- 4) (* x1 1)) 0))
(assert (> (+ 4 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 5 (* x0 1)) 0))
(assert (<= (+ (- 3) (* x1 1)) 0))
(assert (> (+ 5 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 6 (* x0 1)) 0))
(assert (<= (+ (- 2) (* x1 1)) 0))
(assert (> (+ 6 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 7 (* x0 1)) 0))
(assert (<= (+ (- 1) (* x1 1)) 0))
(assert (> (+ 7 (* x0 3) (* x1 1)) 0))
(assert (< (+ 8 (* x0 1)) 0))

==============
Solving Branch is 27!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (>= (+ 0 (* x0 1)) 0))
(assert (<= (+ (- 8) (* x1 1)) 0))
(assert (<= (+ 0 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 10) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (<= (+ (- 7) (* x1 1)) 0))
(assert (<= (+ 1 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 9) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (<= (+ 2 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 8) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))
(assert (<= (+ 3 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 7) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (<= (+ (- 4) (* x1 1)) 0))
(assert (> (+ 4 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 5 (* x0 1)) 0))
(assert (<= (+ (- 3) (* x1 1)) 0))
(assert (> (+ 5 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 6 (* x0 1)) 0))
(assert (<= (+ (- 2) (* x1 1)) 0))
(assert (> (+ 6 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 7 (* x0 1)) 0))
(assert (<= (+ (- 1) (* x1 1)) 0))
(assert (<= (+ 7 (* x0 3) (* x1 1)) 0))

==============
Solving Branch is 26!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (>= (+ 0 (* x0 1)) 0))
(assert (<= (+ (- 8) (* x1 1)) 0))
(assert (<= (+ 0 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 10) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (<= (+ (- 7) (* x1 1)) 0))
(assert (<= (+ 1 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 9) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (<= (+ 2 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 8) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))
(assert (<= (+ 3 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 7) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (<= (+ (- 4) (* x1 1)) 0))
(assert (> (+ 4 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 5 (* x0 1)) 0))
(assert (<= (+ (- 3) (* x1 1)) 0))
(assert (> (+ 5 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 6 (* x0 1)) 0))
(assert (<= (+ (- 2) (* x1 1)) 0))
(assert (> (+ 6 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 7 (* x0 1)) 0))
(assert (> (+ (- 1) (* x1 1)) 0))

==============
Solving Branch is 25!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (>= (+ 0 (* x0 1)) 0))
(assert (<= (+ (- 8) (* x1 1)) 0))
(assert (<= (+ 0 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 10) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (<= (+ (- 7) (* x1 1)) 0))
(assert (<= (+ 1 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 9) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (<= (+ 2 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 8) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))
(assert (<= (+ 3 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 7) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (<= (+ (- 4) (* x1 1)) 0))
(assert (> (+ 4 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 5 (* x0 1)) 0))
(assert (<= (+ (- 3) (* x1 1)) 0))
(assert (> (+ 5 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 6 (* x0 1)) 0))
(assert (<= (+ (- 2) (* x1 1)) 0))
(assert (> (+ 6 (* x0 3) (* x1 1)) 0))
(assert (< (+ 7 (* x0 1)) 0))

==============
Solving Branch is 24!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (>= (+ 0 (* x0 1)) 0))
(assert (<= (+ (- 8) (* x1 1)) 0))
(assert (<= (+ 0 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 10) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (<= (+ (- 7) (* x1 1)) 0))
(assert (<= (+ 1 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 9) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (<= (+ 2 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 8) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))
(assert (<= (+ 3 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 7) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (<= (+ (- 4) (* x1 1)) 0))
(assert (> (+ 4 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 5 (* x0 1)) 0))
(assert (<= (+ (- 3) (* x1 1)) 0))
(assert (> (+ 5 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 6 (* x0 1)) 0))
(assert (<= (+ (- 2) (* x1 1)) 0))
(assert (<= (+ 6 (* x0 3) (* x1 1)) 0))

==============
Solving Branch is 23!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (>= (+ 0 (* x0 1)) 0))
(assert (<= (+ (- 8) (* x1 1)) 0))
(assert (<= (+ 0 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 10) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (<= (+ (- 7) (* x1 1)) 0))
(assert (<= (+ 1 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 9) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (<= (+ 2 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 8) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))
(assert (<= (+ 3 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 7) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (<= (+ (- 4) (* x1 1)) 0))
(assert (> (+ 4 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 5 (* x0 1)) 0))
(assert (<= (+ (- 3) (* x1 1)) 0))
(assert (> (+ 5 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 6 (* x0 1)) 0))
(assert (> (+ (- 2) (* x1 1)) 0))

==============
Solving Branch is 22!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (>= (+ 0 (* x0 1)) 0))
(assert (<= (+ (- 8) (* x1 1)) 0))
(assert (<= (+ 0 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 10) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (<= (+ (- 7) (* x1 1)) 0))
(assert (<= (+ 1 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 9) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (<= (+ 2 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 8) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))
(assert (<= (+ 3 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 7) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (<= (+ (- 4) (* x1 1)) 0))
(assert (> (+ 4 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 5 (* x0 1)) 0))
(assert (<= (+ (- 3) (* x1 1)) 0))
(assert (> (+ 5 (* x0 3) (* x1 1)) 0))
(assert (< (+ 6 (* x0 1)) 0))

==============
Solving Branch is 21!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (>= (+ 0 (* x0 1)) 0))
(assert (<= (+ (- 8) (* x1 1)) 0))
(assert (<= (+ 0 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 10) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (<= (+ (- 7) (* x1 1)) 0))
(assert (<= (+ 1 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 9) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (<= (+ 2 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 8) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))
(assert (<= (+ 3 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 7) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (<= (+ (- 4) (* x1 1)) 0))
(assert (> (+ 4 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 5 (* x0 1)) 0))
(assert (<= (+ (- 3) (* x1 1)) 0))
(assert (<= (+ 5 (* x0 3) (* x1 1)) 0))

==============
Solving Branch is 20!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (>= (+ 0 (* x0 1)) 0))
(assert (<= (+ (- 8) (* x1 1)) 0))
(assert (<= (+ 0 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 10) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (<= (+ (- 7) (* x1 1)) 0))
(assert (<= (+ 1 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 9) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (<= (+ 2 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 8) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))
(assert (<= (+ 3 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 7) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (<= (+ (- 4) (* x1 1)) 0))
(assert (> (+ 4 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 5 (* x0 1)) 0))
(assert (> (+ (- 3) (* x1 1)) 0))

==============
Solving Branch is 19!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (>= (+ 0 (* x0 1)) 0))
(assert (<= (+ (- 8) (* x1 1)) 0))
(assert (<= (+ 0 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 10) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (<= (+ (- 7) (* x1 1)) 0))
(assert (<= (+ 1 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 9) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (<= (+ 2 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 8) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))
(assert (<= (+ 3 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 7) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (<= (+ (- 4) (* x1 1)) 0))
(assert (> (+ 4 (* x0 3) (* x1 1)) 0))
(assert (< (+ 5 (* x0 1)) 0))

==============
Solving Branch is 18!!!!
before solve at
sat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (>= (+ 0 (* x0 1)) 0))
(assert (<= (+ (- 8) (* x1 1)) 0))
(assert (<= (+ 0 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 10) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (<= (+ (- 7) (* x1 1)) 0))
(assert (<= (+ 1 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 9) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (<= (+ 2 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 8) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))
(assert (<= (+ 3 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 7) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (<= (+ (- 4) (* x1 1)) 0))
(assert (<= (+ 4 (* x0 3) (* x1 1)) 0))
(rmodel->model-converter-wrapper
x1 -> (- 4)
x0 -> 0
)

==============
after solve
Total Elapsed Time: 1.37094
  Search Time: 1.02429
  Solving Time: 0.245171
  Program Time: 0.101485
remote run 0
input string 0
-4

parsin not complete!
branch size: 48
costraint size: 35
costraint size1: 35
costraint siz2e: 35
constraints_idx[0]:2constraints_idx[1]:3constraints_idx[2]:4constraints_idx[3]:5constraints_idx[4]:7constraints_idx[5]:8constraints_idx[6]:9constraints_idx[7]:10constraints_idx[8]:12constraints_idx[9]:13constraints_idx[10]:14constraints_idx[11]:15constraints_idx[12]:17constraints_idx[13]:18constraints_idx[14]:19constraints_idx[15]:20constraints_idx[16]:22constraints_idx[17]:23constraints_idx[18]:24constraints_idx[19]:25constraints_idx[20]:27constraints_idx[21]:28constraints_idx[22]:29constraints_idx[23]:31constraints_idx[24]:32constraints_idx[25]:33constraints_idx[26]:35constraints_idx[27]:36constraints_idx[28]:37constraints_idx[29]:39constraints_idx[30]:40constraints_idx[31]:41constraints_idx[32]:43constraints_idx[33]:44constraints_idx[34]:45costraint idx front: 2
parsing complete!
Iteration 6 (1s): covered 8 branches [1 reach funs, 10 reach branches].
path.constraints_idx[18]=24
-1 6 10 12 14 15 6 10 12 14 15 6 10 12 14 15 6 10 12 14 15 6 10 12 13 6 10 12 13 6 10 12 13 6 10 12 13 6 10 12 13 6 10 12 13 7 -2 
-1 6 10 12 14 15 6 10 12 14 15 6 10 12 14 15 6 10 12 14 15 6 10 12 14 15 6 10 12 13 6 10 12 13 6 10 12 13 6 10 12 13 6 10 12 13 7 -2 
Constraint Size : 35
files.byte = 1464
no hi..
nRcv : 1024
no break..
file_info.st_size : 1024
files.byte 1464
no hi..
nRcv : 440
no break..
file_info.st_size : 1464
files.byte 1464
send done...
after run
after updatecover
after branch_idx
prev_ex 
cur_ex 
third branch_idx = 24
after checkprediction
after SymbolicPath
Solving Branch is 34!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (>= (+ 0 (* x0 1)) 0))
(assert (<= (+ (- 8) (* x1 1)) 0))
(assert (<= (+ 0 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 10) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (<= (+ (- 7) (* x1 1)) 0))
(assert (<= (+ 1 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 9) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (<= (+ 2 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 8) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))
(assert (<= (+ 3 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 7) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (<= (+ (- 4) (* x1 1)) 0))
(assert (<= (+ 4 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 6) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 5 (* x0 1)) 0))
(assert (<= (+ (- 3) (* x1 1)) 0))
(assert (> (+ 5 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 6 (* x0 1)) 0))
(assert (<= (+ (- 2) (* x1 1)) 0))
(assert (> (+ 6 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 7 (* x0 1)) 0))
(assert (<= (+ (- 1) (* x1 1)) 0))
(assert (> (+ 7 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 8 (* x0 1)) 0))
(assert (<= (+ 0 (* x1 1)) 0))
(assert (> (+ 8 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 9 (* x0 1)) 0))
(assert (<= (+ 1 (* x1 1)) 0))
(assert (<= (+ 9 (* x0 3) (* x1 1)) 0))

==============
Solving Branch is 33!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (>= (+ 0 (* x0 1)) 0))
(assert (<= (+ (- 8) (* x1 1)) 0))
(assert (<= (+ 0 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 10) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (<= (+ (- 7) (* x1 1)) 0))
(assert (<= (+ 1 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 9) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (<= (+ 2 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 8) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))
(assert (<= (+ 3 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 7) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (<= (+ (- 4) (* x1 1)) 0))
(assert (<= (+ 4 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 6) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 5 (* x0 1)) 0))
(assert (<= (+ (- 3) (* x1 1)) 0))
(assert (> (+ 5 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 6 (* x0 1)) 0))
(assert (<= (+ (- 2) (* x1 1)) 0))
(assert (> (+ 6 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 7 (* x0 1)) 0))
(assert (<= (+ (- 1) (* x1 1)) 0))
(assert (> (+ 7 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 8 (* x0 1)) 0))
(assert (<= (+ 0 (* x1 1)) 0))
(assert (> (+ 8 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 9 (* x0 1)) 0))
(assert (> (+ 1 (* x1 1)) 0))

==============
Solving Branch is 32!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (>= (+ 0 (* x0 1)) 0))
(assert (<= (+ (- 8) (* x1 1)) 0))
(assert (<= (+ 0 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 10) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (<= (+ (- 7) (* x1 1)) 0))
(assert (<= (+ 1 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 9) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (<= (+ 2 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 8) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))
(assert (<= (+ 3 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 7) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (<= (+ (- 4) (* x1 1)) 0))
(assert (<= (+ 4 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 6) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 5 (* x0 1)) 0))
(assert (<= (+ (- 3) (* x1 1)) 0))
(assert (> (+ 5 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 6 (* x0 1)) 0))
(assert (<= (+ (- 2) (* x1 1)) 0))
(assert (> (+ 6 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 7 (* x0 1)) 0))
(assert (<= (+ (- 1) (* x1 1)) 0))
(assert (> (+ 7 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 8 (* x0 1)) 0))
(assert (<= (+ 0 (* x1 1)) 0))
(assert (> (+ 8 (* x0 3) (* x1 1)) 0))
(assert (< (+ 9 (* x0 1)) 0))

==============
Solving Branch is 31!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (>= (+ 0 (* x0 1)) 0))
(assert (<= (+ (- 8) (* x1 1)) 0))
(assert (<= (+ 0 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 10) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (<= (+ (- 7) (* x1 1)) 0))
(assert (<= (+ 1 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 9) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (<= (+ 2 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 8) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))
(assert (<= (+ 3 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 7) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (<= (+ (- 4) (* x1 1)) 0))
(assert (<= (+ 4 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 6) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 5 (* x0 1)) 0))
(assert (<= (+ (- 3) (* x1 1)) 0))
(assert (> (+ 5 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 6 (* x0 1)) 0))
(assert (<= (+ (- 2) (* x1 1)) 0))
(assert (> (+ 6 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 7 (* x0 1)) 0))
(assert (<= (+ (- 1) (* x1 1)) 0))
(assert (> (+ 7 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 8 (* x0 1)) 0))
(assert (<= (+ 0 (* x1 1)) 0))
(assert (<= (+ 8 (* x0 3) (* x1 1)) 0))

==============
Solving Branch is 30!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (>= (+ 0 (* x0 1)) 0))
(assert (<= (+ (- 8) (* x1 1)) 0))
(assert (<= (+ 0 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 10) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (<= (+ (- 7) (* x1 1)) 0))
(assert (<= (+ 1 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 9) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (<= (+ 2 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 8) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))
(assert (<= (+ 3 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 7) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (<= (+ (- 4) (* x1 1)) 0))
(assert (<= (+ 4 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 6) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 5 (* x0 1)) 0))
(assert (<= (+ (- 3) (* x1 1)) 0))
(assert (> (+ 5 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 6 (* x0 1)) 0))
(assert (<= (+ (- 2) (* x1 1)) 0))
(assert (> (+ 6 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 7 (* x0 1)) 0))
(assert (<= (+ (- 1) (* x1 1)) 0))
(assert (> (+ 7 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 8 (* x0 1)) 0))
(assert (> (+ 0 (* x1 1)) 0))

==============
Solving Branch is 29!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (>= (+ 0 (* x0 1)) 0))
(assert (<= (+ (- 8) (* x1 1)) 0))
(assert (<= (+ 0 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 10) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (<= (+ (- 7) (* x1 1)) 0))
(assert (<= (+ 1 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 9) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (<= (+ 2 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 8) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))
(assert (<= (+ 3 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 7) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (<= (+ (- 4) (* x1 1)) 0))
(assert (<= (+ 4 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 6) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 5 (* x0 1)) 0))
(assert (<= (+ (- 3) (* x1 1)) 0))
(assert (> (+ 5 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 6 (* x0 1)) 0))
(assert (<= (+ (- 2) (* x1 1)) 0))
(assert (> (+ 6 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 7 (* x0 1)) 0))
(assert (<= (+ (- 1) (* x1 1)) 0))
(assert (> (+ 7 (* x0 3) (* x1 1)) 0))
(assert (< (+ 8 (* x0 1)) 0))

==============
Solving Branch is 28!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (>= (+ 0 (* x0 1)) 0))
(assert (<= (+ (- 8) (* x1 1)) 0))
(assert (<= (+ 0 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 10) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (<= (+ (- 7) (* x1 1)) 0))
(assert (<= (+ 1 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 9) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (<= (+ 2 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 8) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))
(assert (<= (+ 3 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 7) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (<= (+ (- 4) (* x1 1)) 0))
(assert (<= (+ 4 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 6) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 5 (* x0 1)) 0))
(assert (<= (+ (- 3) (* x1 1)) 0))
(assert (> (+ 5 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 6 (* x0 1)) 0))
(assert (<= (+ (- 2) (* x1 1)) 0))
(assert (> (+ 6 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 7 (* x0 1)) 0))
(assert (<= (+ (- 1) (* x1 1)) 0))
(assert (<= (+ 7 (* x0 3) (* x1 1)) 0))

==============
Solving Branch is 27!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (>= (+ 0 (* x0 1)) 0))
(assert (<= (+ (- 8) (* x1 1)) 0))
(assert (<= (+ 0 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 10) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (<= (+ (- 7) (* x1 1)) 0))
(assert (<= (+ 1 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 9) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (<= (+ 2 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 8) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))
(assert (<= (+ 3 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 7) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (<= (+ (- 4) (* x1 1)) 0))
(assert (<= (+ 4 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 6) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 5 (* x0 1)) 0))
(assert (<= (+ (- 3) (* x1 1)) 0))
(assert (> (+ 5 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 6 (* x0 1)) 0))
(assert (<= (+ (- 2) (* x1 1)) 0))
(assert (> (+ 6 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 7 (* x0 1)) 0))
(assert (> (+ (- 1) (* x1 1)) 0))

==============
Solving Branch is 26!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (>= (+ 0 (* x0 1)) 0))
(assert (<= (+ (- 8) (* x1 1)) 0))
(assert (<= (+ 0 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 10) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (<= (+ (- 7) (* x1 1)) 0))
(assert (<= (+ 1 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 9) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (<= (+ 2 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 8) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))
(assert (<= (+ 3 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 7) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (<= (+ (- 4) (* x1 1)) 0))
(assert (<= (+ 4 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 6) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 5 (* x0 1)) 0))
(assert (<= (+ (- 3) (* x1 1)) 0))
(assert (> (+ 5 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 6 (* x0 1)) 0))
(assert (<= (+ (- 2) (* x1 1)) 0))
(assert (> (+ 6 (* x0 3) (* x1 1)) 0))
(assert (< (+ 7 (* x0 1)) 0))

==============
Solving Branch is 25!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (>= (+ 0 (* x0 1)) 0))
(assert (<= (+ (- 8) (* x1 1)) 0))
(assert (<= (+ 0 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 10) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (<= (+ (- 7) (* x1 1)) 0))
(assert (<= (+ 1 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 9) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (<= (+ 2 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 8) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))
(assert (<= (+ 3 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 7) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (<= (+ (- 4) (* x1 1)) 0))
(assert (<= (+ 4 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 6) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 5 (* x0 1)) 0))
(assert (<= (+ (- 3) (* x1 1)) 0))
(assert (> (+ 5 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 6 (* x0 1)) 0))
(assert (<= (+ (- 2) (* x1 1)) 0))
(assert (<= (+ 6 (* x0 3) (* x1 1)) 0))

==============
Solving Branch is 24!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (>= (+ 0 (* x0 1)) 0))
(assert (<= (+ (- 8) (* x1 1)) 0))
(assert (<= (+ 0 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 10) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (<= (+ (- 7) (* x1 1)) 0))
(assert (<= (+ 1 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 9) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (<= (+ 2 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 8) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))
(assert (<= (+ 3 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 7) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (<= (+ (- 4) (* x1 1)) 0))
(assert (<= (+ 4 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 6) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 5 (* x0 1)) 0))
(assert (<= (+ (- 3) (* x1 1)) 0))
(assert (> (+ 5 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 6 (* x0 1)) 0))
(assert (> (+ (- 2) (* x1 1)) 0))

==============
Solving Branch is 23!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (>= (+ 0 (* x0 1)) 0))
(assert (<= (+ (- 8) (* x1 1)) 0))
(assert (<= (+ 0 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 10) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (<= (+ (- 7) (* x1 1)) 0))
(assert (<= (+ 1 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 9) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (<= (+ 2 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 8) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))
(assert (<= (+ 3 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 7) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (<= (+ (- 4) (* x1 1)) 0))
(assert (<= (+ 4 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 6) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 5 (* x0 1)) 0))
(assert (<= (+ (- 3) (* x1 1)) 0))
(assert (> (+ 5 (* x0 3) (* x1 1)) 0))
(assert (< (+ 6 (* x0 1)) 0))

==============
Solving Branch is 22!!!!
before solve at
sat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (>= (+ 0 (* x0 1)) 0))
(assert (<= (+ (- 8) (* x1 1)) 0))
(assert (<= (+ 0 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 10) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (<= (+ (- 7) (* x1 1)) 0))
(assert (<= (+ 1 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 9) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (<= (+ 2 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 8) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))
(assert (<= (+ 3 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 7) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (<= (+ (- 4) (* x1 1)) 0))
(assert (<= (+ 4 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 6) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 5 (* x0 1)) 0))
(assert (<= (+ (- 3) (* x1 1)) 0))
(assert (<= (+ 5 (* x0 3) (* x1 1)) 0))
(rmodel->model-converter-wrapper
x1 -> (- 5)
x0 -> 0
)

==============
after solve
Total Elapsed Time: 1.43478
  Search Time: 1.02617
  Solving Time: 0.281089
  Program Time: 0.12752
remote run 0
input string 0
-5

parsin not complete!
branch size: 49
costraint size: 36
costraint size1: 36
costraint siz2e: 36
constraints_idx[0]:2constraints_idx[1]:3constraints_idx[2]:4constraints_idx[3]:5constraints_idx[4]:7constraints_idx[5]:8constraints_idx[6]:9constraints_idx[7]:10constraints_idx[8]:12constraints_idx[9]:13constraints_idx[10]:14constraints_idx[11]:15constraints_idx[12]:17constraints_idx[13]:18constraints_idx[14]:19constraints_idx[15]:20constraints_idx[16]:22constraints_idx[17]:23constraints_idx[18]:24constraints_idx[19]:25constraints_idx[20]:27constraints_idx[21]:28constraints_idx[22]:29constraints_idx[23]:30constraints_idx[24]:32constraints_idx[25]:33constraints_idx[26]:34constraints_idx[27]:36constraints_idx[28]:37constraints_idx[29]:38constraints_idx[30]:40constraints_idx[31]:41constraints_idx[32]:42constraints_idx[33]:44constraints_idx[34]:45constraints_idx[35]:46costraint idx front: 2
parsing complete!
Iteration 7 (1s): covered 8 branches [1 reach funs, 10 reach branches].
path.constraints_idx[22]=29
-1 6 10 12 14 15 6 10 12 14 15 6 10 12 14 15 6 10 12 14 15 6 10 12 14 15 6 10 12 13 6 10 12 13 6 10 12 13 6 10 12 13 6 10 12 13 7 -2 
-1 6 10 12 14 15 6 10 12 14 15 6 10 12 14 15 6 10 12 14 15 6 10 12 14 15 6 10 12 14 15 6 10 12 13 6 10 12 13 6 10 12 13 6 10 12 13 7 -2 
Constraint Size : 36
files.byte = 1510
no hi..
nRcv : 1024
no break..
file_info.st_size : 1024
files.byte 1510
no hi..
nRcv : 486
no break..
file_info.st_size : 1510
files.byte 1510
send done...
after run
after updatecover
after branch_idx
prev_ex 
cur_ex 
third branch_idx = 29
after checkprediction
after SymbolicPath
Solving Branch is 35!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (>= (+ 0 (* x0 1)) 0))
(assert (<= (+ (- 8) (* x1 1)) 0))
(assert (<= (+ 0 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 10) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (<= (+ (- 7) (* x1 1)) 0))
(assert (<= (+ 1 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 9) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (<= (+ 2 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 8) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))
(assert (<= (+ 3 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 7) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (<= (+ (- 4) (* x1 1)) 0))
(assert (<= (+ 4 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 6) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 5 (* x0 1)) 0))
(assert (<= (+ (- 3) (* x1 1)) 0))
(assert (<= (+ 5 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 5) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 6 (* x0 1)) 0))
(assert (<= (+ (- 2) (* x1 1)) 0))
(assert (> (+ 6 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 7 (* x0 1)) 0))
(assert (<= (+ (- 1) (* x1 1)) 0))
(assert (> (+ 7 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 8 (* x0 1)) 0))
(assert (<= (+ 0 (* x1 1)) 0))
(assert (> (+ 8 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 9 (* x0 1)) 0))
(assert (<= (+ 1 (* x1 1)) 0))
(assert (<= (+ 9 (* x0 3) (* x1 1)) 0))

==============
Solving Branch is 34!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (>= (+ 0 (* x0 1)) 0))
(assert (<= (+ (- 8) (* x1 1)) 0))
(assert (<= (+ 0 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 10) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (<= (+ (- 7) (* x1 1)) 0))
(assert (<= (+ 1 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 9) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (<= (+ 2 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 8) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))
(assert (<= (+ 3 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 7) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (<= (+ (- 4) (* x1 1)) 0))
(assert (<= (+ 4 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 6) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 5 (* x0 1)) 0))
(assert (<= (+ (- 3) (* x1 1)) 0))
(assert (<= (+ 5 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 5) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 6 (* x0 1)) 0))
(assert (<= (+ (- 2) (* x1 1)) 0))
(assert (> (+ 6 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 7 (* x0 1)) 0))
(assert (<= (+ (- 1) (* x1 1)) 0))
(assert (> (+ 7 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 8 (* x0 1)) 0))
(assert (<= (+ 0 (* x1 1)) 0))
(assert (> (+ 8 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 9 (* x0 1)) 0))
(assert (> (+ 1 (* x1 1)) 0))

==============
Solving Branch is 33!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (>= (+ 0 (* x0 1)) 0))
(assert (<= (+ (- 8) (* x1 1)) 0))
(assert (<= (+ 0 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 10) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (<= (+ (- 7) (* x1 1)) 0))
(assert (<= (+ 1 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 9) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (<= (+ 2 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 8) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))
(assert (<= (+ 3 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 7) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (<= (+ (- 4) (* x1 1)) 0))
(assert (<= (+ 4 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 6) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 5 (* x0 1)) 0))
(assert (<= (+ (- 3) (* x1 1)) 0))
(assert (<= (+ 5 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 5) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 6 (* x0 1)) 0))
(assert (<= (+ (- 2) (* x1 1)) 0))
(assert (> (+ 6 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 7 (* x0 1)) 0))
(assert (<= (+ (- 1) (* x1 1)) 0))
(assert (> (+ 7 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 8 (* x0 1)) 0))
(assert (<= (+ 0 (* x1 1)) 0))
(assert (> (+ 8 (* x0 3) (* x1 1)) 0))
(assert (< (+ 9 (* x0 1)) 0))

==============
Solving Branch is 32!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (>= (+ 0 (* x0 1)) 0))
(assert (<= (+ (- 8) (* x1 1)) 0))
(assert (<= (+ 0 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 10) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (<= (+ (- 7) (* x1 1)) 0))
(assert (<= (+ 1 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 9) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (<= (+ 2 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 8) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))
(assert (<= (+ 3 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 7) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (<= (+ (- 4) (* x1 1)) 0))
(assert (<= (+ 4 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 6) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 5 (* x0 1)) 0))
(assert (<= (+ (- 3) (* x1 1)) 0))
(assert (<= (+ 5 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 5) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 6 (* x0 1)) 0))
(assert (<= (+ (- 2) (* x1 1)) 0))
(assert (> (+ 6 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 7 (* x0 1)) 0))
(assert (<= (+ (- 1) (* x1 1)) 0))
(assert (> (+ 7 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 8 (* x0 1)) 0))
(assert (<= (+ 0 (* x1 1)) 0))
(assert (<= (+ 8 (* x0 3) (* x1 1)) 0))

==============
Solving Branch is 31!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (>= (+ 0 (* x0 1)) 0))
(assert (<= (+ (- 8) (* x1 1)) 0))
(assert (<= (+ 0 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 10) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (<= (+ (- 7) (* x1 1)) 0))
(assert (<= (+ 1 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 9) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (<= (+ 2 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 8) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))
(assert (<= (+ 3 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 7) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (<= (+ (- 4) (* x1 1)) 0))
(assert (<= (+ 4 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 6) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 5 (* x0 1)) 0))
(assert (<= (+ (- 3) (* x1 1)) 0))
(assert (<= (+ 5 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 5) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 6 (* x0 1)) 0))
(assert (<= (+ (- 2) (* x1 1)) 0))
(assert (> (+ 6 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 7 (* x0 1)) 0))
(assert (<= (+ (- 1) (* x1 1)) 0))
(assert (> (+ 7 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 8 (* x0 1)) 0))
(assert (> (+ 0 (* x1 1)) 0))

==============
Solving Branch is 30!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (>= (+ 0 (* x0 1)) 0))
(assert (<= (+ (- 8) (* x1 1)) 0))
(assert (<= (+ 0 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 10) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (<= (+ (- 7) (* x1 1)) 0))
(assert (<= (+ 1 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 9) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (<= (+ 2 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 8) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))
(assert (<= (+ 3 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 7) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (<= (+ (- 4) (* x1 1)) 0))
(assert (<= (+ 4 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 6) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 5 (* x0 1)) 0))
(assert (<= (+ (- 3) (* x1 1)) 0))
(assert (<= (+ 5 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 5) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 6 (* x0 1)) 0))
(assert (<= (+ (- 2) (* x1 1)) 0))
(assert (> (+ 6 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 7 (* x0 1)) 0))
(assert (<= (+ (- 1) (* x1 1)) 0))
(assert (> (+ 7 (* x0 3) (* x1 1)) 0))
(assert (< (+ 8 (* x0 1)) 0))

==============
Solving Branch is 29!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (>= (+ 0 (* x0 1)) 0))
(assert (<= (+ (- 8) (* x1 1)) 0))
(assert (<= (+ 0 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 10) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (<= (+ (- 7) (* x1 1)) 0))
(assert (<= (+ 1 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 9) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (<= (+ 2 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 8) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))
(assert (<= (+ 3 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 7) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (<= (+ (- 4) (* x1 1)) 0))
(assert (<= (+ 4 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 6) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 5 (* x0 1)) 0))
(assert (<= (+ (- 3) (* x1 1)) 0))
(assert (<= (+ 5 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 5) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 6 (* x0 1)) 0))
(assert (<= (+ (- 2) (* x1 1)) 0))
(assert (> (+ 6 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 7 (* x0 1)) 0))
(assert (<= (+ (- 1) (* x1 1)) 0))
(assert (<= (+ 7 (* x0 3) (* x1 1)) 0))

==============
Solving Branch is 28!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (>= (+ 0 (* x0 1)) 0))
(assert (<= (+ (- 8) (* x1 1)) 0))
(assert (<= (+ 0 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 10) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (<= (+ (- 7) (* x1 1)) 0))
(assert (<= (+ 1 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 9) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (<= (+ 2 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 8) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))
(assert (<= (+ 3 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 7) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (<= (+ (- 4) (* x1 1)) 0))
(assert (<= (+ 4 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 6) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 5 (* x0 1)) 0))
(assert (<= (+ (- 3) (* x1 1)) 0))
(assert (<= (+ 5 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 5) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 6 (* x0 1)) 0))
(assert (<= (+ (- 2) (* x1 1)) 0))
(assert (> (+ 6 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 7 (* x0 1)) 0))
(assert (> (+ (- 1) (* x1 1)) 0))

==============
Solving Branch is 27!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (>= (+ 0 (* x0 1)) 0))
(assert (<= (+ (- 8) (* x1 1)) 0))
(assert (<= (+ 0 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 10) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (<= (+ (- 7) (* x1 1)) 0))
(assert (<= (+ 1 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 9) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (<= (+ 2 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 8) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))
(assert (<= (+ 3 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 7) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (<= (+ (- 4) (* x1 1)) 0))
(assert (<= (+ 4 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 6) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 5 (* x0 1)) 0))
(assert (<= (+ (- 3) (* x1 1)) 0))
(assert (<= (+ 5 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 5) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 6 (* x0 1)) 0))
(assert (<= (+ (- 2) (* x1 1)) 0))
(assert (> (+ 6 (* x0 3) (* x1 1)) 0))
(assert (< (+ 7 (* x0 1)) 0))

==============
Solving Branch is 26!!!!
before solve at
sat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (>= (+ 0 (* x0 1)) 0))
(assert (<= (+ (- 8) (* x1 1)) 0))
(assert (<= (+ 0 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 10) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (<= (+ (- 7) (* x1 1)) 0))
(assert (<= (+ 1 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 9) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (<= (+ 2 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 8) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))
(assert (<= (+ 3 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 7) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (<= (+ (- 4) (* x1 1)) 0))
(assert (<= (+ 4 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 6) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 5 (* x0 1)) 0))
(assert (<= (+ (- 3) (* x1 1)) 0))
(assert (<= (+ 5 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 5) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 6 (* x0 1)) 0))
(assert (<= (+ (- 2) (* x1 1)) 0))
(assert (<= (+ 6 (* x0 3) (* x1 1)) 0))
(rmodel->model-converter-wrapper
x1 -> (- 6)
x0 -> 0
)

==============
after solve
Total Elapsed Time: 1.48437
  Search Time: 1.02802
  Solving Time: 0.308523
  Program Time: 0.147825
remote run 0
input string 0
-6

parsin not complete!
branch size: 50
costraint size: 37
costraint size1: 37
costraint siz2e: 37
constraints_idx[0]:2constraints_idx[1]:3constraints_idx[2]:4constraints_idx[3]:5constraints_idx[4]:7constraints_idx[5]:8constraints_idx[6]:9constraints_idx[7]:10constraints_idx[8]:12constraints_idx[9]:13constraints_idx[10]:14constraints_idx[11]:15constraints_idx[12]:17constraints_idx[13]:18constraints_idx[14]:19constraints_idx[15]:20constraints_idx[16]:22constraints_idx[17]:23constraints_idx[18]:24constraints_idx[19]:25constraints_idx[20]:27constraints_idx[21]:28constraints_idx[22]:29constraints_idx[23]:30constraints_idx[24]:32constraints_idx[25]:33constraints_idx[26]:34constraints_idx[27]:35constraints_idx[28]:37constraints_idx[29]:38constraints_idx[30]:39constraints_idx[31]:41constraints_idx[32]:42constraints_idx[33]:43constraints_idx[34]:45constraints_idx[35]:46constraints_idx[36]:47costraint idx front: 2
parsing complete!
Iteration 8 (1s): covered 8 branches [1 reach funs, 10 reach branches].
path.constraints_idx[26]=34
-1 6 10 12 14 15 6 10 12 14 15 6 10 12 14 15 6 10 12 14 15 6 10 12 14 15 6 10 12 14 15 6 10 12 13 6 10 12 13 6 10 12 13 6 10 12 13 7 -2 
-1 6 10 12 14 15 6 10 12 14 15 6 10 12 14 15 6 10 12 14 15 6 10 12 14 15 6 10 12 14 15 6 10 12 14 15 6 10 12 13 6 10 12 13 6 10 12 13 7 -2 
Constraint Size : 37
files.byte = 1556
no hi..
nRcv : 1024
no break..
file_info.st_size : 1024
files.byte 1556
no hi..
nRcv : 532
no break..
file_info.st_size : 1556
files.byte 1556
send done...
after run
after updatecover
after branch_idx
prev_ex 
cur_ex 
third branch_idx = 34
after checkprediction
after SymbolicPath
Solving Branch is 36!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (>= (+ 0 (* x0 1)) 0))
(assert (<= (+ (- 8) (* x1 1)) 0))
(assert (<= (+ 0 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 10) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (<= (+ (- 7) (* x1 1)) 0))
(assert (<= (+ 1 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 9) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (<= (+ 2 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 8) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))
(assert (<= (+ 3 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 7) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (<= (+ (- 4) (* x1 1)) 0))
(assert (<= (+ 4 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 6) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 5 (* x0 1)) 0))
(assert (<= (+ (- 3) (* x1 1)) 0))
(assert (<= (+ 5 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 5) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 6 (* x0 1)) 0))
(assert (<= (+ (- 2) (* x1 1)) 0))
(assert (<= (+ 6 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 4) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 7 (* x0 1)) 0))
(assert (<= (+ (- 1) (* x1 1)) 0))
(assert (> (+ 7 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 8 (* x0 1)) 0))
(assert (<= (+ 0 (* x1 1)) 0))
(assert (> (+ 8 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 9 (* x0 1)) 0))
(assert (<= (+ 1 (* x1 1)) 0))
(assert (<= (+ 9 (* x0 3) (* x1 1)) 0))

==============
Solving Branch is 35!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (>= (+ 0 (* x0 1)) 0))
(assert (<= (+ (- 8) (* x1 1)) 0))
(assert (<= (+ 0 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 10) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (<= (+ (- 7) (* x1 1)) 0))
(assert (<= (+ 1 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 9) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (<= (+ 2 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 8) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))
(assert (<= (+ 3 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 7) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (<= (+ (- 4) (* x1 1)) 0))
(assert (<= (+ 4 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 6) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 5 (* x0 1)) 0))
(assert (<= (+ (- 3) (* x1 1)) 0))
(assert (<= (+ 5 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 5) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 6 (* x0 1)) 0))
(assert (<= (+ (- 2) (* x1 1)) 0))
(assert (<= (+ 6 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 4) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 7 (* x0 1)) 0))
(assert (<= (+ (- 1) (* x1 1)) 0))
(assert (> (+ 7 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 8 (* x0 1)) 0))
(assert (<= (+ 0 (* x1 1)) 0))
(assert (> (+ 8 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 9 (* x0 1)) 0))
(assert (> (+ 1 (* x1 1)) 0))

==============
Solving Branch is 34!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (>= (+ 0 (* x0 1)) 0))
(assert (<= (+ (- 8) (* x1 1)) 0))
(assert (<= (+ 0 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 10) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (<= (+ (- 7) (* x1 1)) 0))
(assert (<= (+ 1 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 9) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (<= (+ 2 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 8) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))
(assert (<= (+ 3 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 7) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (<= (+ (- 4) (* x1 1)) 0))
(assert (<= (+ 4 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 6) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 5 (* x0 1)) 0))
(assert (<= (+ (- 3) (* x1 1)) 0))
(assert (<= (+ 5 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 5) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 6 (* x0 1)) 0))
(assert (<= (+ (- 2) (* x1 1)) 0))
(assert (<= (+ 6 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 4) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 7 (* x0 1)) 0))
(assert (<= (+ (- 1) (* x1 1)) 0))
(assert (> (+ 7 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 8 (* x0 1)) 0))
(assert (<= (+ 0 (* x1 1)) 0))
(assert (> (+ 8 (* x0 3) (* x1 1)) 0))
(assert (< (+ 9 (* x0 1)) 0))

==============
Solving Branch is 33!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (>= (+ 0 (* x0 1)) 0))
(assert (<= (+ (- 8) (* x1 1)) 0))
(assert (<= (+ 0 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 10) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (<= (+ (- 7) (* x1 1)) 0))
(assert (<= (+ 1 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 9) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (<= (+ 2 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 8) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))
(assert (<= (+ 3 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 7) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (<= (+ (- 4) (* x1 1)) 0))
(assert (<= (+ 4 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 6) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 5 (* x0 1)) 0))
(assert (<= (+ (- 3) (* x1 1)) 0))
(assert (<= (+ 5 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 5) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 6 (* x0 1)) 0))
(assert (<= (+ (- 2) (* x1 1)) 0))
(assert (<= (+ 6 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 4) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 7 (* x0 1)) 0))
(assert (<= (+ (- 1) (* x1 1)) 0))
(assert (> (+ 7 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 8 (* x0 1)) 0))
(assert (<= (+ 0 (* x1 1)) 0))
(assert (<= (+ 8 (* x0 3) (* x1 1)) 0))

==============
Solving Branch is 32!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (>= (+ 0 (* x0 1)) 0))
(assert (<= (+ (- 8) (* x1 1)) 0))
(assert (<= (+ 0 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 10) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (<= (+ (- 7) (* x1 1)) 0))
(assert (<= (+ 1 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 9) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (<= (+ 2 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 8) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))
(assert (<= (+ 3 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 7) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (<= (+ (- 4) (* x1 1)) 0))
(assert (<= (+ 4 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 6) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 5 (* x0 1)) 0))
(assert (<= (+ (- 3) (* x1 1)) 0))
(assert (<= (+ 5 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 5) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 6 (* x0 1)) 0))
(assert (<= (+ (- 2) (* x1 1)) 0))
(assert (<= (+ 6 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 4) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 7 (* x0 1)) 0))
(assert (<= (+ (- 1) (* x1 1)) 0))
(assert (> (+ 7 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 8 (* x0 1)) 0))
(assert (> (+ 0 (* x1 1)) 0))

==============
Solving Branch is 31!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (>= (+ 0 (* x0 1)) 0))
(assert (<= (+ (- 8) (* x1 1)) 0))
(assert (<= (+ 0 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 10) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (<= (+ (- 7) (* x1 1)) 0))
(assert (<= (+ 1 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 9) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (<= (+ 2 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 8) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))
(assert (<= (+ 3 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 7) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (<= (+ (- 4) (* x1 1)) 0))
(assert (<= (+ 4 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 6) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 5 (* x0 1)) 0))
(assert (<= (+ (- 3) (* x1 1)) 0))
(assert (<= (+ 5 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 5) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 6 (* x0 1)) 0))
(assert (<= (+ (- 2) (* x1 1)) 0))
(assert (<= (+ 6 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 4) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 7 (* x0 1)) 0))
(assert (<= (+ (- 1) (* x1 1)) 0))
(assert (> (+ 7 (* x0 3) (* x1 1)) 0))
(assert (< (+ 8 (* x0 1)) 0))

==============
Solving Branch is 30!!!!
before solve at
sat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (>= (+ 0 (* x0 1)) 0))
(assert (<= (+ (- 8) (* x1 1)) 0))
(assert (<= (+ 0 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 10) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (<= (+ (- 7) (* x1 1)) 0))
(assert (<= (+ 1 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 9) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (<= (+ 2 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 8) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))
(assert (<= (+ 3 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 7) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (<= (+ (- 4) (* x1 1)) 0))
(assert (<= (+ 4 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 6) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 5 (* x0 1)) 0))
(assert (<= (+ (- 3) (* x1 1)) 0))
(assert (<= (+ 5 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 5) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 6 (* x0 1)) 0))
(assert (<= (+ (- 2) (* x1 1)) 0))
(assert (<= (+ 6 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 4) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 7 (* x0 1)) 0))
(assert (<= (+ (- 1) (* x1 1)) 0))
(assert (<= (+ 7 (* x0 3) (* x1 1)) 0))
(rmodel->model-converter-wrapper
x1 -> (- 7)
x0 -> 0
)

==============
after solve
Total Elapsed Time: 1.53482
  Search Time: 1.03005
  Solving Time: 0.332395
  Program Time: 0.172371
remote run 0
input string 0
-7

parsin not complete!
branch size: 51
costraint size: 38
costraint size1: 38
costraint siz2e: 38
constraints_idx[0]:2constraints_idx[1]:3constraints_idx[2]:4constraints_idx[3]:5constraints_idx[4]:7constraints_idx[5]:8constraints_idx[6]:9constraints_idx[7]:10constraints_idx[8]:12constraints_idx[9]:13constraints_idx[10]:14constraints_idx[11]:15constraints_idx[12]:17constraints_idx[13]:18constraints_idx[14]:19constraints_idx[15]:20constraints_idx[16]:22constraints_idx[17]:23constraints_idx[18]:24constraints_idx[19]:25constraints_idx[20]:27constraints_idx[21]:28constraints_idx[22]:29constraints_idx[23]:30constraints_idx[24]:32constraints_idx[25]:33constraints_idx[26]:34constraints_idx[27]:35constraints_idx[28]:37constraints_idx[29]:38constraints_idx[30]:39constraints_idx[31]:40constraints_idx[32]:42constraints_idx[33]:43constraints_idx[34]:44constraints_idx[35]:46constraints_idx[36]:47constraints_idx[37]:48costraint idx front: 2
parsing complete!
Iteration 9 (1s): covered 8 branches [1 reach funs, 10 reach branches].
path.constraints_idx[30]=39
-1 6 10 12 14 15 6 10 12 14 15 6 10 12 14 15 6 10 12 14 15 6 10 12 14 15 6 10 12 14 15 6 10 12 14 15 6 10 12 13 6 10 12 13 6 10 12 13 7 -2 
-1 6 10 12 14 15 6 10 12 14 15 6 10 12 14 15 6 10 12 14 15 6 10 12 14 15 6 10 12 14 15 6 10 12 14 15 6 10 12 14 15 6 10 12 13 6 10 12 13 7 -2 
Constraint Size : 38
files.byte = 1602
no hi..
nRcv : 1024
no break..
file_info.st_size : 1024
files.byte 1602
no hi..
nRcv : 578
no break..
file_info.st_size : 1602
files.byte 1602
send done...
after run
after updatecover
after branch_idx
prev_ex 
cur_ex 
third branch_idx = 39
after checkprediction
after SymbolicPath
Solving Branch is 37!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (>= (+ 0 (* x0 1)) 0))
(assert (<= (+ (- 8) (* x1 1)) 0))
(assert (<= (+ 0 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 10) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (<= (+ (- 7) (* x1 1)) 0))
(assert (<= (+ 1 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 9) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (<= (+ 2 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 8) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))
(assert (<= (+ 3 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 7) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (<= (+ (- 4) (* x1 1)) 0))
(assert (<= (+ 4 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 6) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 5 (* x0 1)) 0))
(assert (<= (+ (- 3) (* x1 1)) 0))
(assert (<= (+ 5 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 5) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 6 (* x0 1)) 0))
(assert (<= (+ (- 2) (* x1 1)) 0))
(assert (<= (+ 6 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 4) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 7 (* x0 1)) 0))
(assert (<= (+ (- 1) (* x1 1)) 0))
(assert (<= (+ 7 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 3) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 8 (* x0 1)) 0))
(assert (<= (+ 0 (* x1 1)) 0))
(assert (> (+ 8 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 9 (* x0 1)) 0))
(assert (<= (+ 1 (* x1 1)) 0))
(assert (<= (+ 9 (* x0 3) (* x1 1)) 0))

==============
Solving Branch is 36!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (>= (+ 0 (* x0 1)) 0))
(assert (<= (+ (- 8) (* x1 1)) 0))
(assert (<= (+ 0 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 10) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (<= (+ (- 7) (* x1 1)) 0))
(assert (<= (+ 1 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 9) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (<= (+ 2 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 8) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))
(assert (<= (+ 3 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 7) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (<= (+ (- 4) (* x1 1)) 0))
(assert (<= (+ 4 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 6) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 5 (* x0 1)) 0))
(assert (<= (+ (- 3) (* x1 1)) 0))
(assert (<= (+ 5 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 5) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 6 (* x0 1)) 0))
(assert (<= (+ (- 2) (* x1 1)) 0))
(assert (<= (+ 6 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 4) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 7 (* x0 1)) 0))
(assert (<= (+ (- 1) (* x1 1)) 0))
(assert (<= (+ 7 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 3) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 8 (* x0 1)) 0))
(assert (<= (+ 0 (* x1 1)) 0))
(assert (> (+ 8 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 9 (* x0 1)) 0))
(assert (> (+ 1 (* x1 1)) 0))

==============
Solving Branch is 35!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (>= (+ 0 (* x0 1)) 0))
(assert (<= (+ (- 8) (* x1 1)) 0))
(assert (<= (+ 0 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 10) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (<= (+ (- 7) (* x1 1)) 0))
(assert (<= (+ 1 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 9) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (<= (+ 2 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 8) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))
(assert (<= (+ 3 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 7) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (<= (+ (- 4) (* x1 1)) 0))
(assert (<= (+ 4 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 6) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 5 (* x0 1)) 0))
(assert (<= (+ (- 3) (* x1 1)) 0))
(assert (<= (+ 5 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 5) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 6 (* x0 1)) 0))
(assert (<= (+ (- 2) (* x1 1)) 0))
(assert (<= (+ 6 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 4) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 7 (* x0 1)) 0))
(assert (<= (+ (- 1) (* x1 1)) 0))
(assert (<= (+ 7 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 3) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 8 (* x0 1)) 0))
(assert (<= (+ 0 (* x1 1)) 0))
(assert (> (+ 8 (* x0 3) (* x1 1)) 0))
(assert (< (+ 9 (* x0 1)) 0))

==============
Solving Branch is 34!!!!
before solve at
sat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (>= (+ 0 (* x0 1)) 0))
(assert (<= (+ (- 8) (* x1 1)) 0))
(assert (<= (+ 0 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 10) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (<= (+ (- 7) (* x1 1)) 0))
(assert (<= (+ 1 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 9) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (<= (+ 2 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 8) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))
(assert (<= (+ 3 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 7) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (<= (+ (- 4) (* x1 1)) 0))
(assert (<= (+ 4 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 6) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 5 (* x0 1)) 0))
(assert (<= (+ (- 3) (* x1 1)) 0))
(assert (<= (+ 5 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 5) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 6 (* x0 1)) 0))
(assert (<= (+ (- 2) (* x1 1)) 0))
(assert (<= (+ 6 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 4) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 7 (* x0 1)) 0))
(assert (<= (+ (- 1) (* x1 1)) 0))
(assert (<= (+ 7 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 3) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 8 (* x0 1)) 0))
(assert (<= (+ 0 (* x1 1)) 0))
(assert (<= (+ 8 (* x0 3) (* x1 1)) 0))
(rmodel->model-converter-wrapper
x1 -> (- 8)
x0 -> 0
)

==============
after solve
Total Elapsed Time: 1.56781
  Search Time: 1.03201
  Solving Time: 0.347208
  Program Time: 0.188595
remote run 0
input string 0
-8

parsin not complete!
branch size: 52
costraint size: 39
costraint size1: 39
costraint siz2e: 39
constraints_idx[0]:2constraints_idx[1]:3constraints_idx[2]:4constraints_idx[3]:5constraints_idx[4]:7constraints_idx[5]:8constraints_idx[6]:9constraints_idx[7]:10constraints_idx[8]:12constraints_idx[9]:13constraints_idx[10]:14constraints_idx[11]:15constraints_idx[12]:17constraints_idx[13]:18constraints_idx[14]:19constraints_idx[15]:20constraints_idx[16]:22constraints_idx[17]:23constraints_idx[18]:24constraints_idx[19]:25constraints_idx[20]:27constraints_idx[21]:28constraints_idx[22]:29constraints_idx[23]:30constraints_idx[24]:32constraints_idx[25]:33constraints_idx[26]:34constraints_idx[27]:35constraints_idx[28]:37constraints_idx[29]:38constraints_idx[30]:39constraints_idx[31]:40constraints_idx[32]:42constraints_idx[33]:43constraints_idx[34]:44constraints_idx[35]:45constraints_idx[36]:47constraints_idx[37]:48constraints_idx[38]:49costraint idx front: 2
parsing complete!
Iteration 10 (1s): covered 8 branches [1 reach funs, 10 reach branches].
path.constraints_idx[34]=44
-1 6 10 12 14 15 6 10 12 14 15 6 10 12 14 15 6 10 12 14 15 6 10 12 14 15 6 10 12 14 15 6 10 12 14 15 6 10 12 14 15 6 10 12 13 6 10 12 13 7 -2 
-1 6 10 12 14 15 6 10 12 14 15 6 10 12 14 15 6 10 12 14 15 6 10 12 14 15 6 10 12 14 15 6 10 12 14 15 6 10 12 14 15 6 10 12 14 15 6 10 12 13 7 -2 
Constraint Size : 39
files.byte = 1648
no hi..
nRcv : 1024
no break..
file_info.st_size : 1024
files.byte 1648
no hi..
nRcv : 424
no break..
file_info.st_size : 1448
files.byte 1648
no hi..
nRcv : 200
no break..
file_info.st_size : 1648
files.byte 1648
send done...
after run
after updatecover
after branch_idx
prev_ex 
cur_ex 
third branch_idx = 44
after checkprediction
after SymbolicPath
Solving Branch is 38!!!!
before solve at
sat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (>= (+ 0 (* x0 1)) 0))
(assert (<= (+ (- 8) (* x1 1)) 0))
(assert (<= (+ 0 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 10) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (<= (+ (- 7) (* x1 1)) 0))
(assert (<= (+ 1 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 9) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (<= (+ 2 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 8) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))
(assert (<= (+ 3 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 7) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (<= (+ (- 4) (* x1 1)) 0))
(assert (<= (+ 4 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 6) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 5 (* x0 1)) 0))
(assert (<= (+ (- 3) (* x1 1)) 0))
(assert (<= (+ 5 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 5) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 6 (* x0 1)) 0))
(assert (<= (+ (- 2) (* x1 1)) 0))
(assert (<= (+ 6 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 4) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 7 (* x0 1)) 0))
(assert (<= (+ (- 1) (* x1 1)) 0))
(assert (<= (+ 7 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 3) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 8 (* x0 1)) 0))
(assert (<= (+ 0 (* x1 1)) 0))
(assert (<= (+ 8 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 2) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 9 (* x0 1)) 0))
(assert (<= (+ 1 (* x1 1)) 0))
(assert (<= (+ 9 (* x0 3) (* x1 1)) 0))
(rmodel->model-converter-wrapper
x1 -> (- 9)
x0 -> 0
)

==============
after solve
Total Elapsed Time: 1.59233
  Search Time: 1.0344
  Solving Time: 0.352104
  Program Time: 0.205823
remote run 0
input string 0
-9

parsin not complete!
branch size: 53
costraint size: 40
costraint size1: 40
costraint siz2e: 40
constraints_idx[0]:2constraints_idx[1]:3constraints_idx[2]:4constraints_idx[3]:5constraints_idx[4]:7constraints_idx[5]:8constraints_idx[6]:9constraints_idx[7]:10constraints_idx[8]:12constraints_idx[9]:13constraints_idx[10]:14constraints_idx[11]:15constraints_idx[12]:17constraints_idx[13]:18constraints_idx[14]:19constraints_idx[15]:20constraints_idx[16]:22constraints_idx[17]:23constraints_idx[18]:24constraints_idx[19]:25constraints_idx[20]:27constraints_idx[21]:28constraints_idx[22]:29constraints_idx[23]:30constraints_idx[24]:32constraints_idx[25]:33constraints_idx[26]:34constraints_idx[27]:35constraints_idx[28]:37constraints_idx[29]:38constraints_idx[30]:39constraints_idx[31]:40constraints_idx[32]:42constraints_idx[33]:43constraints_idx[34]:44constraints_idx[35]:45constraints_idx[36]:47constraints_idx[37]:48constraints_idx[38]:49constraints_idx[39]:50costraint idx front: 2
parsing complete!
Iteration 11 (1s): covered 8 branches [1 reach funs, 10 reach branches].
path.constraints_idx[38]=49
-1 6 10 12 14 15 6 10 12 14 15 6 10 12 14 15 6 10 12 14 15 6 10 12 14 15 6 10 12 14 15 6 10 12 14 15 6 10 12 14 15 6 10 12 14 15 6 10 12 13 7 -2 
-1 6 10 12 14 15 6 10 12 14 15 6 10 12 14 15 6 10 12 14 15 6 10 12 14 15 6 10 12 14 15 6 10 12 14 15 6 10 12 14 15 6 10 12 14 15 6 10 12 14 15 7 -2 
Constraint Size : 40
files.byte = 1694
no hi..
nRcv : 1024
no break..
file_info.st_size : 1024
files.byte 1694
no hi..
nRcv : 424
no break..
file_info.st_size : 1448
files.byte 1694
no hi..
nRcv : 246
no break..
file_info.st_size : 1694
files.byte 1694
send done...
after run
after updatecover
after branch_idx
prev_ex 
cur_ex 
third branch_idx = 49
after checkprediction
after SymbolicPath
Solving Branch is 39!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (>= (+ 0 (* x0 1)) 0))
(assert (<= (+ (- 8) (* x1 1)) 0))
(assert (<= (+ 0 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 10) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (<= (+ (- 7) (* x1 1)) 0))
(assert (<= (+ 1 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 9) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (<= (+ 2 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 8) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))
(assert (<= (+ 3 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 7) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (<= (+ (- 4) (* x1 1)) 0))
(assert (<= (+ 4 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 6) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 5 (* x0 1)) 0))
(assert (<= (+ (- 3) (* x1 1)) 0))
(assert (<= (+ 5 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 5) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 6 (* x0 1)) 0))
(assert (<= (+ (- 2) (* x1 1)) 0))
(assert (<= (+ 6 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 4) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 7 (* x0 1)) 0))
(assert (<= (+ (- 1) (* x1 1)) 0))
(assert (<= (+ 7 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 3) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 8 (* x0 1)) 0))
(assert (<= (+ 0 (* x1 1)) 0))
(assert (<= (+ 8 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 2) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 9 (* x0 1)) 0))
(assert (<= (+ 1 (* x1 1)) 0))
(assert (<= (+ 9 (* x0 3) (* x1 1)) 0))
(assert (>= (+ (- 1) (* x0 1) (* x1 1)) 0))

==============
after for loop
after pureDfs final
Solving Branch is 37!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (>= (+ 0 (* x0 1)) 0))
(assert (<= (+ (- 8) (* x1 1)) 0))
(assert (<= (+ 0 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 10) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (<= (+ (- 7) (* x1 1)) 0))
(assert (<= (+ 1 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 9) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (<= (+ 2 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 8) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))
(assert (<= (+ 3 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 7) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (<= (+ (- 4) (* x1 1)) 0))
(assert (<= (+ 4 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 6) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 5 (* x0 1)) 0))
(assert (<= (+ (- 3) (* x1 1)) 0))
(assert (<= (+ 5 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 5) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 6 (* x0 1)) 0))
(assert (<= (+ (- 2) (* x1 1)) 0))
(assert (<= (+ 6 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 4) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 7 (* x0 1)) 0))
(assert (<= (+ (- 1) (* x1 1)) 0))
(assert (<= (+ 7 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 3) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 8 (* x0 1)) 0))
(assert (<= (+ 0 (* x1 1)) 0))
(assert (<= (+ 8 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 2) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 9 (* x0 1)) 0))
(assert (> (+ 1 (* x1 1)) 0))

==============
Solving Branch is 36!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (>= (+ 0 (* x0 1)) 0))
(assert (<= (+ (- 8) (* x1 1)) 0))
(assert (<= (+ 0 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 10) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (<= (+ (- 7) (* x1 1)) 0))
(assert (<= (+ 1 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 9) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (<= (+ 2 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 8) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))
(assert (<= (+ 3 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 7) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (<= (+ (- 4) (* x1 1)) 0))
(assert (<= (+ 4 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 6) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 5 (* x0 1)) 0))
(assert (<= (+ (- 3) (* x1 1)) 0))
(assert (<= (+ 5 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 5) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 6 (* x0 1)) 0))
(assert (<= (+ (- 2) (* x1 1)) 0))
(assert (<= (+ 6 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 4) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 7 (* x0 1)) 0))
(assert (<= (+ (- 1) (* x1 1)) 0))
(assert (<= (+ 7 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 3) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 8 (* x0 1)) 0))
(assert (<= (+ 0 (* x1 1)) 0))
(assert (<= (+ 8 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 2) (* x0 1) (* x1 1)) 0))
(assert (< (+ 9 (* x0 1)) 0))

==============
Solving Branch is 35!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (>= (+ 0 (* x0 1)) 0))
(assert (<= (+ (- 8) (* x1 1)) 0))
(assert (<= (+ 0 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 10) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (<= (+ (- 7) (* x1 1)) 0))
(assert (<= (+ 1 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 9) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (<= (+ 2 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 8) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))
(assert (<= (+ 3 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 7) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (<= (+ (- 4) (* x1 1)) 0))
(assert (<= (+ 4 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 6) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 5 (* x0 1)) 0))
(assert (<= (+ (- 3) (* x1 1)) 0))
(assert (<= (+ 5 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 5) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 6 (* x0 1)) 0))
(assert (<= (+ (- 2) (* x1 1)) 0))
(assert (<= (+ 6 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 4) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 7 (* x0 1)) 0))
(assert (<= (+ (- 1) (* x1 1)) 0))
(assert (<= (+ 7 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 3) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 8 (* x0 1)) 0))
(assert (<= (+ 0 (* x1 1)) 0))
(assert (<= (+ 8 (* x0 3) (* x1 1)) 0))
(assert (>= (+ (- 2) (* x0 1) (* x1 1)) 0))

==============
after for loop
after pureDfs final
Solving Branch is 33!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (>= (+ 0 (* x0 1)) 0))
(assert (<= (+ (- 8) (* x1 1)) 0))
(assert (<= (+ 0 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 10) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (<= (+ (- 7) (* x1 1)) 0))
(assert (<= (+ 1 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 9) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (<= (+ 2 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 8) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))
(assert (<= (+ 3 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 7) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (<= (+ (- 4) (* x1 1)) 0))
(assert (<= (+ 4 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 6) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 5 (* x0 1)) 0))
(assert (<= (+ (- 3) (* x1 1)) 0))
(assert (<= (+ 5 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 5) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 6 (* x0 1)) 0))
(assert (<= (+ (- 2) (* x1 1)) 0))
(assert (<= (+ 6 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 4) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 7 (* x0 1)) 0))
(assert (<= (+ (- 1) (* x1 1)) 0))
(assert (<= (+ 7 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 3) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 8 (* x0 1)) 0))
(assert (> (+ 0 (* x1 1)) 0))

==============
Solving Branch is 32!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (>= (+ 0 (* x0 1)) 0))
(assert (<= (+ (- 8) (* x1 1)) 0))
(assert (<= (+ 0 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 10) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (<= (+ (- 7) (* x1 1)) 0))
(assert (<= (+ 1 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 9) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (<= (+ 2 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 8) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))
(assert (<= (+ 3 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 7) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (<= (+ (- 4) (* x1 1)) 0))
(assert (<= (+ 4 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 6) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 5 (* x0 1)) 0))
(assert (<= (+ (- 3) (* x1 1)) 0))
(assert (<= (+ 5 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 5) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 6 (* x0 1)) 0))
(assert (<= (+ (- 2) (* x1 1)) 0))
(assert (<= (+ 6 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 4) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 7 (* x0 1)) 0))
(assert (<= (+ (- 1) (* x1 1)) 0))
(assert (<= (+ 7 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 3) (* x0 1) (* x1 1)) 0))
(assert (< (+ 8 (* x0 1)) 0))

==============
Solving Branch is 31!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (>= (+ 0 (* x0 1)) 0))
(assert (<= (+ (- 8) (* x1 1)) 0))
(assert (<= (+ 0 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 10) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (<= (+ (- 7) (* x1 1)) 0))
(assert (<= (+ 1 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 9) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (<= (+ 2 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 8) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))
(assert (<= (+ 3 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 7) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (<= (+ (- 4) (* x1 1)) 0))
(assert (<= (+ 4 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 6) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 5 (* x0 1)) 0))
(assert (<= (+ (- 3) (* x1 1)) 0))
(assert (<= (+ 5 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 5) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 6 (* x0 1)) 0))
(assert (<= (+ (- 2) (* x1 1)) 0))
(assert (<= (+ 6 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 4) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 7 (* x0 1)) 0))
(assert (<= (+ (- 1) (* x1 1)) 0))
(assert (<= (+ 7 (* x0 3) (* x1 1)) 0))
(assert (>= (+ (- 3) (* x0 1) (* x1 1)) 0))

==============
after for loop
after pureDfs final
Solving Branch is 29!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (>= (+ 0 (* x0 1)) 0))
(assert (<= (+ (- 8) (* x1 1)) 0))
(assert (<= (+ 0 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 10) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (<= (+ (- 7) (* x1 1)) 0))
(assert (<= (+ 1 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 9) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (<= (+ 2 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 8) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))
(assert (<= (+ 3 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 7) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (<= (+ (- 4) (* x1 1)) 0))
(assert (<= (+ 4 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 6) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 5 (* x0 1)) 0))
(assert (<= (+ (- 3) (* x1 1)) 0))
(assert (<= (+ 5 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 5) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 6 (* x0 1)) 0))
(assert (<= (+ (- 2) (* x1 1)) 0))
(assert (<= (+ 6 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 4) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 7 (* x0 1)) 0))
(assert (> (+ (- 1) (* x1 1)) 0))

==============
Solving Branch is 28!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (>= (+ 0 (* x0 1)) 0))
(assert (<= (+ (- 8) (* x1 1)) 0))
(assert (<= (+ 0 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 10) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (<= (+ (- 7) (* x1 1)) 0))
(assert (<= (+ 1 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 9) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (<= (+ 2 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 8) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))
(assert (<= (+ 3 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 7) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (<= (+ (- 4) (* x1 1)) 0))
(assert (<= (+ 4 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 6) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 5 (* x0 1)) 0))
(assert (<= (+ (- 3) (* x1 1)) 0))
(assert (<= (+ 5 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 5) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 6 (* x0 1)) 0))
(assert (<= (+ (- 2) (* x1 1)) 0))
(assert (<= (+ 6 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 4) (* x0 1) (* x1 1)) 0))
(assert (< (+ 7 (* x0 1)) 0))

==============
Solving Branch is 27!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (>= (+ 0 (* x0 1)) 0))
(assert (<= (+ (- 8) (* x1 1)) 0))
(assert (<= (+ 0 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 10) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (<= (+ (- 7) (* x1 1)) 0))
(assert (<= (+ 1 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 9) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (<= (+ 2 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 8) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))
(assert (<= (+ 3 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 7) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (<= (+ (- 4) (* x1 1)) 0))
(assert (<= (+ 4 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 6) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 5 (* x0 1)) 0))
(assert (<= (+ (- 3) (* x1 1)) 0))
(assert (<= (+ 5 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 5) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 6 (* x0 1)) 0))
(assert (<= (+ (- 2) (* x1 1)) 0))
(assert (<= (+ 6 (* x0 3) (* x1 1)) 0))
(assert (>= (+ (- 4) (* x0 1) (* x1 1)) 0))

==============
after for loop
after pureDfs final
Solving Branch is 25!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (>= (+ 0 (* x0 1)) 0))
(assert (<= (+ (- 8) (* x1 1)) 0))
(assert (<= (+ 0 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 10) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (<= (+ (- 7) (* x1 1)) 0))
(assert (<= (+ 1 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 9) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (<= (+ 2 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 8) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))
(assert (<= (+ 3 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 7) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (<= (+ (- 4) (* x1 1)) 0))
(assert (<= (+ 4 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 6) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 5 (* x0 1)) 0))
(assert (<= (+ (- 3) (* x1 1)) 0))
(assert (<= (+ 5 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 5) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 6 (* x0 1)) 0))
(assert (> (+ (- 2) (* x1 1)) 0))

==============
Solving Branch is 24!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (>= (+ 0 (* x0 1)) 0))
(assert (<= (+ (- 8) (* x1 1)) 0))
(assert (<= (+ 0 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 10) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (<= (+ (- 7) (* x1 1)) 0))
(assert (<= (+ 1 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 9) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (<= (+ 2 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 8) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))
(assert (<= (+ 3 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 7) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (<= (+ (- 4) (* x1 1)) 0))
(assert (<= (+ 4 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 6) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 5 (* x0 1)) 0))
(assert (<= (+ (- 3) (* x1 1)) 0))
(assert (<= (+ 5 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 5) (* x0 1) (* x1 1)) 0))
(assert (< (+ 6 (* x0 1)) 0))

==============
Solving Branch is 23!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (>= (+ 0 (* x0 1)) 0))
(assert (<= (+ (- 8) (* x1 1)) 0))
(assert (<= (+ 0 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 10) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (<= (+ (- 7) (* x1 1)) 0))
(assert (<= (+ 1 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 9) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (<= (+ 2 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 8) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))
(assert (<= (+ 3 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 7) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (<= (+ (- 4) (* x1 1)) 0))
(assert (<= (+ 4 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 6) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 5 (* x0 1)) 0))
(assert (<= (+ (- 3) (* x1 1)) 0))
(assert (<= (+ 5 (* x0 3) (* x1 1)) 0))
(assert (>= (+ (- 5) (* x0 1) (* x1 1)) 0))

==============
after for loop
after pureDfs final
Solving Branch is 21!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (>= (+ 0 (* x0 1)) 0))
(assert (<= (+ (- 8) (* x1 1)) 0))
(assert (<= (+ 0 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 10) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (<= (+ (- 7) (* x1 1)) 0))
(assert (<= (+ 1 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 9) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (<= (+ 2 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 8) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))
(assert (<= (+ 3 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 7) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (<= (+ (- 4) (* x1 1)) 0))
(assert (<= (+ 4 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 6) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 5 (* x0 1)) 0))
(assert (> (+ (- 3) (* x1 1)) 0))

==============
Solving Branch is 20!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (>= (+ 0 (* x0 1)) 0))
(assert (<= (+ (- 8) (* x1 1)) 0))
(assert (<= (+ 0 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 10) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (<= (+ (- 7) (* x1 1)) 0))
(assert (<= (+ 1 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 9) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (<= (+ 2 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 8) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))
(assert (<= (+ 3 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 7) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (<= (+ (- 4) (* x1 1)) 0))
(assert (<= (+ 4 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 6) (* x0 1) (* x1 1)) 0))
(assert (< (+ 5 (* x0 1)) 0))

==============
Solving Branch is 19!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (>= (+ 0 (* x0 1)) 0))
(assert (<= (+ (- 8) (* x1 1)) 0))
(assert (<= (+ 0 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 10) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (<= (+ (- 7) (* x1 1)) 0))
(assert (<= (+ 1 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 9) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (<= (+ 2 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 8) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))
(assert (<= (+ 3 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 7) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (<= (+ (- 4) (* x1 1)) 0))
(assert (<= (+ 4 (* x0 3) (* x1 1)) 0))
(assert (>= (+ (- 6) (* x0 1) (* x1 1)) 0))

==============
after for loop
after pureDfs final
Solving Branch is 17!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (>= (+ 0 (* x0 1)) 0))
(assert (<= (+ (- 8) (* x1 1)) 0))
(assert (<= (+ 0 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 10) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (<= (+ (- 7) (* x1 1)) 0))
(assert (<= (+ 1 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 9) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (<= (+ 2 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 8) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))
(assert (<= (+ 3 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 7) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (> (+ (- 4) (* x1 1)) 0))

==============
Solving Branch is 16!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (>= (+ 0 (* x0 1)) 0))
(assert (<= (+ (- 8) (* x1 1)) 0))
(assert (<= (+ 0 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 10) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (<= (+ (- 7) (* x1 1)) 0))
(assert (<= (+ 1 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 9) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (<= (+ 2 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 8) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))
(assert (<= (+ 3 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 7) (* x0 1) (* x1 1)) 0))
(assert (< (+ 4 (* x0 1)) 0))

==============
Solving Branch is 15!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (>= (+ 0 (* x0 1)) 0))
(assert (<= (+ (- 8) (* x1 1)) 0))
(assert (<= (+ 0 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 10) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (<= (+ (- 7) (* x1 1)) 0))
(assert (<= (+ 1 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 9) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (<= (+ 2 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 8) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))
(assert (<= (+ 3 (* x0 3) (* x1 1)) 0))
(assert (>= (+ (- 7) (* x0 1) (* x1 1)) 0))

==============
after for loop
after pureDfs final
Solving Branch is 13!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (>= (+ 0 (* x0 1)) 0))
(assert (<= (+ (- 8) (* x1 1)) 0))
(assert (<= (+ 0 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 10) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (<= (+ (- 7) (* x1 1)) 0))
(assert (<= (+ 1 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 9) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (<= (+ 2 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 8) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (> (+ (- 5) (* x1 1)) 0))

==============
Solving Branch is 12!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (>= (+ 0 (* x0 1)) 0))
(assert (<= (+ (- 8) (* x1 1)) 0))
(assert (<= (+ 0 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 10) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (<= (+ (- 7) (* x1 1)) 0))
(assert (<= (+ 1 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 9) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (<= (+ 2 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 8) (* x0 1) (* x1 1)) 0))
(assert (< (+ 3 (* x0 1)) 0))

==============
Solving Branch is 11!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (>= (+ 0 (* x0 1)) 0))
(assert (<= (+ (- 8) (* x1 1)) 0))
(assert (<= (+ 0 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 10) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (<= (+ (- 7) (* x1 1)) 0))
(assert (<= (+ 1 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 9) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (<= (+ 2 (* x0 3) (* x1 1)) 0))
(assert (>= (+ (- 8) (* x0 1) (* x1 1)) 0))

==============
after for loop
after pureDfs final
Solving Branch is 9!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (>= (+ 0 (* x0 1)) 0))
(assert (<= (+ (- 8) (* x1 1)) 0))
(assert (<= (+ 0 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 10) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (<= (+ (- 7) (* x1 1)) 0))
(assert (<= (+ 1 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 9) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (> (+ (- 6) (* x1 1)) 0))

==============
Solving Branch is 8!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (>= (+ 0 (* x0 1)) 0))
(assert (<= (+ (- 8) (* x1 1)) 0))
(assert (<= (+ 0 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 10) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (<= (+ (- 7) (* x1 1)) 0))
(assert (<= (+ 1 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 9) (* x0 1) (* x1 1)) 0))
(assert (< (+ 2 (* x0 1)) 0))

==============
Solving Branch is 7!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (>= (+ 0 (* x0 1)) 0))
(assert (<= (+ (- 8) (* x1 1)) 0))
(assert (<= (+ 0 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 10) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (<= (+ (- 7) (* x1 1)) 0))
(assert (<= (+ 1 (* x0 3) (* x1 1)) 0))
(assert (>= (+ (- 9) (* x0 1) (* x1 1)) 0))

==============
after for loop
after pureDfs final
Solving Branch is 5!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (>= (+ 0 (* x0 1)) 0))
(assert (<= (+ (- 8) (* x1 1)) 0))
(assert (<= (+ 0 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 10) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (> (+ (- 7) (* x1 1)) 0))

==============
Solving Branch is 4!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (>= (+ 0 (* x0 1)) 0))
(assert (<= (+ (- 8) (* x1 1)) 0))
(assert (<= (+ 0 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 10) (* x0 1) (* x1 1)) 0))
(assert (< (+ 1 (* x0 1)) 0))

==============
Solving Branch is 3!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (>= (+ 0 (* x0 1)) 0))
(assert (<= (+ (- 8) (* x1 1)) 0))
(assert (<= (+ 0 (* x0 3) (* x1 1)) 0))
(assert (>= (+ (- 10) (* x0 1) (* x1 1)) 0))

==============
Solving Branch is 2!!!!
before solve at
sat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (>= (+ 0 (* x0 1)) 0))
(assert (<= (+ (- 8) (* x1 1)) 0))
(assert (> (+ 0 (* x0 3) (* x1 1)) 0))
(rmodel->model-converter-wrapper
x1 -> 0
x0 -> 1
)

==============
after solve
Total Elapsed Time: 1.67384
  Search Time: 1.03686
  Solving Time: 0.412295
  Program Time: 0.224684
remote run 0
input string 1
0

parsin not complete!
branch size: 42
costraint size: 29
costraint size1: 29
costraint siz2e: 29
constraints_idx[0]:2constraints_idx[1]:3constraints_idx[2]:4constraints_idx[3]:6constraints_idx[4]:7constraints_idx[5]:8constraints_idx[6]:10constraints_idx[7]:11constraints_idx[8]:12constraints_idx[9]:14constraints_idx[10]:15constraints_idx[11]:16constraints_idx[12]:18constraints_idx[13]:19constraints_idx[14]:20constraints_idx[15]:22constraints_idx[16]:23constraints_idx[17]:24constraints_idx[18]:26constraints_idx[19]:27constraints_idx[20]:28constraints_idx[21]:30constraints_idx[22]:31constraints_idx[23]:32constraints_idx[24]:34constraints_idx[25]:35constraints_idx[26]:36constraints_idx[27]:38constraints_idx[28]:39costraint idx front: 2
parsing complete!
Iteration 12 (1s): covered 8 branches [1 reach funs, 10 reach branches].
path.constraints_idx[2]=4
-1 6 10 12 14 15 6 10 12 13 6 10 12 13 6 10 12 13 6 10 12 13 6 10 12 13 6 10 12 13 6 10 12 13 6 10 12 13 6 10 11 7 -2 
-1 6 10 12 13 6 10 12 13 6 10 12 13 6 10 12 13 6 10 12 13 6 10 12 13 6 10 12 13 6 10 12 13 6 10 12 13 6 10 11 7 -2 
Constraint Size : 29
files.byte = 1188
no hi..
nRcv : 1024
no break..
file_info.st_size : 1024
files.byte 1188
no hi..
nRcv : 164
no break..
file_info.st_size : 1188
files.byte 1188
send done...
after run
after updatecover
after branch_idx
prev_ex 
cur_ex 
third branch_idx = 4
after checkprediction
after SymbolicPath
Solving Branch is 28!!!!
before solve at
sat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (>= (+ 0 (* x0 1)) 0))
(assert (<= (+ (- 8) (* x1 1)) 0))
(assert (> (+ 0 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (<= (+ (- 7) (* x1 1)) 0))
(assert (> (+ 1 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (> (+ 2 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))
(assert (> (+ 3 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (<= (+ (- 4) (* x1 1)) 0))
(assert (> (+ 4 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 5 (* x0 1)) 0))
(assert (<= (+ (- 3) (* x1 1)) 0))
(assert (> (+ 5 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 6 (* x0 1)) 0))
(assert (<= (+ (- 2) (* x1 1)) 0))
(assert (> (+ 6 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 7 (* x0 1)) 0))
(assert (<= (+ (- 1) (* x1 1)) 0))
(assert (> (+ 7 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 8 (* x0 1)) 0))
(assert (<= (+ 0 (* x1 1)) 0))
(assert (> (+ 8 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 9 (* x0 1)) 0))
(assert (<= (+ 1 (* x1 1)) 0))
(rmodel->model-converter-wrapper
x1 -> (- 2147483646)
x0 -> 715827883
)

==============
after solve
Total Elapsed Time: 1.69601
  Search Time: 1.03965
  Solving Time: 0.416177
  Program Time: 0.240183
remote run 0
input string 715827883
-2147483646

parsin not complete!
branch size: 43
costraint size: 30
costraint size1: 30
costraint siz2e: 30
constraints_idx[0]:2constraints_idx[1]:3constraints_idx[2]:4constraints_idx[3]:6constraints_idx[4]:7constraints_idx[5]:8constraints_idx[6]:10constraints_idx[7]:11constraints_idx[8]:12constraints_idx[9]:14constraints_idx[10]:15constraints_idx[11]:16constraints_idx[12]:18constraints_idx[13]:19constraints_idx[14]:20constraints_idx[15]:22constraints_idx[16]:23constraints_idx[17]:24constraints_idx[18]:26constraints_idx[19]:27constraints_idx[20]:28constraints_idx[21]:30constraints_idx[22]:31constraints_idx[23]:32constraints_idx[24]:34constraints_idx[25]:35constraints_idx[26]:36constraints_idx[27]:38constraints_idx[28]:39constraints_idx[29]:40costraint idx front: 2
parsing complete!
Iteration 13 (1s): covered 8 branches [1 reach funs, 10 reach branches].
path.constraints_idx[28]=39
-1 6 10 12 13 6 10 12 13 6 10 12 13 6 10 12 13 6 10 12 13 6 10 12 13 6 10 12 13 6 10 12 13 6 10 12 13 6 10 11 7 -2 
-1 6 10 12 13 6 10 12 13 6 10 12 13 6 10 12 13 6 10 12 13 6 10 12 13 6 10 12 13 6 10 12 13 6 10 12 13 6 10 12 13 7 -2 
Constraint Size : 30
files.byte = 1234
no hi..
nRcv : 1024
no break..
file_info.st_size : 1024
files.byte 1234
no hi..
nRcv : 210
no break..
file_info.st_size : 1234
files.byte 1234
send done...
after run
after updatecover
after branch_idx
prev_ex 
cur_ex 
third branch_idx = 39
after checkprediction
after SymbolicPath
Solving Branch is 29!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (>= (+ 0 (* x0 1)) 0))
(assert (<= (+ (- 8) (* x1 1)) 0))
(assert (> (+ 0 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (<= (+ (- 7) (* x1 1)) 0))
(assert (> (+ 1 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (> (+ 2 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))
(assert (> (+ 3 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (<= (+ (- 4) (* x1 1)) 0))
(assert (> (+ 4 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 5 (* x0 1)) 0))
(assert (<= (+ (- 3) (* x1 1)) 0))
(assert (> (+ 5 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 6 (* x0 1)) 0))
(assert (<= (+ (- 2) (* x1 1)) 0))
(assert (> (+ 6 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 7 (* x0 1)) 0))
(assert (<= (+ (- 1) (* x1 1)) 0))
(assert (> (+ 7 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 8 (* x0 1)) 0))
(assert (<= (+ 0 (* x1 1)) 0))
(assert (> (+ 8 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 9 (* x0 1)) 0))
(assert (<= (+ 1 (* x1 1)) 0))
(assert (<= (+ 9 (* x0 3) (* x1 1)) 0))

==============
after for loop
after pureDfs final
Solving Branch is 27!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (>= (+ 0 (* x0 1)) 0))
(assert (<= (+ (- 8) (* x1 1)) 0))
(assert (> (+ 0 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (<= (+ (- 7) (* x1 1)) 0))
(assert (> (+ 1 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (> (+ 2 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))
(assert (> (+ 3 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (<= (+ (- 4) (* x1 1)) 0))
(assert (> (+ 4 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 5 (* x0 1)) 0))
(assert (<= (+ (- 3) (* x1 1)) 0))
(assert (> (+ 5 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 6 (* x0 1)) 0))
(assert (<= (+ (- 2) (* x1 1)) 0))
(assert (> (+ 6 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 7 (* x0 1)) 0))
(assert (<= (+ (- 1) (* x1 1)) 0))
(assert (> (+ 7 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 8 (* x0 1)) 0))
(assert (<= (+ 0 (* x1 1)) 0))
(assert (> (+ 8 (* x0 3) (* x1 1)) 0))
(assert (< (+ 9 (* x0 1)) 0))

==============
Solving Branch is 26!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (>= (+ 0 (* x0 1)) 0))
(assert (<= (+ (- 8) (* x1 1)) 0))
(assert (> (+ 0 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (<= (+ (- 7) (* x1 1)) 0))
(assert (> (+ 1 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (> (+ 2 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))
(assert (> (+ 3 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (<= (+ (- 4) (* x1 1)) 0))
(assert (> (+ 4 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 5 (* x0 1)) 0))
(assert (<= (+ (- 3) (* x1 1)) 0))
(assert (> (+ 5 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 6 (* x0 1)) 0))
(assert (<= (+ (- 2) (* x1 1)) 0))
(assert (> (+ 6 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 7 (* x0 1)) 0))
(assert (<= (+ (- 1) (* x1 1)) 0))
(assert (> (+ 7 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 8 (* x0 1)) 0))
(assert (<= (+ 0 (* x1 1)) 0))
(assert (<= (+ 8 (* x0 3) (* x1 1)) 0))

==============
Solving Branch is 25!!!!
before solve at
sat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (>= (+ 0 (* x0 1)) 0))
(assert (<= (+ (- 8) (* x1 1)) 0))
(assert (> (+ 0 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (<= (+ (- 7) (* x1 1)) 0))
(assert (> (+ 1 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (> (+ 2 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))
(assert (> (+ 3 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (<= (+ (- 4) (* x1 1)) 0))
(assert (> (+ 4 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 5 (* x0 1)) 0))
(assert (<= (+ (- 3) (* x1 1)) 0))
(assert (> (+ 5 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 6 (* x0 1)) 0))
(assert (<= (+ (- 2) (* x1 1)) 0))
(assert (> (+ 6 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 7 (* x0 1)) 0))
(assert (<= (+ (- 1) (* x1 1)) 0))
(assert (> (+ 7 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 8 (* x0 1)) 0))
(assert (> (+ 0 (* x1 1)) 0))
(rmodel->model-converter-wrapper
x1 -> 1
x0 -> 0
)

==============
after solve
Total Elapsed Time: 1.72624
  Search Time: 1.04096
  Solving Time: 0.429526
  Program Time: 0.255747
remote run 0
input string 0
1

parsin not complete!
branch size: 41
costraint size: 28
costraint size1: 28
costraint siz2e: 28
constraints_idx[0]:2constraints_idx[1]:3constraints_idx[2]:4constraints_idx[3]:6constraints_idx[4]:7constraints_idx[5]:8constraints_idx[6]:10constraints_idx[7]:11constraints_idx[8]:12constraints_idx[9]:14constraints_idx[10]:15constraints_idx[11]:16constraints_idx[12]:18constraints_idx[13]:19constraints_idx[14]:20constraints_idx[15]:22constraints_idx[16]:23constraints_idx[17]:24constraints_idx[18]:26constraints_idx[19]:27constraints_idx[20]:28constraints_idx[21]:30constraints_idx[22]:31constraints_idx[23]:32constraints_idx[24]:34constraints_idx[25]:35constraints_idx[26]:37constraints_idx[27]:38costraint idx front: 2
parsing complete!
Iteration 14 (1s): covered 8 branches [1 reach funs, 10 reach branches].
path.constraints_idx[25]=35
-1 6 10 12 13 6 10 12 13 6 10 12 13 6 10 12 13 6 10 12 13 6 10 12 13 6 10 12 13 6 10 12 13 6 10 12 13 6 10 11 7 -2 
-1 6 10 12 13 6 10 12 13 6 10 12 13 6 10 12 13 6 10 12 13 6 10 12 13 6 10 12 13 6 10 12 13 6 10 11 6 10 11 7 -2 
Constraint Size : 28
files.byte = 1142
no hi..
nRcv : 1024
no break..
file_info.st_size : 1024
files.byte 1142
no hi..
nRcv : 118
no break..
file_info.st_size : 1142
files.byte 1142
send done...
after run
after updatecover
after branch_idx
prev_ex 
cur_ex 
third branch_idx = 35
after checkprediction
after SymbolicPath
Solving Branch is 27!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (>= (+ 0 (* x0 1)) 0))
(assert (<= (+ (- 8) (* x1 1)) 0))
(assert (> (+ 0 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (<= (+ (- 7) (* x1 1)) 0))
(assert (> (+ 1 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (> (+ 2 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))
(assert (> (+ 3 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (<= (+ (- 4) (* x1 1)) 0))
(assert (> (+ 4 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 5 (* x0 1)) 0))
(assert (<= (+ (- 3) (* x1 1)) 0))
(assert (> (+ 5 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 6 (* x0 1)) 0))
(assert (<= (+ (- 2) (* x1 1)) 0))
(assert (> (+ 6 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 7 (* x0 1)) 0))
(assert (<= (+ (- 1) (* x1 1)) 0))
(assert (> (+ 7 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 8 (* x0 1)) 0))
(assert (> (+ 0 (* x1 1)) 0))
(assert (>= (+ 9 (* x0 1)) 0))
(assert (<= (+ 1 (* x1 1)) 0))

==============
Solving Branch is 26!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (>= (+ 0 (* x0 1)) 0))
(assert (<= (+ (- 8) (* x1 1)) 0))
(assert (> (+ 0 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (<= (+ (- 7) (* x1 1)) 0))
(assert (> (+ 1 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (> (+ 2 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))
(assert (> (+ 3 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (<= (+ (- 4) (* x1 1)) 0))
(assert (> (+ 4 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 5 (* x0 1)) 0))
(assert (<= (+ (- 3) (* x1 1)) 0))
(assert (> (+ 5 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 6 (* x0 1)) 0))
(assert (<= (+ (- 2) (* x1 1)) 0))
(assert (> (+ 6 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 7 (* x0 1)) 0))
(assert (<= (+ (- 1) (* x1 1)) 0))
(assert (> (+ 7 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 8 (* x0 1)) 0))
(assert (> (+ 0 (* x1 1)) 0))
(assert (< (+ 9 (* x0 1)) 0))

==============
after for loop
after pureDfs final
Solving Branch is 24!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (>= (+ 0 (* x0 1)) 0))
(assert (<= (+ (- 8) (* x1 1)) 0))
(assert (> (+ 0 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (<= (+ (- 7) (* x1 1)) 0))
(assert (> (+ 1 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (> (+ 2 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))
(assert (> (+ 3 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (<= (+ (- 4) (* x1 1)) 0))
(assert (> (+ 4 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 5 (* x0 1)) 0))
(assert (<= (+ (- 3) (* x1 1)) 0))
(assert (> (+ 5 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 6 (* x0 1)) 0))
(assert (<= (+ (- 2) (* x1 1)) 0))
(assert (> (+ 6 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 7 (* x0 1)) 0))
(assert (<= (+ (- 1) (* x1 1)) 0))
(assert (> (+ 7 (* x0 3) (* x1 1)) 0))
(assert (< (+ 8 (* x0 1)) 0))

==============
Solving Branch is 23!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (>= (+ 0 (* x0 1)) 0))
(assert (<= (+ (- 8) (* x1 1)) 0))
(assert (> (+ 0 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (<= (+ (- 7) (* x1 1)) 0))
(assert (> (+ 1 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (> (+ 2 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))
(assert (> (+ 3 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (<= (+ (- 4) (* x1 1)) 0))
(assert (> (+ 4 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 5 (* x0 1)) 0))
(assert (<= (+ (- 3) (* x1 1)) 0))
(assert (> (+ 5 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 6 (* x0 1)) 0))
(assert (<= (+ (- 2) (* x1 1)) 0))
(assert (> (+ 6 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 7 (* x0 1)) 0))
(assert (<= (+ (- 1) (* x1 1)) 0))
(assert (<= (+ 7 (* x0 3) (* x1 1)) 0))

==============
Solving Branch is 22!!!!
before solve at
sat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (>= (+ 0 (* x0 1)) 0))
(assert (<= (+ (- 8) (* x1 1)) 0))
(assert (> (+ 0 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (<= (+ (- 7) (* x1 1)) 0))
(assert (> (+ 1 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (> (+ 2 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))
(assert (> (+ 3 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (<= (+ (- 4) (* x1 1)) 0))
(assert (> (+ 4 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 5 (* x0 1)) 0))
(assert (<= (+ (- 3) (* x1 1)) 0))
(assert (> (+ 5 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 6 (* x0 1)) 0))
(assert (<= (+ (- 2) (* x1 1)) 0))
(assert (> (+ 6 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 7 (* x0 1)) 0))
(assert (> (+ (- 1) (* x1 1)) 0))
(rmodel->model-converter-wrapper
x1 -> 2
x0 -> 0
)

==============
after solve
Total Elapsed Time: 1.76427
  Search Time: 1.04243
  Solving Time: 0.442253
  Program Time: 0.279584
remote run 0
input string 0
2

parsin not complete!
branch size: 40
costraint size: 27
costraint size1: 27
costraint siz2e: 27
constraints_idx[0]:2constraints_idx[1]:3constraints_idx[2]:4constraints_idx[3]:6constraints_idx[4]:7constraints_idx[5]:8constraints_idx[6]:10constraints_idx[7]:11constraints_idx[8]:12constraints_idx[9]:14constraints_idx[10]:15constraints_idx[11]:16constraints_idx[12]:18constraints_idx[13]:19constraints_idx[14]:20constraints_idx[15]:22constraints_idx[16]:23constraints_idx[17]:24constraints_idx[18]:26constraints_idx[19]:27constraints_idx[20]:28constraints_idx[21]:30constraints_idx[22]:31constraints_idx[23]:33constraints_idx[24]:34constraints_idx[25]:36constraints_idx[26]:37costraint idx front: 2
parsing complete!
Iteration 15 (1s): covered 8 branches [1 reach funs, 10 reach branches].
path.constraints_idx[22]=31
-1 6 10 12 13 6 10 12 13 6 10 12 13 6 10 12 13 6 10 12 13 6 10 12 13 6 10 12 13 6 10 12 13 6 10 12 13 6 10 11 7 -2 
-1 6 10 12 13 6 10 12 13 6 10 12 13 6 10 12 13 6 10 12 13 6 10 12 13 6 10 12 13 6 10 11 6 10 11 6 10 11 7 -2 
Constraint Size : 27
files.byte = 1096
no hi..
nRcv : 1024
no break..
file_info.st_size : 1024
files.byte 1096
no hi..
nRcv : 72
no break..
file_info.st_size : 1096
files.byte 1096
send done...
after run
after updatecover
after branch_idx
prev_ex 
cur_ex 
third branch_idx = 31
after checkprediction
after SymbolicPath
Solving Branch is 26!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (>= (+ 0 (* x0 1)) 0))
(assert (<= (+ (- 8) (* x1 1)) 0))
(assert (> (+ 0 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (<= (+ (- 7) (* x1 1)) 0))
(assert (> (+ 1 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (> (+ 2 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))
(assert (> (+ 3 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (<= (+ (- 4) (* x1 1)) 0))
(assert (> (+ 4 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 5 (* x0 1)) 0))
(assert (<= (+ (- 3) (* x1 1)) 0))
(assert (> (+ 5 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 6 (* x0 1)) 0))
(assert (<= (+ (- 2) (* x1 1)) 0))
(assert (> (+ 6 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 7 (* x0 1)) 0))
(assert (> (+ (- 1) (* x1 1)) 0))
(assert (>= (+ 8 (* x0 1)) 0))
(assert (> (+ 0 (* x1 1)) 0))
(assert (>= (+ 9 (* x0 1)) 0))
(assert (<= (+ 1 (* x1 1)) 0))

==============
Solving Branch is 25!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (>= (+ 0 (* x0 1)) 0))
(assert (<= (+ (- 8) (* x1 1)) 0))
(assert (> (+ 0 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (<= (+ (- 7) (* x1 1)) 0))
(assert (> (+ 1 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (> (+ 2 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))
(assert (> (+ 3 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (<= (+ (- 4) (* x1 1)) 0))
(assert (> (+ 4 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 5 (* x0 1)) 0))
(assert (<= (+ (- 3) (* x1 1)) 0))
(assert (> (+ 5 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 6 (* x0 1)) 0))
(assert (<= (+ (- 2) (* x1 1)) 0))
(assert (> (+ 6 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 7 (* x0 1)) 0))
(assert (> (+ (- 1) (* x1 1)) 0))
(assert (>= (+ 8 (* x0 1)) 0))
(assert (> (+ 0 (* x1 1)) 0))
(assert (< (+ 9 (* x0 1)) 0))

==============
Solving Branch is 24!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (>= (+ 0 (* x0 1)) 0))
(assert (<= (+ (- 8) (* x1 1)) 0))
(assert (> (+ 0 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (<= (+ (- 7) (* x1 1)) 0))
(assert (> (+ 1 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (> (+ 2 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))
(assert (> (+ 3 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (<= (+ (- 4) (* x1 1)) 0))
(assert (> (+ 4 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 5 (* x0 1)) 0))
(assert (<= (+ (- 3) (* x1 1)) 0))
(assert (> (+ 5 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 6 (* x0 1)) 0))
(assert (<= (+ (- 2) (* x1 1)) 0))
(assert (> (+ 6 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 7 (* x0 1)) 0))
(assert (> (+ (- 1) (* x1 1)) 0))
(assert (>= (+ 8 (* x0 1)) 0))
(assert (<= (+ 0 (* x1 1)) 0))

==============
Solving Branch is 23!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (>= (+ 0 (* x0 1)) 0))
(assert (<= (+ (- 8) (* x1 1)) 0))
(assert (> (+ 0 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (<= (+ (- 7) (* x1 1)) 0))
(assert (> (+ 1 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (> (+ 2 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))
(assert (> (+ 3 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (<= (+ (- 4) (* x1 1)) 0))
(assert (> (+ 4 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 5 (* x0 1)) 0))
(assert (<= (+ (- 3) (* x1 1)) 0))
(assert (> (+ 5 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 6 (* x0 1)) 0))
(assert (<= (+ (- 2) (* x1 1)) 0))
(assert (> (+ 6 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 7 (* x0 1)) 0))
(assert (> (+ (- 1) (* x1 1)) 0))
(assert (< (+ 8 (* x0 1)) 0))

==============
after for loop
after pureDfs final
Solving Branch is 21!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (>= (+ 0 (* x0 1)) 0))
(assert (<= (+ (- 8) (* x1 1)) 0))
(assert (> (+ 0 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (<= (+ (- 7) (* x1 1)) 0))
(assert (> (+ 1 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (> (+ 2 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))
(assert (> (+ 3 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (<= (+ (- 4) (* x1 1)) 0))
(assert (> (+ 4 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 5 (* x0 1)) 0))
(assert (<= (+ (- 3) (* x1 1)) 0))
(assert (> (+ 5 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 6 (* x0 1)) 0))
(assert (<= (+ (- 2) (* x1 1)) 0))
(assert (> (+ 6 (* x0 3) (* x1 1)) 0))
(assert (< (+ 7 (* x0 1)) 0))

==============
Solving Branch is 20!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (>= (+ 0 (* x0 1)) 0))
(assert (<= (+ (- 8) (* x1 1)) 0))
(assert (> (+ 0 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (<= (+ (- 7) (* x1 1)) 0))
(assert (> (+ 1 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (> (+ 2 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))
(assert (> (+ 3 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (<= (+ (- 4) (* x1 1)) 0))
(assert (> (+ 4 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 5 (* x0 1)) 0))
(assert (<= (+ (- 3) (* x1 1)) 0))
(assert (> (+ 5 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 6 (* x0 1)) 0))
(assert (<= (+ (- 2) (* x1 1)) 0))
(assert (<= (+ 6 (* x0 3) (* x1 1)) 0))

==============
Solving Branch is 19!!!!
before solve at
sat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (>= (+ 0 (* x0 1)) 0))
(assert (<= (+ (- 8) (* x1 1)) 0))
(assert (> (+ 0 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (<= (+ (- 7) (* x1 1)) 0))
(assert (> (+ 1 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (> (+ 2 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))
(assert (> (+ 3 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (<= (+ (- 4) (* x1 1)) 0))
(assert (> (+ 4 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 5 (* x0 1)) 0))
(assert (<= (+ (- 3) (* x1 1)) 0))
(assert (> (+ 5 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 6 (* x0 1)) 0))
(assert (> (+ (- 2) (* x1 1)) 0))
(rmodel->model-converter-wrapper
x1 -> 3
x0 -> 0
)

==============
after solve
Total Elapsed Time: 1.80278
  Search Time: 1.04419
  Solving Time: 0.460562
  Program Time: 0.298027
remote run 0
input string 0
3

parsin not complete!
branch size: 39
costraint size: 26
costraint size1: 26
costraint siz2e: 26
constraints_idx[0]:2constraints_idx[1]:3constraints_idx[2]:4constraints_idx[3]:6constraints_idx[4]:7constraints_idx[5]:8constraints_idx[6]:10constraints_idx[7]:11constraints_idx[8]:12constraints_idx[9]:14constraints_idx[10]:15constraints_idx[11]:16constraints_idx[12]:18constraints_idx[13]:19constraints_idx[14]:20constraints_idx[15]:22constraints_idx[16]:23constraints_idx[17]:24constraints_idx[18]:26constraints_idx[19]:27constraints_idx[20]:29constraints_idx[21]:30constraints_idx[22]:32constraints_idx[23]:33constraints_idx[24]:35constraints_idx[25]:36costraint idx front: 2
parsing complete!
Iteration 16 (1s): covered 8 branches [1 reach funs, 10 reach branches].
path.constraints_idx[19]=27
-1 6 10 12 13 6 10 12 13 6 10 12 13 6 10 12 13 6 10 12 13 6 10 12 13 6 10 12 13 6 10 12 13 6 10 12 13 6 10 11 7 -2 
-1 6 10 12 13 6 10 12 13 6 10 12 13 6 10 12 13 6 10 12 13 6 10 12 13 6 10 11 6 10 11 6 10 11 6 10 11 7 -2 
Constraint Size : 26
files.byte = 1050
no hi..
nRcv : 1024
no break..
file_info.st_size : 1024
files.byte 1050
no hi..
nRcv : 26
no break..
file_info.st_size : 1050
files.byte 1050
send done...
after run
after updatecover
after branch_idx
prev_ex 
cur_ex 
third branch_idx = 27
after checkprediction
after SymbolicPath
Solving Branch is 25!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (>= (+ 0 (* x0 1)) 0))
(assert (<= (+ (- 8) (* x1 1)) 0))
(assert (> (+ 0 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (<= (+ (- 7) (* x1 1)) 0))
(assert (> (+ 1 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (> (+ 2 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))
(assert (> (+ 3 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (<= (+ (- 4) (* x1 1)) 0))
(assert (> (+ 4 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 5 (* x0 1)) 0))
(assert (<= (+ (- 3) (* x1 1)) 0))
(assert (> (+ 5 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 6 (* x0 1)) 0))
(assert (> (+ (- 2) (* x1 1)) 0))
(assert (>= (+ 7 (* x0 1)) 0))
(assert (> (+ (- 1) (* x1 1)) 0))
(assert (>= (+ 8 (* x0 1)) 0))
(assert (> (+ 0 (* x1 1)) 0))
(assert (>= (+ 9 (* x0 1)) 0))
(assert (<= (+ 1 (* x1 1)) 0))

==============
Solving Branch is 24!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (>= (+ 0 (* x0 1)) 0))
(assert (<= (+ (- 8) (* x1 1)) 0))
(assert (> (+ 0 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (<= (+ (- 7) (* x1 1)) 0))
(assert (> (+ 1 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (> (+ 2 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))
(assert (> (+ 3 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (<= (+ (- 4) (* x1 1)) 0))
(assert (> (+ 4 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 5 (* x0 1)) 0))
(assert (<= (+ (- 3) (* x1 1)) 0))
(assert (> (+ 5 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 6 (* x0 1)) 0))
(assert (> (+ (- 2) (* x1 1)) 0))
(assert (>= (+ 7 (* x0 1)) 0))
(assert (> (+ (- 1) (* x1 1)) 0))
(assert (>= (+ 8 (* x0 1)) 0))
(assert (> (+ 0 (* x1 1)) 0))
(assert (< (+ 9 (* x0 1)) 0))

==============
Solving Branch is 23!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (>= (+ 0 (* x0 1)) 0))
(assert (<= (+ (- 8) (* x1 1)) 0))
(assert (> (+ 0 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (<= (+ (- 7) (* x1 1)) 0))
(assert (> (+ 1 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (> (+ 2 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))
(assert (> (+ 3 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (<= (+ (- 4) (* x1 1)) 0))
(assert (> (+ 4 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 5 (* x0 1)) 0))
(assert (<= (+ (- 3) (* x1 1)) 0))
(assert (> (+ 5 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 6 (* x0 1)) 0))
(assert (> (+ (- 2) (* x1 1)) 0))
(assert (>= (+ 7 (* x0 1)) 0))
(assert (> (+ (- 1) (* x1 1)) 0))
(assert (>= (+ 8 (* x0 1)) 0))
(assert (<= (+ 0 (* x1 1)) 0))

==============
Solving Branch is 22!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (>= (+ 0 (* x0 1)) 0))
(assert (<= (+ (- 8) (* x1 1)) 0))
(assert (> (+ 0 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (<= (+ (- 7) (* x1 1)) 0))
(assert (> (+ 1 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (> (+ 2 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))
(assert (> (+ 3 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (<= (+ (- 4) (* x1 1)) 0))
(assert (> (+ 4 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 5 (* x0 1)) 0))
(assert (<= (+ (- 3) (* x1 1)) 0))
(assert (> (+ 5 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 6 (* x0 1)) 0))
(assert (> (+ (- 2) (* x1 1)) 0))
(assert (>= (+ 7 (* x0 1)) 0))
(assert (> (+ (- 1) (* x1 1)) 0))
(assert (< (+ 8 (* x0 1)) 0))

==============
Solving Branch is 21!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (>= (+ 0 (* x0 1)) 0))
(assert (<= (+ (- 8) (* x1 1)) 0))
(assert (> (+ 0 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (<= (+ (- 7) (* x1 1)) 0))
(assert (> (+ 1 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (> (+ 2 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))
(assert (> (+ 3 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (<= (+ (- 4) (* x1 1)) 0))
(assert (> (+ 4 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 5 (* x0 1)) 0))
(assert (<= (+ (- 3) (* x1 1)) 0))
(assert (> (+ 5 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 6 (* x0 1)) 0))
(assert (> (+ (- 2) (* x1 1)) 0))
(assert (>= (+ 7 (* x0 1)) 0))
(assert (<= (+ (- 1) (* x1 1)) 0))

==============
Solving Branch is 20!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (>= (+ 0 (* x0 1)) 0))
(assert (<= (+ (- 8) (* x1 1)) 0))
(assert (> (+ 0 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (<= (+ (- 7) (* x1 1)) 0))
(assert (> (+ 1 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (> (+ 2 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))
(assert (> (+ 3 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (<= (+ (- 4) (* x1 1)) 0))
(assert (> (+ 4 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 5 (* x0 1)) 0))
(assert (<= (+ (- 3) (* x1 1)) 0))
(assert (> (+ 5 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 6 (* x0 1)) 0))
(assert (> (+ (- 2) (* x1 1)) 0))
(assert (< (+ 7 (* x0 1)) 0))

==============
after for loop
after pureDfs final
Solving Branch is 18!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (>= (+ 0 (* x0 1)) 0))
(assert (<= (+ (- 8) (* x1 1)) 0))
(assert (> (+ 0 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (<= (+ (- 7) (* x1 1)) 0))
(assert (> (+ 1 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (> (+ 2 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))
(assert (> (+ 3 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (<= (+ (- 4) (* x1 1)) 0))
(assert (> (+ 4 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 5 (* x0 1)) 0))
(assert (<= (+ (- 3) (* x1 1)) 0))
(assert (> (+ 5 (* x0 3) (* x1 1)) 0))
(assert (< (+ 6 (* x0 1)) 0))

==============
Solving Branch is 17!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (>= (+ 0 (* x0 1)) 0))
(assert (<= (+ (- 8) (* x1 1)) 0))
(assert (> (+ 0 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (<= (+ (- 7) (* x1 1)) 0))
(assert (> (+ 1 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (> (+ 2 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))
(assert (> (+ 3 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (<= (+ (- 4) (* x1 1)) 0))
(assert (> (+ 4 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 5 (* x0 1)) 0))
(assert (<= (+ (- 3) (* x1 1)) 0))
(assert (<= (+ 5 (* x0 3) (* x1 1)) 0))

==============
Solving Branch is 16!!!!
before solve at
sat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (>= (+ 0 (* x0 1)) 0))
(assert (<= (+ (- 8) (* x1 1)) 0))
(assert (> (+ 0 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (<= (+ (- 7) (* x1 1)) 0))
(assert (> (+ 1 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (> (+ 2 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))
(assert (> (+ 3 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (<= (+ (- 4) (* x1 1)) 0))
(assert (> (+ 4 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 5 (* x0 1)) 0))
(assert (> (+ (- 3) (* x1 1)) 0))
(rmodel->model-converter-wrapper
x1 -> 4
x0 -> 0
)

==============
after solve
Total Elapsed Time: 1.8475
  Search Time: 1.04617
  Solving Time: 0.481717
  Program Time: 0.319607
remote run 0
input string 0
4

parsin not complete!
branch size: 38
costraint size: 25
costraint size1: 25
costraint siz2e: 25
constraints_idx[0]:2constraints_idx[1]:3constraints_idx[2]:4constraints_idx[3]:6constraints_idx[4]:7constraints_idx[5]:8constraints_idx[6]:10constraints_idx[7]:11constraints_idx[8]:12constraints_idx[9]:14constraints_idx[10]:15constraints_idx[11]:16constraints_idx[12]:18constraints_idx[13]:19constraints_idx[14]:20constraints_idx[15]:22constraints_idx[16]:23constraints_idx[17]:25constraints_idx[18]:26constraints_idx[19]:28constraints_idx[20]:29constraints_idx[21]:31constraints_idx[22]:32constraints_idx[23]:34constraints_idx[24]:35costraint idx front: 2
parsing complete!
Iteration 17 (1s): covered 8 branches [1 reach funs, 10 reach branches].
path.constraints_idx[16]=23
-1 6 10 12 13 6 10 12 13 6 10 12 13 6 10 12 13 6 10 12 13 6 10 12 13 6 10 12 13 6 10 12 13 6 10 12 13 6 10 11 7 -2 
-1 6 10 12 13 6 10 12 13 6 10 12 13 6 10 12 13 6 10 12 13 6 10 11 6 10 11 6 10 11 6 10 11 6 10 11 7 -2 
Constraint Size : 25
files.byte = 1004
no hi..
nRcv : 1004
no break..
file_info.st_size : 1004
files.byte 1004
send done...
after run
after updatecover
after branch_idx
prev_ex 
cur_ex 
third branch_idx = 23
after checkprediction
after SymbolicPath
Solving Branch is 24!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (>= (+ 0 (* x0 1)) 0))
(assert (<= (+ (- 8) (* x1 1)) 0))
(assert (> (+ 0 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (<= (+ (- 7) (* x1 1)) 0))
(assert (> (+ 1 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (> (+ 2 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))
(assert (> (+ 3 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (<= (+ (- 4) (* x1 1)) 0))
(assert (> (+ 4 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 5 (* x0 1)) 0))
(assert (> (+ (- 3) (* x1 1)) 0))
(assert (>= (+ 6 (* x0 1)) 0))
(assert (> (+ (- 2) (* x1 1)) 0))
(assert (>= (+ 7 (* x0 1)) 0))
(assert (> (+ (- 1) (* x1 1)) 0))
(assert (>= (+ 8 (* x0 1)) 0))
(assert (> (+ 0 (* x1 1)) 0))
(assert (>= (+ 9 (* x0 1)) 0))
(assert (<= (+ 1 (* x1 1)) 0))

==============
Solving Branch is 23!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (>= (+ 0 (* x0 1)) 0))
(assert (<= (+ (- 8) (* x1 1)) 0))
(assert (> (+ 0 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (<= (+ (- 7) (* x1 1)) 0))
(assert (> (+ 1 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (> (+ 2 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))
(assert (> (+ 3 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (<= (+ (- 4) (* x1 1)) 0))
(assert (> (+ 4 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 5 (* x0 1)) 0))
(assert (> (+ (- 3) (* x1 1)) 0))
(assert (>= (+ 6 (* x0 1)) 0))
(assert (> (+ (- 2) (* x1 1)) 0))
(assert (>= (+ 7 (* x0 1)) 0))
(assert (> (+ (- 1) (* x1 1)) 0))
(assert (>= (+ 8 (* x0 1)) 0))
(assert (> (+ 0 (* x1 1)) 0))
(assert (< (+ 9 (* x0 1)) 0))

==============
Solving Branch is 22!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (>= (+ 0 (* x0 1)) 0))
(assert (<= (+ (- 8) (* x1 1)) 0))
(assert (> (+ 0 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (<= (+ (- 7) (* x1 1)) 0))
(assert (> (+ 1 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (> (+ 2 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))
(assert (> (+ 3 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (<= (+ (- 4) (* x1 1)) 0))
(assert (> (+ 4 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 5 (* x0 1)) 0))
(assert (> (+ (- 3) (* x1 1)) 0))
(assert (>= (+ 6 (* x0 1)) 0))
(assert (> (+ (- 2) (* x1 1)) 0))
(assert (>= (+ 7 (* x0 1)) 0))
(assert (> (+ (- 1) (* x1 1)) 0))
(assert (>= (+ 8 (* x0 1)) 0))
(assert (<= (+ 0 (* x1 1)) 0))

==============
Solving Branch is 21!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (>= (+ 0 (* x0 1)) 0))
(assert (<= (+ (- 8) (* x1 1)) 0))
(assert (> (+ 0 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (<= (+ (- 7) (* x1 1)) 0))
(assert (> (+ 1 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (> (+ 2 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))
(assert (> (+ 3 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (<= (+ (- 4) (* x1 1)) 0))
(assert (> (+ 4 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 5 (* x0 1)) 0))
(assert (> (+ (- 3) (* x1 1)) 0))
(assert (>= (+ 6 (* x0 1)) 0))
(assert (> (+ (- 2) (* x1 1)) 0))
(assert (>= (+ 7 (* x0 1)) 0))
(assert (> (+ (- 1) (* x1 1)) 0))
(assert (< (+ 8 (* x0 1)) 0))

==============
Solving Branch is 20!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (>= (+ 0 (* x0 1)) 0))
(assert (<= (+ (- 8) (* x1 1)) 0))
(assert (> (+ 0 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (<= (+ (- 7) (* x1 1)) 0))
(assert (> (+ 1 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (> (+ 2 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))
(assert (> (+ 3 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (<= (+ (- 4) (* x1 1)) 0))
(assert (> (+ 4 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 5 (* x0 1)) 0))
(assert (> (+ (- 3) (* x1 1)) 0))
(assert (>= (+ 6 (* x0 1)) 0))
(assert (> (+ (- 2) (* x1 1)) 0))
(assert (>= (+ 7 (* x0 1)) 0))
(assert (<= (+ (- 1) (* x1 1)) 0))

==============
Solving Branch is 19!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (>= (+ 0 (* x0 1)) 0))
(assert (<= (+ (- 8) (* x1 1)) 0))
(assert (> (+ 0 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (<= (+ (- 7) (* x1 1)) 0))
(assert (> (+ 1 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (> (+ 2 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))
(assert (> (+ 3 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (<= (+ (- 4) (* x1 1)) 0))
(assert (> (+ 4 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 5 (* x0 1)) 0))
(assert (> (+ (- 3) (* x1 1)) 0))
(assert (>= (+ 6 (* x0 1)) 0))
(assert (> (+ (- 2) (* x1 1)) 0))
(assert (< (+ 7 (* x0 1)) 0))

==============
Solving Branch is 18!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (>= (+ 0 (* x0 1)) 0))
(assert (<= (+ (- 8) (* x1 1)) 0))
(assert (> (+ 0 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (<= (+ (- 7) (* x1 1)) 0))
(assert (> (+ 1 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (> (+ 2 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))
(assert (> (+ 3 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (<= (+ (- 4) (* x1 1)) 0))
(assert (> (+ 4 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 5 (* x0 1)) 0))
(assert (> (+ (- 3) (* x1 1)) 0))
(assert (>= (+ 6 (* x0 1)) 0))
(assert (<= (+ (- 2) (* x1 1)) 0))

==============
Solving Branch is 17!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (>= (+ 0 (* x0 1)) 0))
(assert (<= (+ (- 8) (* x1 1)) 0))
(assert (> (+ 0 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (<= (+ (- 7) (* x1 1)) 0))
(assert (> (+ 1 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (> (+ 2 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))
(assert (> (+ 3 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (<= (+ (- 4) (* x1 1)) 0))
(assert (> (+ 4 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 5 (* x0 1)) 0))
(assert (> (+ (- 3) (* x1 1)) 0))
(assert (< (+ 6 (* x0 1)) 0))

==============
after for loop
after pureDfs final
Solving Branch is 15!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (>= (+ 0 (* x0 1)) 0))
(assert (<= (+ (- 8) (* x1 1)) 0))
(assert (> (+ 0 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (<= (+ (- 7) (* x1 1)) 0))
(assert (> (+ 1 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (> (+ 2 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))
(assert (> (+ 3 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (<= (+ (- 4) (* x1 1)) 0))
(assert (> (+ 4 (* x0 3) (* x1 1)) 0))
(assert (< (+ 5 (* x0 1)) 0))

==============
Solving Branch is 14!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (>= (+ 0 (* x0 1)) 0))
(assert (<= (+ (- 8) (* x1 1)) 0))
(assert (> (+ 0 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (<= (+ (- 7) (* x1 1)) 0))
(assert (> (+ 1 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (> (+ 2 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))
(assert (> (+ 3 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (<= (+ (- 4) (* x1 1)) 0))
(assert (<= (+ 4 (* x0 3) (* x1 1)) 0))

==============
Solving Branch is 13!!!!
before solve at
sat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (>= (+ 0 (* x0 1)) 0))
(assert (<= (+ (- 8) (* x1 1)) 0))
(assert (> (+ 0 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (<= (+ (- 7) (* x1 1)) 0))
(assert (> (+ 1 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (> (+ 2 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))
(assert (> (+ 3 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (> (+ (- 4) (* x1 1)) 0))
(rmodel->model-converter-wrapper
x1 -> 5
x0 -> 0
)

==============
after solve
Total Elapsed Time: 1.89539
  Search Time: 1.04791
  Solving Time: 0.50588
  Program Time: 0.341601
remote run 0
input string 0
5

parsin not complete!
branch size: 37
costraint size: 24
costraint size1: 24
costraint siz2e: 24
constraints_idx[0]:2constraints_idx[1]:3constraints_idx[2]:4constraints_idx[3]:6constraints_idx[4]:7constraints_idx[5]:8constraints_idx[6]:10constraints_idx[7]:11constraints_idx[8]:12constraints_idx[9]:14constraints_idx[10]:15constraints_idx[11]:16constraints_idx[12]:18constraints_idx[13]:19constraints_idx[14]:21constraints_idx[15]:22constraints_idx[16]:24constraints_idx[17]:25constraints_idx[18]:27constraints_idx[19]:28constraints_idx[20]:30constraints_idx[21]:31constraints_idx[22]:33constraints_idx[23]:34costraint idx front: 2
parsing complete!
Iteration 18 (2s): covered 8 branches [1 reach funs, 10 reach branches].
path.constraints_idx[13]=19
-1 6 10 12 13 6 10 12 13 6 10 12 13 6 10 12 13 6 10 12 13 6 10 12 13 6 10 12 13 6 10 12 13 6 10 12 13 6 10 11 7 -2 
-1 6 10 12 13 6 10 12 13 6 10 12 13 6 10 12 13 6 10 11 6 10 11 6 10 11 6 10 11 6 10 11 6 10 11 7 -2 
Constraint Size : 24
files.byte = 958
no hi..
nRcv : 958
no break..
file_info.st_size : 958
files.byte 958
send done...
after run
after updatecover
after branch_idx
prev_ex 
cur_ex 
third branch_idx = 19
after checkprediction
after SymbolicPath
Solving Branch is 23!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (>= (+ 0 (* x0 1)) 0))
(assert (<= (+ (- 8) (* x1 1)) 0))
(assert (> (+ 0 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (<= (+ (- 7) (* x1 1)) 0))
(assert (> (+ 1 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (> (+ 2 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))
(assert (> (+ 3 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (> (+ (- 4) (* x1 1)) 0))
(assert (>= (+ 5 (* x0 1)) 0))
(assert (> (+ (- 3) (* x1 1)) 0))
(assert (>= (+ 6 (* x0 1)) 0))
(assert (> (+ (- 2) (* x1 1)) 0))
(assert (>= (+ 7 (* x0 1)) 0))
(assert (> (+ (- 1) (* x1 1)) 0))
(assert (>= (+ 8 (* x0 1)) 0))
(assert (> (+ 0 (* x1 1)) 0))
(assert (>= (+ 9 (* x0 1)) 0))
(assert (<= (+ 1 (* x1 1)) 0))

==============
Solving Branch is 22!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (>= (+ 0 (* x0 1)) 0))
(assert (<= (+ (- 8) (* x1 1)) 0))
(assert (> (+ 0 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (<= (+ (- 7) (* x1 1)) 0))
(assert (> (+ 1 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (> (+ 2 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))
(assert (> (+ 3 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (> (+ (- 4) (* x1 1)) 0))
(assert (>= (+ 5 (* x0 1)) 0))
(assert (> (+ (- 3) (* x1 1)) 0))
(assert (>= (+ 6 (* x0 1)) 0))
(assert (> (+ (- 2) (* x1 1)) 0))
(assert (>= (+ 7 (* x0 1)) 0))
(assert (> (+ (- 1) (* x1 1)) 0))
(assert (>= (+ 8 (* x0 1)) 0))
(assert (> (+ 0 (* x1 1)) 0))
(assert (< (+ 9 (* x0 1)) 0))

==============
Solving Branch is 21!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (>= (+ 0 (* x0 1)) 0))
(assert (<= (+ (- 8) (* x1 1)) 0))
(assert (> (+ 0 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (<= (+ (- 7) (* x1 1)) 0))
(assert (> (+ 1 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (> (+ 2 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))
(assert (> (+ 3 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (> (+ (- 4) (* x1 1)) 0))
(assert (>= (+ 5 (* x0 1)) 0))
(assert (> (+ (- 3) (* x1 1)) 0))
(assert (>= (+ 6 (* x0 1)) 0))
(assert (> (+ (- 2) (* x1 1)) 0))
(assert (>= (+ 7 (* x0 1)) 0))
(assert (> (+ (- 1) (* x1 1)) 0))
(assert (>= (+ 8 (* x0 1)) 0))
(assert (<= (+ 0 (* x1 1)) 0))

==============
Solving Branch is 20!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (>= (+ 0 (* x0 1)) 0))
(assert (<= (+ (- 8) (* x1 1)) 0))
(assert (> (+ 0 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (<= (+ (- 7) (* x1 1)) 0))
(assert (> (+ 1 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (> (+ 2 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))
(assert (> (+ 3 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (> (+ (- 4) (* x1 1)) 0))
(assert (>= (+ 5 (* x0 1)) 0))
(assert (> (+ (- 3) (* x1 1)) 0))
(assert (>= (+ 6 (* x0 1)) 0))
(assert (> (+ (- 2) (* x1 1)) 0))
(assert (>= (+ 7 (* x0 1)) 0))
(assert (> (+ (- 1) (* x1 1)) 0))
(assert (< (+ 8 (* x0 1)) 0))

==============
Solving Branch is 19!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (>= (+ 0 (* x0 1)) 0))
(assert (<= (+ (- 8) (* x1 1)) 0))
(assert (> (+ 0 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (<= (+ (- 7) (* x1 1)) 0))
(assert (> (+ 1 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (> (+ 2 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))
(assert (> (+ 3 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (> (+ (- 4) (* x1 1)) 0))
(assert (>= (+ 5 (* x0 1)) 0))
(assert (> (+ (- 3) (* x1 1)) 0))
(assert (>= (+ 6 (* x0 1)) 0))
(assert (> (+ (- 2) (* x1 1)) 0))
(assert (>= (+ 7 (* x0 1)) 0))
(assert (<= (+ (- 1) (* x1 1)) 0))

==============
Solving Branch is 18!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (>= (+ 0 (* x0 1)) 0))
(assert (<= (+ (- 8) (* x1 1)) 0))
(assert (> (+ 0 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (<= (+ (- 7) (* x1 1)) 0))
(assert (> (+ 1 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (> (+ 2 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))
(assert (> (+ 3 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (> (+ (- 4) (* x1 1)) 0))
(assert (>= (+ 5 (* x0 1)) 0))
(assert (> (+ (- 3) (* x1 1)) 0))
(assert (>= (+ 6 (* x0 1)) 0))
(assert (> (+ (- 2) (* x1 1)) 0))
(assert (< (+ 7 (* x0 1)) 0))

==============
Solving Branch is 17!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (>= (+ 0 (* x0 1)) 0))
(assert (<= (+ (- 8) (* x1 1)) 0))
(assert (> (+ 0 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (<= (+ (- 7) (* x1 1)) 0))
(assert (> (+ 1 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (> (+ 2 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))
(assert (> (+ 3 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (> (+ (- 4) (* x1 1)) 0))
(assert (>= (+ 5 (* x0 1)) 0))
(assert (> (+ (- 3) (* x1 1)) 0))
(assert (>= (+ 6 (* x0 1)) 0))
(assert (<= (+ (- 2) (* x1 1)) 0))

==============
Solving Branch is 16!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (>= (+ 0 (* x0 1)) 0))
(assert (<= (+ (- 8) (* x1 1)) 0))
(assert (> (+ 0 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (<= (+ (- 7) (* x1 1)) 0))
(assert (> (+ 1 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (> (+ 2 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))
(assert (> (+ 3 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (> (+ (- 4) (* x1 1)) 0))
(assert (>= (+ 5 (* x0 1)) 0))
(assert (> (+ (- 3) (* x1 1)) 0))
(assert (< (+ 6 (* x0 1)) 0))

==============
Solving Branch is 15!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (>= (+ 0 (* x0 1)) 0))
(assert (<= (+ (- 8) (* x1 1)) 0))
(assert (> (+ 0 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (<= (+ (- 7) (* x1 1)) 0))
(assert (> (+ 1 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (> (+ 2 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))
(assert (> (+ 3 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (> (+ (- 4) (* x1 1)) 0))
(assert (>= (+ 5 (* x0 1)) 0))
(assert (<= (+ (- 3) (* x1 1)) 0))

==============
Solving Branch is 14!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (>= (+ 0 (* x0 1)) 0))
(assert (<= (+ (- 8) (* x1 1)) 0))
(assert (> (+ 0 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (<= (+ (- 7) (* x1 1)) 0))
(assert (> (+ 1 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (> (+ 2 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))
(assert (> (+ 3 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (> (+ (- 4) (* x1 1)) 0))
(assert (< (+ 5 (* x0 1)) 0))

==============
after for loop
after pureDfs final
Solving Branch is 12!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (>= (+ 0 (* x0 1)) 0))
(assert (<= (+ (- 8) (* x1 1)) 0))
(assert (> (+ 0 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (<= (+ (- 7) (* x1 1)) 0))
(assert (> (+ 1 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (> (+ 2 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))
(assert (> (+ 3 (* x0 3) (* x1 1)) 0))
(assert (< (+ 4 (* x0 1)) 0))

==============
Solving Branch is 11!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (>= (+ 0 (* x0 1)) 0))
(assert (<= (+ (- 8) (* x1 1)) 0))
(assert (> (+ 0 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (<= (+ (- 7) (* x1 1)) 0))
(assert (> (+ 1 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (> (+ 2 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))
(assert (<= (+ 3 (* x0 3) (* x1 1)) 0))

==============
Solving Branch is 10!!!!
before solve at
sat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (>= (+ 0 (* x0 1)) 0))
(assert (<= (+ (- 8) (* x1 1)) 0))
(assert (> (+ 0 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (<= (+ (- 7) (* x1 1)) 0))
(assert (> (+ 1 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (> (+ 2 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (> (+ (- 5) (* x1 1)) 0))
(rmodel->model-converter-wrapper
x1 -> 6
x0 -> 0
)

==============
after solve
Total Elapsed Time: 1.93591
  Search Time: 1.04917
  Solving Time: 0.529256
  Program Time: 0.357482
remote run 0
input string 0
6

parsin not complete!
branch size: 36
costraint size: 23
costraint size1: 23
costraint siz2e: 23
constraints_idx[0]:2constraints_idx[1]:3constraints_idx[2]:4constraints_idx[3]:6constraints_idx[4]:7constraints_idx[5]:8constraints_idx[6]:10constraints_idx[7]:11constraints_idx[8]:12constraints_idx[9]:14constraints_idx[10]:15constraints_idx[11]:17constraints_idx[12]:18constraints_idx[13]:20constraints_idx[14]:21constraints_idx[15]:23constraints_idx[16]:24constraints_idx[17]:26constraints_idx[18]:27constraints_idx[19]:29constraints_idx[20]:30constraints_idx[21]:32constraints_idx[22]:33costraint idx front: 2
parsing complete!
Iteration 19 (2s): covered 8 branches [1 reach funs, 10 reach branches].
path.constraints_idx[10]=15
-1 6 10 12 13 6 10 12 13 6 10 12 13 6 10 12 13 6 10 12 13 6 10 12 13 6 10 12 13 6 10 12 13 6 10 12 13 6 10 11 7 -2 
-1 6 10 12 13 6 10 12 13 6 10 12 13 6 10 11 6 10 11 6 10 11 6 10 11 6 10 11 6 10 11 6 10 11 7 -2 
Constraint Size : 23
files.byte = 912
no hi..
nRcv : 912
no break..
file_info.st_size : 912
files.byte 912
send done...
after run
after updatecover
after branch_idx
prev_ex 
cur_ex 
third branch_idx = 15
after checkprediction
after SymbolicPath
Solving Branch is 22!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (>= (+ 0 (* x0 1)) 0))
(assert (<= (+ (- 8) (* x1 1)) 0))
(assert (> (+ 0 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (<= (+ (- 7) (* x1 1)) 0))
(assert (> (+ 1 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (> (+ 2 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (> (+ (- 5) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (> (+ (- 4) (* x1 1)) 0))
(assert (>= (+ 5 (* x0 1)) 0))
(assert (> (+ (- 3) (* x1 1)) 0))
(assert (>= (+ 6 (* x0 1)) 0))
(assert (> (+ (- 2) (* x1 1)) 0))
(assert (>= (+ 7 (* x0 1)) 0))
(assert (> (+ (- 1) (* x1 1)) 0))
(assert (>= (+ 8 (* x0 1)) 0))
(assert (> (+ 0 (* x1 1)) 0))
(assert (>= (+ 9 (* x0 1)) 0))
(assert (<= (+ 1 (* x1 1)) 0))

==============
Solving Branch is 21!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (>= (+ 0 (* x0 1)) 0))
(assert (<= (+ (- 8) (* x1 1)) 0))
(assert (> (+ 0 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (<= (+ (- 7) (* x1 1)) 0))
(assert (> (+ 1 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (> (+ 2 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (> (+ (- 5) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (> (+ (- 4) (* x1 1)) 0))
(assert (>= (+ 5 (* x0 1)) 0))
(assert (> (+ (- 3) (* x1 1)) 0))
(assert (>= (+ 6 (* x0 1)) 0))
(assert (> (+ (- 2) (* x1 1)) 0))
(assert (>= (+ 7 (* x0 1)) 0))
(assert (> (+ (- 1) (* x1 1)) 0))
(assert (>= (+ 8 (* x0 1)) 0))
(assert (> (+ 0 (* x1 1)) 0))
(assert (< (+ 9 (* x0 1)) 0))

==============
Solving Branch is 20!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (>= (+ 0 (* x0 1)) 0))
(assert (<= (+ (- 8) (* x1 1)) 0))
(assert (> (+ 0 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (<= (+ (- 7) (* x1 1)) 0))
(assert (> (+ 1 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (> (+ 2 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (> (+ (- 5) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (> (+ (- 4) (* x1 1)) 0))
(assert (>= (+ 5 (* x0 1)) 0))
(assert (> (+ (- 3) (* x1 1)) 0))
(assert (>= (+ 6 (* x0 1)) 0))
(assert (> (+ (- 2) (* x1 1)) 0))
(assert (>= (+ 7 (* x0 1)) 0))
(assert (> (+ (- 1) (* x1 1)) 0))
(assert (>= (+ 8 (* x0 1)) 0))
(assert (<= (+ 0 (* x1 1)) 0))

==============
Solving Branch is 19!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (>= (+ 0 (* x0 1)) 0))
(assert (<= (+ (- 8) (* x1 1)) 0))
(assert (> (+ 0 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (<= (+ (- 7) (* x1 1)) 0))
(assert (> (+ 1 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (> (+ 2 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (> (+ (- 5) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (> (+ (- 4) (* x1 1)) 0))
(assert (>= (+ 5 (* x0 1)) 0))
(assert (> (+ (- 3) (* x1 1)) 0))
(assert (>= (+ 6 (* x0 1)) 0))
(assert (> (+ (- 2) (* x1 1)) 0))
(assert (>= (+ 7 (* x0 1)) 0))
(assert (> (+ (- 1) (* x1 1)) 0))
(assert (< (+ 8 (* x0 1)) 0))

==============
Solving Branch is 18!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (>= (+ 0 (* x0 1)) 0))
(assert (<= (+ (- 8) (* x1 1)) 0))
(assert (> (+ 0 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (<= (+ (- 7) (* x1 1)) 0))
(assert (> (+ 1 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (> (+ 2 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (> (+ (- 5) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (> (+ (- 4) (* x1 1)) 0))
(assert (>= (+ 5 (* x0 1)) 0))
(assert (> (+ (- 3) (* x1 1)) 0))
(assert (>= (+ 6 (* x0 1)) 0))
(assert (> (+ (- 2) (* x1 1)) 0))
(assert (>= (+ 7 (* x0 1)) 0))
(assert (<= (+ (- 1) (* x1 1)) 0))

==============
Solving Branch is 17!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (>= (+ 0 (* x0 1)) 0))
(assert (<= (+ (- 8) (* x1 1)) 0))
(assert (> (+ 0 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (<= (+ (- 7) (* x1 1)) 0))
(assert (> (+ 1 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (> (+ 2 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (> (+ (- 5) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (> (+ (- 4) (* x1 1)) 0))
(assert (>= (+ 5 (* x0 1)) 0))
(assert (> (+ (- 3) (* x1 1)) 0))
(assert (>= (+ 6 (* x0 1)) 0))
(assert (> (+ (- 2) (* x1 1)) 0))
(assert (< (+ 7 (* x0 1)) 0))

==============
Solving Branch is 16!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (>= (+ 0 (* x0 1)) 0))
(assert (<= (+ (- 8) (* x1 1)) 0))
(assert (> (+ 0 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (<= (+ (- 7) (* x1 1)) 0))
(assert (> (+ 1 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (> (+ 2 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (> (+ (- 5) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (> (+ (- 4) (* x1 1)) 0))
(assert (>= (+ 5 (* x0 1)) 0))
(assert (> (+ (- 3) (* x1 1)) 0))
(assert (>= (+ 6 (* x0 1)) 0))
(assert (<= (+ (- 2) (* x1 1)) 0))

==============
Solving Branch is 15!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (>= (+ 0 (* x0 1)) 0))
(assert (<= (+ (- 8) (* x1 1)) 0))
(assert (> (+ 0 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (<= (+ (- 7) (* x1 1)) 0))
(assert (> (+ 1 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (> (+ 2 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (> (+ (- 5) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (> (+ (- 4) (* x1 1)) 0))
(assert (>= (+ 5 (* x0 1)) 0))
(assert (> (+ (- 3) (* x1 1)) 0))
(assert (< (+ 6 (* x0 1)) 0))

==============
Solving Branch is 14!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (>= (+ 0 (* x0 1)) 0))
(assert (<= (+ (- 8) (* x1 1)) 0))
(assert (> (+ 0 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (<= (+ (- 7) (* x1 1)) 0))
(assert (> (+ 1 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (> (+ 2 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (> (+ (- 5) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (> (+ (- 4) (* x1 1)) 0))
(assert (>= (+ 5 (* x0 1)) 0))
(assert (<= (+ (- 3) (* x1 1)) 0))

==============
Solving Branch is 13!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (>= (+ 0 (* x0 1)) 0))
(assert (<= (+ (- 8) (* x1 1)) 0))
(assert (> (+ 0 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (<= (+ (- 7) (* x1 1)) 0))
(assert (> (+ 1 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (> (+ 2 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (> (+ (- 5) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (> (+ (- 4) (* x1 1)) 0))
(assert (< (+ 5 (* x0 1)) 0))

==============
Solving Branch is 12!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (>= (+ 0 (* x0 1)) 0))
(assert (<= (+ (- 8) (* x1 1)) 0))
(assert (> (+ 0 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (<= (+ (- 7) (* x1 1)) 0))
(assert (> (+ 1 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (> (+ 2 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (> (+ (- 5) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (<= (+ (- 4) (* x1 1)) 0))

==============
Solving Branch is 11!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (>= (+ 0 (* x0 1)) 0))
(assert (<= (+ (- 8) (* x1 1)) 0))
(assert (> (+ 0 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (<= (+ (- 7) (* x1 1)) 0))
(assert (> (+ 1 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (> (+ 2 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (> (+ (- 5) (* x1 1)) 0))
(assert (< (+ 4 (* x0 1)) 0))

==============
after for loop
after pureDfs final
Solving Branch is 9!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (>= (+ 0 (* x0 1)) 0))
(assert (<= (+ (- 8) (* x1 1)) 0))
(assert (> (+ 0 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (<= (+ (- 7) (* x1 1)) 0))
(assert (> (+ 1 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (> (+ 2 (* x0 3) (* x1 1)) 0))
(assert (< (+ 3 (* x0 1)) 0))

==============
Solving Branch is 8!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (>= (+ 0 (* x0 1)) 0))
(assert (<= (+ (- 8) (* x1 1)) 0))
(assert (> (+ 0 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (<= (+ (- 7) (* x1 1)) 0))
(assert (> (+ 1 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (<= (+ 2 (* x0 3) (* x1 1)) 0))

==============
Solving Branch is 7!!!!
before solve at
sat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (>= (+ 0 (* x0 1)) 0))
(assert (<= (+ (- 8) (* x1 1)) 0))
(assert (> (+ 0 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (<= (+ (- 7) (* x1 1)) 0))
(assert (> (+ 1 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (> (+ (- 6) (* x1 1)) 0))
(rmodel->model-converter-wrapper
x1 -> 7
x0 -> 0
)

==============
after solve
Total Elapsed Time: 1.98367
  Search Time: 1.05074
  Solving Time: 0.557299
  Program Time: 0.375626
remote run 0
input string 0
7

parsin not complete!
branch size: 35
costraint size: 22
costraint size1: 22
costraint siz2e: 22
constraints_idx[0]:2constraints_idx[1]:3constraints_idx[2]:4constraints_idx[3]:6constraints_idx[4]:7constraints_idx[5]:8constraints_idx[6]:10constraints_idx[7]:11constraints_idx[8]:13constraints_idx[9]:14constraints_idx[10]:16constraints_idx[11]:17constraints_idx[12]:19constraints_idx[13]:20constraints_idx[14]:22constraints_idx[15]:23constraints_idx[16]:25constraints_idx[17]:26constraints_idx[18]:28constraints_idx[19]:29constraints_idx[20]:31constraints_idx[21]:32costraint idx front: 2
parsing complete!
Iteration 20 (2s): covered 8 branches [1 reach funs, 10 reach branches].
path.constraints_idx[7]=11
-1 6 10 12 13 6 10 12 13 6 10 12 13 6 10 12 13 6 10 12 13 6 10 12 13 6 10 12 13 6 10 12 13 6 10 12 13 6 10 11 7 -2 
-1 6 10 12 13 6 10 12 13 6 10 11 6 10 11 6 10 11 6 10 11 6 10 11 6 10 11 6 10 11 6 10 11 7 -2 
Constraint Size : 22
files.byte = 866
no hi..
nRcv : 866
no break..
file_info.st_size : 866
files.byte 866
send done...
after run
after updatecover
after branch_idx
prev_ex 
cur_ex 
third branch_idx = 11
after checkprediction
after SymbolicPath
Solving Branch is 21!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (>= (+ 0 (* x0 1)) 0))
(assert (<= (+ (- 8) (* x1 1)) 0))
(assert (> (+ 0 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (<= (+ (- 7) (* x1 1)) 0))
(assert (> (+ 1 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (> (+ (- 6) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (> (+ (- 5) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (> (+ (- 4) (* x1 1)) 0))
(assert (>= (+ 5 (* x0 1)) 0))
(assert (> (+ (- 3) (* x1 1)) 0))
(assert (>= (+ 6 (* x0 1)) 0))
(assert (> (+ (- 2) (* x1 1)) 0))
(assert (>= (+ 7 (* x0 1)) 0))
(assert (> (+ (- 1) (* x1 1)) 0))
(assert (>= (+ 8 (* x0 1)) 0))
(assert (> (+ 0 (* x1 1)) 0))
(assert (>= (+ 9 (* x0 1)) 0))
(assert (<= (+ 1 (* x1 1)) 0))

==============
Solving Branch is 20!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (>= (+ 0 (* x0 1)) 0))
(assert (<= (+ (- 8) (* x1 1)) 0))
(assert (> (+ 0 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (<= (+ (- 7) (* x1 1)) 0))
(assert (> (+ 1 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (> (+ (- 6) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (> (+ (- 5) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (> (+ (- 4) (* x1 1)) 0))
(assert (>= (+ 5 (* x0 1)) 0))
(assert (> (+ (- 3) (* x1 1)) 0))
(assert (>= (+ 6 (* x0 1)) 0))
(assert (> (+ (- 2) (* x1 1)) 0))
(assert (>= (+ 7 (* x0 1)) 0))
(assert (> (+ (- 1) (* x1 1)) 0))
(assert (>= (+ 8 (* x0 1)) 0))
(assert (> (+ 0 (* x1 1)) 0))
(assert (< (+ 9 (* x0 1)) 0))

==============
Solving Branch is 19!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (>= (+ 0 (* x0 1)) 0))
(assert (<= (+ (- 8) (* x1 1)) 0))
(assert (> (+ 0 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (<= (+ (- 7) (* x1 1)) 0))
(assert (> (+ 1 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (> (+ (- 6) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (> (+ (- 5) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (> (+ (- 4) (* x1 1)) 0))
(assert (>= (+ 5 (* x0 1)) 0))
(assert (> (+ (- 3) (* x1 1)) 0))
(assert (>= (+ 6 (* x0 1)) 0))
(assert (> (+ (- 2) (* x1 1)) 0))
(assert (>= (+ 7 (* x0 1)) 0))
(assert (> (+ (- 1) (* x1 1)) 0))
(assert (>= (+ 8 (* x0 1)) 0))
(assert (<= (+ 0 (* x1 1)) 0))

==============
Solving Branch is 18!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (>= (+ 0 (* x0 1)) 0))
(assert (<= (+ (- 8) (* x1 1)) 0))
(assert (> (+ 0 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (<= (+ (- 7) (* x1 1)) 0))
(assert (> (+ 1 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (> (+ (- 6) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (> (+ (- 5) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (> (+ (- 4) (* x1 1)) 0))
(assert (>= (+ 5 (* x0 1)) 0))
(assert (> (+ (- 3) (* x1 1)) 0))
(assert (>= (+ 6 (* x0 1)) 0))
(assert (> (+ (- 2) (* x1 1)) 0))
(assert (>= (+ 7 (* x0 1)) 0))
(assert (> (+ (- 1) (* x1 1)) 0))
(assert (< (+ 8 (* x0 1)) 0))

==============
Solving Branch is 17!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (>= (+ 0 (* x0 1)) 0))
(assert (<= (+ (- 8) (* x1 1)) 0))
(assert (> (+ 0 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (<= (+ (- 7) (* x1 1)) 0))
(assert (> (+ 1 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (> (+ (- 6) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (> (+ (- 5) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (> (+ (- 4) (* x1 1)) 0))
(assert (>= (+ 5 (* x0 1)) 0))
(assert (> (+ (- 3) (* x1 1)) 0))
(assert (>= (+ 6 (* x0 1)) 0))
(assert (> (+ (- 2) (* x1 1)) 0))
(assert (>= (+ 7 (* x0 1)) 0))
(assert (<= (+ (- 1) (* x1 1)) 0))

==============
Solving Branch is 16!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (>= (+ 0 (* x0 1)) 0))
(assert (<= (+ (- 8) (* x1 1)) 0))
(assert (> (+ 0 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (<= (+ (- 7) (* x1 1)) 0))
(assert (> (+ 1 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (> (+ (- 6) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (> (+ (- 5) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (> (+ (- 4) (* x1 1)) 0))
(assert (>= (+ 5 (* x0 1)) 0))
(assert (> (+ (- 3) (* x1 1)) 0))
(assert (>= (+ 6 (* x0 1)) 0))
(assert (> (+ (- 2) (* x1 1)) 0))
(assert (< (+ 7 (* x0 1)) 0))

==============
Solving Branch is 15!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (>= (+ 0 (* x0 1)) 0))
(assert (<= (+ (- 8) (* x1 1)) 0))
(assert (> (+ 0 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (<= (+ (- 7) (* x1 1)) 0))
(assert (> (+ 1 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (> (+ (- 6) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (> (+ (- 5) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (> (+ (- 4) (* x1 1)) 0))
(assert (>= (+ 5 (* x0 1)) 0))
(assert (> (+ (- 3) (* x1 1)) 0))
(assert (>= (+ 6 (* x0 1)) 0))
(assert (<= (+ (- 2) (* x1 1)) 0))

==============
Solving Branch is 14!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (>= (+ 0 (* x0 1)) 0))
(assert (<= (+ (- 8) (* x1 1)) 0))
(assert (> (+ 0 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (<= (+ (- 7) (* x1 1)) 0))
(assert (> (+ 1 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (> (+ (- 6) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (> (+ (- 5) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (> (+ (- 4) (* x1 1)) 0))
(assert (>= (+ 5 (* x0 1)) 0))
(assert (> (+ (- 3) (* x1 1)) 0))
(assert (< (+ 6 (* x0 1)) 0))

==============
Solving Branch is 13!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (>= (+ 0 (* x0 1)) 0))
(assert (<= (+ (- 8) (* x1 1)) 0))
(assert (> (+ 0 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (<= (+ (- 7) (* x1 1)) 0))
(assert (> (+ 1 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (> (+ (- 6) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (> (+ (- 5) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (> (+ (- 4) (* x1 1)) 0))
(assert (>= (+ 5 (* x0 1)) 0))
(assert (<= (+ (- 3) (* x1 1)) 0))

==============
Solving Branch is 12!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (>= (+ 0 (* x0 1)) 0))
(assert (<= (+ (- 8) (* x1 1)) 0))
(assert (> (+ 0 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (<= (+ (- 7) (* x1 1)) 0))
(assert (> (+ 1 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (> (+ (- 6) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (> (+ (- 5) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (> (+ (- 4) (* x1 1)) 0))
(assert (< (+ 5 (* x0 1)) 0))

==============
Solving Branch is 11!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (>= (+ 0 (* x0 1)) 0))
(assert (<= (+ (- 8) (* x1 1)) 0))
(assert (> (+ 0 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (<= (+ (- 7) (* x1 1)) 0))
(assert (> (+ 1 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (> (+ (- 6) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (> (+ (- 5) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (<= (+ (- 4) (* x1 1)) 0))

==============
Solving Branch is 10!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (>= (+ 0 (* x0 1)) 0))
(assert (<= (+ (- 8) (* x1 1)) 0))
(assert (> (+ 0 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (<= (+ (- 7) (* x1 1)) 0))
(assert (> (+ 1 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (> (+ (- 6) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (> (+ (- 5) (* x1 1)) 0))
(assert (< (+ 4 (* x0 1)) 0))

==============
Solving Branch is 9!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (>= (+ 0 (* x0 1)) 0))
(assert (<= (+ (- 8) (* x1 1)) 0))
(assert (> (+ 0 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (<= (+ (- 7) (* x1 1)) 0))
(assert (> (+ 1 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (> (+ (- 6) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))

==============
Solving Branch is 8!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (>= (+ 0 (* x0 1)) 0))
(assert (<= (+ (- 8) (* x1 1)) 0))
(assert (> (+ 0 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (<= (+ (- 7) (* x1 1)) 0))
(assert (> (+ 1 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (> (+ (- 6) (* x1 1)) 0))
(assert (< (+ 3 (* x0 1)) 0))

==============
after for loop
after pureDfs final
Solving Branch is 6!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (>= (+ 0 (* x0 1)) 0))
(assert (<= (+ (- 8) (* x1 1)) 0))
(assert (> (+ 0 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (<= (+ (- 7) (* x1 1)) 0))
(assert (> (+ 1 (* x0 3) (* x1 1)) 0))
(assert (< (+ 2 (* x0 1)) 0))

==============
Solving Branch is 5!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (>= (+ 0 (* x0 1)) 0))
(assert (<= (+ (- 8) (* x1 1)) 0))
(assert (> (+ 0 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (<= (+ (- 7) (* x1 1)) 0))
(assert (<= (+ 1 (* x0 3) (* x1 1)) 0))

==============
Solving Branch is 4!!!!
before solve at
sat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (>= (+ 0 (* x0 1)) 0))
(assert (<= (+ (- 8) (* x1 1)) 0))
(assert (> (+ 0 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (> (+ (- 7) (* x1 1)) 0))
(rmodel->model-converter-wrapper
x1 -> 8
x0 -> 0
)

==============
after solve
Total Elapsed Time: 2.03449
  Search Time: 1.05247
  Solving Time: 0.586616
  Program Time: 0.395399
remote run 0
input string 0
8

parsin not complete!
branch size: 34
costraint size: 21
costraint size1: 21
costraint siz2e: 21
constraints_idx[0]:2constraints_idx[1]:3constraints_idx[2]:4constraints_idx[3]:6constraints_idx[4]:7constraints_idx[5]:9constraints_idx[6]:10constraints_idx[7]:12constraints_idx[8]:13constraints_idx[9]:15constraints_idx[10]:16constraints_idx[11]:18constraints_idx[12]:19constraints_idx[13]:21constraints_idx[14]:22constraints_idx[15]:24constraints_idx[16]:25constraints_idx[17]:27constraints_idx[18]:28constraints_idx[19]:30constraints_idx[20]:31costraint idx front: 2
parsing complete!
Iteration 21 (2s): covered 8 branches [1 reach funs, 10 reach branches].
path.constraints_idx[4]=7
-1 6 10 12 13 6 10 12 13 6 10 12 13 6 10 12 13 6 10 12 13 6 10 12 13 6 10 12 13 6 10 12 13 6 10 12 13 6 10 11 7 -2 
-1 6 10 12 13 6 10 11 6 10 11 6 10 11 6 10 11 6 10 11 6 10 11 6 10 11 6 10 11 6 10 11 7 -2 
Constraint Size : 21
files.byte = 820
no hi..
nRcv : 820
no break..
file_info.st_size : 820
files.byte 820
send done...
after run
after updatecover
after branch_idx
prev_ex 
cur_ex 
third branch_idx = 7
after checkprediction
after SymbolicPath
Solving Branch is 20!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (>= (+ 0 (* x0 1)) 0))
(assert (<= (+ (- 8) (* x1 1)) 0))
(assert (> (+ 0 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (> (+ (- 7) (* x1 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (> (+ (- 6) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (> (+ (- 5) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (> (+ (- 4) (* x1 1)) 0))
(assert (>= (+ 5 (* x0 1)) 0))
(assert (> (+ (- 3) (* x1 1)) 0))
(assert (>= (+ 6 (* x0 1)) 0))
(assert (> (+ (- 2) (* x1 1)) 0))
(assert (>= (+ 7 (* x0 1)) 0))
(assert (> (+ (- 1) (* x1 1)) 0))
(assert (>= (+ 8 (* x0 1)) 0))
(assert (> (+ 0 (* x1 1)) 0))
(assert (>= (+ 9 (* x0 1)) 0))
(assert (<= (+ 1 (* x1 1)) 0))

==============
Solving Branch is 19!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (>= (+ 0 (* x0 1)) 0))
(assert (<= (+ (- 8) (* x1 1)) 0))
(assert (> (+ 0 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (> (+ (- 7) (* x1 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (> (+ (- 6) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (> (+ (- 5) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (> (+ (- 4) (* x1 1)) 0))
(assert (>= (+ 5 (* x0 1)) 0))
(assert (> (+ (- 3) (* x1 1)) 0))
(assert (>= (+ 6 (* x0 1)) 0))
(assert (> (+ (- 2) (* x1 1)) 0))
(assert (>= (+ 7 (* x0 1)) 0))
(assert (> (+ (- 1) (* x1 1)) 0))
(assert (>= (+ 8 (* x0 1)) 0))
(assert (> (+ 0 (* x1 1)) 0))
(assert (< (+ 9 (* x0 1)) 0))

==============
Solving Branch is 18!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (>= (+ 0 (* x0 1)) 0))
(assert (<= (+ (- 8) (* x1 1)) 0))
(assert (> (+ 0 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (> (+ (- 7) (* x1 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (> (+ (- 6) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (> (+ (- 5) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (> (+ (- 4) (* x1 1)) 0))
(assert (>= (+ 5 (* x0 1)) 0))
(assert (> (+ (- 3) (* x1 1)) 0))
(assert (>= (+ 6 (* x0 1)) 0))
(assert (> (+ (- 2) (* x1 1)) 0))
(assert (>= (+ 7 (* x0 1)) 0))
(assert (> (+ (- 1) (* x1 1)) 0))
(assert (>= (+ 8 (* x0 1)) 0))
(assert (<= (+ 0 (* x1 1)) 0))

==============
Solving Branch is 17!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (>= (+ 0 (* x0 1)) 0))
(assert (<= (+ (- 8) (* x1 1)) 0))
(assert (> (+ 0 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (> (+ (- 7) (* x1 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (> (+ (- 6) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (> (+ (- 5) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (> (+ (- 4) (* x1 1)) 0))
(assert (>= (+ 5 (* x0 1)) 0))
(assert (> (+ (- 3) (* x1 1)) 0))
(assert (>= (+ 6 (* x0 1)) 0))
(assert (> (+ (- 2) (* x1 1)) 0))
(assert (>= (+ 7 (* x0 1)) 0))
(assert (> (+ (- 1) (* x1 1)) 0))
(assert (< (+ 8 (* x0 1)) 0))

==============
Solving Branch is 16!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (>= (+ 0 (* x0 1)) 0))
(assert (<= (+ (- 8) (* x1 1)) 0))
(assert (> (+ 0 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (> (+ (- 7) (* x1 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (> (+ (- 6) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (> (+ (- 5) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (> (+ (- 4) (* x1 1)) 0))
(assert (>= (+ 5 (* x0 1)) 0))
(assert (> (+ (- 3) (* x1 1)) 0))
(assert (>= (+ 6 (* x0 1)) 0))
(assert (> (+ (- 2) (* x1 1)) 0))
(assert (>= (+ 7 (* x0 1)) 0))
(assert (<= (+ (- 1) (* x1 1)) 0))

==============
Solving Branch is 15!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (>= (+ 0 (* x0 1)) 0))
(assert (<= (+ (- 8) (* x1 1)) 0))
(assert (> (+ 0 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (> (+ (- 7) (* x1 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (> (+ (- 6) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (> (+ (- 5) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (> (+ (- 4) (* x1 1)) 0))
(assert (>= (+ 5 (* x0 1)) 0))
(assert (> (+ (- 3) (* x1 1)) 0))
(assert (>= (+ 6 (* x0 1)) 0))
(assert (> (+ (- 2) (* x1 1)) 0))
(assert (< (+ 7 (* x0 1)) 0))

==============
Solving Branch is 14!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (>= (+ 0 (* x0 1)) 0))
(assert (<= (+ (- 8) (* x1 1)) 0))
(assert (> (+ 0 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (> (+ (- 7) (* x1 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (> (+ (- 6) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (> (+ (- 5) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (> (+ (- 4) (* x1 1)) 0))
(assert (>= (+ 5 (* x0 1)) 0))
(assert (> (+ (- 3) (* x1 1)) 0))
(assert (>= (+ 6 (* x0 1)) 0))
(assert (<= (+ (- 2) (* x1 1)) 0))

==============
Solving Branch is 13!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (>= (+ 0 (* x0 1)) 0))
(assert (<= (+ (- 8) (* x1 1)) 0))
(assert (> (+ 0 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (> (+ (- 7) (* x1 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (> (+ (- 6) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (> (+ (- 5) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (> (+ (- 4) (* x1 1)) 0))
(assert (>= (+ 5 (* x0 1)) 0))
(assert (> (+ (- 3) (* x1 1)) 0))
(assert (< (+ 6 (* x0 1)) 0))

==============
Solving Branch is 12!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (>= (+ 0 (* x0 1)) 0))
(assert (<= (+ (- 8) (* x1 1)) 0))
(assert (> (+ 0 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (> (+ (- 7) (* x1 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (> (+ (- 6) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (> (+ (- 5) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (> (+ (- 4) (* x1 1)) 0))
(assert (>= (+ 5 (* x0 1)) 0))
(assert (<= (+ (- 3) (* x1 1)) 0))

==============
Solving Branch is 11!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (>= (+ 0 (* x0 1)) 0))
(assert (<= (+ (- 8) (* x1 1)) 0))
(assert (> (+ 0 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (> (+ (- 7) (* x1 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (> (+ (- 6) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (> (+ (- 5) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (> (+ (- 4) (* x1 1)) 0))
(assert (< (+ 5 (* x0 1)) 0))

==============
Solving Branch is 10!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (>= (+ 0 (* x0 1)) 0))
(assert (<= (+ (- 8) (* x1 1)) 0))
(assert (> (+ 0 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (> (+ (- 7) (* x1 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (> (+ (- 6) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (> (+ (- 5) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (<= (+ (- 4) (* x1 1)) 0))

==============
Solving Branch is 9!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (>= (+ 0 (* x0 1)) 0))
(assert (<= (+ (- 8) (* x1 1)) 0))
(assert (> (+ 0 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (> (+ (- 7) (* x1 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (> (+ (- 6) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (> (+ (- 5) (* x1 1)) 0))
(assert (< (+ 4 (* x0 1)) 0))

==============
Solving Branch is 8!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (>= (+ 0 (* x0 1)) 0))
(assert (<= (+ (- 8) (* x1 1)) 0))
(assert (> (+ 0 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (> (+ (- 7) (* x1 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (> (+ (- 6) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))

==============
Solving Branch is 7!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (>= (+ 0 (* x0 1)) 0))
(assert (<= (+ (- 8) (* x1 1)) 0))
(assert (> (+ 0 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (> (+ (- 7) (* x1 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (> (+ (- 6) (* x1 1)) 0))
(assert (< (+ 3 (* x0 1)) 0))

==============
Solving Branch is 6!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (>= (+ 0 (* x0 1)) 0))
(assert (<= (+ (- 8) (* x1 1)) 0))
(assert (> (+ 0 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (> (+ (- 7) (* x1 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))

==============
Solving Branch is 5!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (>= (+ 0 (* x0 1)) 0))
(assert (<= (+ (- 8) (* x1 1)) 0))
(assert (> (+ 0 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (> (+ (- 7) (* x1 1)) 0))
(assert (< (+ 2 (* x0 1)) 0))

==============
after for loop
after pureDfs final
Solving Branch is 3!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (>= (+ 0 (* x0 1)) 0))
(assert (<= (+ (- 8) (* x1 1)) 0))
(assert (> (+ 0 (* x0 3) (* x1 1)) 0))
(assert (< (+ 1 (* x0 1)) 0))

==============
after for loop
after pureDfs final
Solving Branch is 1!!!!
before solve at
sat : (declare-fun x1 () Int)
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (> (+ (- 8) (* x1 1)) 0))
(rmodel->model-converter-wrapper
x1 -> 9
)

==============
after solve
Total Elapsed Time: 2.08515
  Search Time: 1.05392
  Solving Time: 0.618349
  Program Time: 0.412881
remote run 0
input string 0
9

parsin not complete!
branch size: 33
costraint size: 20
costraint size1: 20
costraint siz2e: 20
constraints_idx[0]:2constraints_idx[1]:3constraints_idx[2]:5constraints_idx[3]:6constraints_idx[4]:8constraints_idx[5]:9constraints_idx[6]:11constraints_idx[7]:12constraints_idx[8]:14constraints_idx[9]:15constraints_idx[10]:17constraints_idx[11]:18constraints_idx[12]:20constraints_idx[13]:21constraints_idx[14]:23constraints_idx[15]:24constraints_idx[16]:26constraints_idx[17]:27constraints_idx[18]:29constraints_idx[19]:30costraint idx front: 2
parsing complete!
Iteration 22 (2s): covered 8 branches [1 reach funs, 10 reach branches].
path.constraints_idx[1]=3
-1 6 10 12 14 15 6 10 12 13 6 10 12 13 6 10 12 13 6 10 12 13 6 10 12 13 6 10 12 13 6 10 12 13 6 10 12 13 6 10 11 7 -2 
-1 6 10 11 6 10 11 6 10 11 6 10 11 6 10 11 6 10 11 6 10 11 6 10 11 6 10 11 6 10 11 7 -2 
Constraint Size : 20
files.byte = 774
no hi..
nRcv : 774
no break..
file_info.st_size : 774
files.byte 774
send done...
after run
after updatecover
after branch_idx
prev_ex 
cur_ex 
third branch_idx = 3
after checkprediction
after SymbolicPath
Solving Branch is 19!!!!
before solve at
unsat : (declare-fun x1 () Int)
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (> (+ (- 8) (* x1 1)) 0))
(assert (> (+ (- 7) (* x1 1)) 0))
(assert (> (+ (- 6) (* x1 1)) 0))
(assert (> (+ (- 5) (* x1 1)) 0))
(assert (> (+ (- 4) (* x1 1)) 0))
(assert (> (+ (- 3) (* x1 1)) 0))
(assert (> (+ (- 2) (* x1 1)) 0))
(assert (> (+ (- 1) (* x1 1)) 0))
(assert (> (+ 0 (* x1 1)) 0))
(assert (<= (+ 1 (* x1 1)) 0))

==============
Solving Branch is 18!!!!
before solve at
unsat : (declare-fun x0 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= (+ 0 (* x0 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (>= (+ 5 (* x0 1)) 0))
(assert (>= (+ 6 (* x0 1)) 0))
(assert (>= (+ 7 (* x0 1)) 0))
(assert (>= (+ 8 (* x0 1)) 0))
(assert (< (+ 9 (* x0 1)) 0))

==============
Solving Branch is 17!!!!
before solve at
unsat : (declare-fun x1 () Int)
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (> (+ (- 8) (* x1 1)) 0))
(assert (> (+ (- 7) (* x1 1)) 0))
(assert (> (+ (- 6) (* x1 1)) 0))
(assert (> (+ (- 5) (* x1 1)) 0))
(assert (> (+ (- 4) (* x1 1)) 0))
(assert (> (+ (- 3) (* x1 1)) 0))
(assert (> (+ (- 2) (* x1 1)) 0))
(assert (> (+ (- 1) (* x1 1)) 0))
(assert (<= (+ 0 (* x1 1)) 0))

==============
Solving Branch is 16!!!!
before solve at
unsat : (declare-fun x0 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= (+ 0 (* x0 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (>= (+ 5 (* x0 1)) 0))
(assert (>= (+ 6 (* x0 1)) 0))
(assert (>= (+ 7 (* x0 1)) 0))
(assert (< (+ 8 (* x0 1)) 0))

==============
Solving Branch is 15!!!!
before solve at
unsat : (declare-fun x1 () Int)
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (> (+ (- 8) (* x1 1)) 0))
(assert (> (+ (- 7) (* x1 1)) 0))
(assert (> (+ (- 6) (* x1 1)) 0))
(assert (> (+ (- 5) (* x1 1)) 0))
(assert (> (+ (- 4) (* x1 1)) 0))
(assert (> (+ (- 3) (* x1 1)) 0))
(assert (> (+ (- 2) (* x1 1)) 0))
(assert (<= (+ (- 1) (* x1 1)) 0))

==============
Solving Branch is 14!!!!
before solve at
unsat : (declare-fun x0 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= (+ 0 (* x0 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (>= (+ 5 (* x0 1)) 0))
(assert (>= (+ 6 (* x0 1)) 0))
(assert (< (+ 7 (* x0 1)) 0))

==============
Solving Branch is 13!!!!
before solve at
unsat : (declare-fun x1 () Int)
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (> (+ (- 8) (* x1 1)) 0))
(assert (> (+ (- 7) (* x1 1)) 0))
(assert (> (+ (- 6) (* x1 1)) 0))
(assert (> (+ (- 5) (* x1 1)) 0))
(assert (> (+ (- 4) (* x1 1)) 0))
(assert (> (+ (- 3) (* x1 1)) 0))
(assert (<= (+ (- 2) (* x1 1)) 0))

==============
Solving Branch is 12!!!!
before solve at
unsat : (declare-fun x0 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= (+ 0 (* x0 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (>= (+ 5 (* x0 1)) 0))
(assert (< (+ 6 (* x0 1)) 0))

==============
Solving Branch is 11!!!!
before solve at
unsat : (declare-fun x1 () Int)
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (> (+ (- 8) (* x1 1)) 0))
(assert (> (+ (- 7) (* x1 1)) 0))
(assert (> (+ (- 6) (* x1 1)) 0))
(assert (> (+ (- 5) (* x1 1)) 0))
(assert (> (+ (- 4) (* x1 1)) 0))
(assert (<= (+ (- 3) (* x1 1)) 0))

==============
Solving Branch is 10!!!!
before solve at
unsat : (declare-fun x0 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= (+ 0 (* x0 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (< (+ 5 (* x0 1)) 0))

==============
Solving Branch is 9!!!!
before solve at
unsat : (declare-fun x1 () Int)
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (> (+ (- 8) (* x1 1)) 0))
(assert (> (+ (- 7) (* x1 1)) 0))
(assert (> (+ (- 6) (* x1 1)) 0))
(assert (> (+ (- 5) (* x1 1)) 0))
(assert (<= (+ (- 4) (* x1 1)) 0))

==============
Solving Branch is 8!!!!
before solve at
unsat : (declare-fun x0 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= (+ 0 (* x0 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (< (+ 4 (* x0 1)) 0))

==============
Solving Branch is 7!!!!
before solve at
unsat : (declare-fun x1 () Int)
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (> (+ (- 8) (* x1 1)) 0))
(assert (> (+ (- 7) (* x1 1)) 0))
(assert (> (+ (- 6) (* x1 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))

==============
Solving Branch is 6!!!!
before solve at
unsat : (declare-fun x0 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= (+ 0 (* x0 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (< (+ 3 (* x0 1)) 0))

==============
Solving Branch is 5!!!!
before solve at
unsat : (declare-fun x1 () Int)
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (> (+ (- 8) (* x1 1)) 0))
(assert (> (+ (- 7) (* x1 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))

==============
Solving Branch is 4!!!!
before solve at
unsat : (declare-fun x0 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= (+ 0 (* x0 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (< (+ 2 (* x0 1)) 0))

==============
Solving Branch is 3!!!!
before solve at
unsat : (declare-fun x1 () Int)
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (> (+ (- 8) (* x1 1)) 0))
(assert (<= (+ (- 7) (* x1 1)) 0))

==============
Solving Branch is 2!!!!
before solve at
unsat : (declare-fun x0 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= (+ 0 (* x0 1)) 0))
(assert (< (+ 1 (* x0 1)) 0))

==============
after for loop
after pureDfs final
Solving Branch is 0!!!!
before solve at
sat : (declare-fun x0 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (< (+ 0 (* x0 1)) 0))
(rmodel->model-converter-wrapper
x0 -> (- 1)
)

==============
after solve
Total Elapsed Time: 2.12601
  Search Time: 1.055
  Solving Time: 0.638754
  Program Time: 0.432261
remote run 0
input string -1
0

parsin not complete!
branch size: 43
costraint size: 30
costraint size1: 30
costraint siz2e: 30
constraints_idx[0]:2constraints_idx[1]:4constraints_idx[2]:5constraints_idx[3]:6constraints_idx[4]:7constraints_idx[5]:9constraints_idx[6]:10constraints_idx[7]:11constraints_idx[8]:12constraints_idx[9]:14constraints_idx[10]:15constraints_idx[11]:16constraints_idx[12]:17constraints_idx[13]:19constraints_idx[14]:20constraints_idx[15]:21constraints_idx[16]:23constraints_idx[17]:24constraints_idx[18]:25constraints_idx[19]:27constraints_idx[20]:28constraints_idx[21]:29constraints_idx[22]:31constraints_idx[23]:32constraints_idx[24]:33constraints_idx[25]:35constraints_idx[26]:36constraints_idx[27]:37constraints_idx[28]:39constraints_idx[29]:40costraint idx front: 2
parsing complete!
Iteration 23 (2s): covered 9 branches [1 reach funs, 10 reach branches].
path.constraints_idx[0]=2
-1 6 10 12 14 15 6 10 12 13 6 10 12 13 6 10 12 13 6 10 12 13 6 10 12 13 6 10 12 13 6 10 12 13 6 10 12 13 6 10 11 7 -2 
-1 6 9 6 10 12 14 15 6 10 12 14 15 6 10 12 14 15 6 10 12 13 6 10 12 13 6 10 12 13 6 10 12 13 6 10 12 13 6 10 11 7 -2 
Constraint Size : 30
files.byte = 1246
no hi..
nRcv : 1024
no break..
file_info.st_size : 1024
files.byte 1246
no hi..
nRcv : 222
no break..
file_info.st_size : 1246
files.byte 1246
send done...
after run
after updatecover
after branch_idx
prev_ex 
cur_ex 
third branch_idx = 2
after checkprediction
after SymbolicPath
Solving Branch is 29!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (< (+ 0 (* x0 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (<= (+ (- 7) (* x1 1)) 0))
(assert (<= (+ 1 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 9) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (<= (+ 2 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 8) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))
(assert (<= (+ 3 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 7) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (<= (+ (- 4) (* x1 1)) 0))
(assert (> (+ 4 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 5 (* x0 1)) 0))
(assert (<= (+ (- 3) (* x1 1)) 0))
(assert (> (+ 5 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 6 (* x0 1)) 0))
(assert (<= (+ (- 2) (* x1 1)) 0))
(assert (> (+ 6 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 7 (* x0 1)) 0))
(assert (<= (+ (- 1) (* x1 1)) 0))
(assert (> (+ 7 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 8 (* x0 1)) 0))
(assert (<= (+ 0 (* x1 1)) 0))
(assert (> (+ 8 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 9 (* x0 1)) 0))
(assert (<= (+ 1 (* x1 1)) 0))

==============
Solving Branch is 28!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (< (+ 0 (* x0 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (<= (+ (- 7) (* x1 1)) 0))
(assert (<= (+ 1 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 9) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (<= (+ 2 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 8) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))
(assert (<= (+ 3 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 7) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (<= (+ (- 4) (* x1 1)) 0))
(assert (> (+ 4 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 5 (* x0 1)) 0))
(assert (<= (+ (- 3) (* x1 1)) 0))
(assert (> (+ 5 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 6 (* x0 1)) 0))
(assert (<= (+ (- 2) (* x1 1)) 0))
(assert (> (+ 6 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 7 (* x0 1)) 0))
(assert (<= (+ (- 1) (* x1 1)) 0))
(assert (> (+ 7 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 8 (* x0 1)) 0))
(assert (<= (+ 0 (* x1 1)) 0))
(assert (> (+ 8 (* x0 3) (* x1 1)) 0))
(assert (< (+ 9 (* x0 1)) 0))

==============
Solving Branch is 27!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (< (+ 0 (* x0 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (<= (+ (- 7) (* x1 1)) 0))
(assert (<= (+ 1 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 9) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (<= (+ 2 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 8) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))
(assert (<= (+ 3 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 7) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (<= (+ (- 4) (* x1 1)) 0))
(assert (> (+ 4 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 5 (* x0 1)) 0))
(assert (<= (+ (- 3) (* x1 1)) 0))
(assert (> (+ 5 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 6 (* x0 1)) 0))
(assert (<= (+ (- 2) (* x1 1)) 0))
(assert (> (+ 6 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 7 (* x0 1)) 0))
(assert (<= (+ (- 1) (* x1 1)) 0))
(assert (> (+ 7 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 8 (* x0 1)) 0))
(assert (<= (+ 0 (* x1 1)) 0))
(assert (<= (+ 8 (* x0 3) (* x1 1)) 0))

==============
Solving Branch is 26!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (< (+ 0 (* x0 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (<= (+ (- 7) (* x1 1)) 0))
(assert (<= (+ 1 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 9) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (<= (+ 2 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 8) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))
(assert (<= (+ 3 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 7) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (<= (+ (- 4) (* x1 1)) 0))
(assert (> (+ 4 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 5 (* x0 1)) 0))
(assert (<= (+ (- 3) (* x1 1)) 0))
(assert (> (+ 5 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 6 (* x0 1)) 0))
(assert (<= (+ (- 2) (* x1 1)) 0))
(assert (> (+ 6 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 7 (* x0 1)) 0))
(assert (<= (+ (- 1) (* x1 1)) 0))
(assert (> (+ 7 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 8 (* x0 1)) 0))
(assert (> (+ 0 (* x1 1)) 0))

==============
Solving Branch is 25!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (< (+ 0 (* x0 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (<= (+ (- 7) (* x1 1)) 0))
(assert (<= (+ 1 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 9) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (<= (+ 2 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 8) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))
(assert (<= (+ 3 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 7) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (<= (+ (- 4) (* x1 1)) 0))
(assert (> (+ 4 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 5 (* x0 1)) 0))
(assert (<= (+ (- 3) (* x1 1)) 0))
(assert (> (+ 5 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 6 (* x0 1)) 0))
(assert (<= (+ (- 2) (* x1 1)) 0))
(assert (> (+ 6 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 7 (* x0 1)) 0))
(assert (<= (+ (- 1) (* x1 1)) 0))
(assert (> (+ 7 (* x0 3) (* x1 1)) 0))
(assert (< (+ 8 (* x0 1)) 0))

==============
Solving Branch is 24!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (< (+ 0 (* x0 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (<= (+ (- 7) (* x1 1)) 0))
(assert (<= (+ 1 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 9) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (<= (+ 2 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 8) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))
(assert (<= (+ 3 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 7) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (<= (+ (- 4) (* x1 1)) 0))
(assert (> (+ 4 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 5 (* x0 1)) 0))
(assert (<= (+ (- 3) (* x1 1)) 0))
(assert (> (+ 5 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 6 (* x0 1)) 0))
(assert (<= (+ (- 2) (* x1 1)) 0))
(assert (> (+ 6 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 7 (* x0 1)) 0))
(assert (<= (+ (- 1) (* x1 1)) 0))
(assert (<= (+ 7 (* x0 3) (* x1 1)) 0))

==============
Solving Branch is 23!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (< (+ 0 (* x0 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (<= (+ (- 7) (* x1 1)) 0))
(assert (<= (+ 1 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 9) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (<= (+ 2 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 8) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))
(assert (<= (+ 3 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 7) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (<= (+ (- 4) (* x1 1)) 0))
(assert (> (+ 4 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 5 (* x0 1)) 0))
(assert (<= (+ (- 3) (* x1 1)) 0))
(assert (> (+ 5 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 6 (* x0 1)) 0))
(assert (<= (+ (- 2) (* x1 1)) 0))
(assert (> (+ 6 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 7 (* x0 1)) 0))
(assert (> (+ (- 1) (* x1 1)) 0))

==============
Solving Branch is 22!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (< (+ 0 (* x0 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (<= (+ (- 7) (* x1 1)) 0))
(assert (<= (+ 1 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 9) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (<= (+ 2 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 8) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))
(assert (<= (+ 3 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 7) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (<= (+ (- 4) (* x1 1)) 0))
(assert (> (+ 4 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 5 (* x0 1)) 0))
(assert (<= (+ (- 3) (* x1 1)) 0))
(assert (> (+ 5 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 6 (* x0 1)) 0))
(assert (<= (+ (- 2) (* x1 1)) 0))
(assert (> (+ 6 (* x0 3) (* x1 1)) 0))
(assert (< (+ 7 (* x0 1)) 0))

==============
Solving Branch is 21!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (< (+ 0 (* x0 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (<= (+ (- 7) (* x1 1)) 0))
(assert (<= (+ 1 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 9) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (<= (+ 2 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 8) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))
(assert (<= (+ 3 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 7) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (<= (+ (- 4) (* x1 1)) 0))
(assert (> (+ 4 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 5 (* x0 1)) 0))
(assert (<= (+ (- 3) (* x1 1)) 0))
(assert (> (+ 5 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 6 (* x0 1)) 0))
(assert (<= (+ (- 2) (* x1 1)) 0))
(assert (<= (+ 6 (* x0 3) (* x1 1)) 0))

==============
Solving Branch is 20!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (< (+ 0 (* x0 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (<= (+ (- 7) (* x1 1)) 0))
(assert (<= (+ 1 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 9) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (<= (+ 2 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 8) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))
(assert (<= (+ 3 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 7) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (<= (+ (- 4) (* x1 1)) 0))
(assert (> (+ 4 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 5 (* x0 1)) 0))
(assert (<= (+ (- 3) (* x1 1)) 0))
(assert (> (+ 5 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 6 (* x0 1)) 0))
(assert (> (+ (- 2) (* x1 1)) 0))

==============
Solving Branch is 19!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (< (+ 0 (* x0 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (<= (+ (- 7) (* x1 1)) 0))
(assert (<= (+ 1 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 9) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (<= (+ 2 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 8) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))
(assert (<= (+ 3 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 7) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (<= (+ (- 4) (* x1 1)) 0))
(assert (> (+ 4 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 5 (* x0 1)) 0))
(assert (<= (+ (- 3) (* x1 1)) 0))
(assert (> (+ 5 (* x0 3) (* x1 1)) 0))
(assert (< (+ 6 (* x0 1)) 0))

==============
Solving Branch is 18!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (< (+ 0 (* x0 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (<= (+ (- 7) (* x1 1)) 0))
(assert (<= (+ 1 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 9) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (<= (+ 2 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 8) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))
(assert (<= (+ 3 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 7) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (<= (+ (- 4) (* x1 1)) 0))
(assert (> (+ 4 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 5 (* x0 1)) 0))
(assert (<= (+ (- 3) (* x1 1)) 0))
(assert (<= (+ 5 (* x0 3) (* x1 1)) 0))

==============
Solving Branch is 17!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (< (+ 0 (* x0 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (<= (+ (- 7) (* x1 1)) 0))
(assert (<= (+ 1 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 9) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (<= (+ 2 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 8) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))
(assert (<= (+ 3 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 7) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (<= (+ (- 4) (* x1 1)) 0))
(assert (> (+ 4 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 5 (* x0 1)) 0))
(assert (> (+ (- 3) (* x1 1)) 0))

==============
Solving Branch is 16!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (< (+ 0 (* x0 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (<= (+ (- 7) (* x1 1)) 0))
(assert (<= (+ 1 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 9) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (<= (+ 2 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 8) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))
(assert (<= (+ 3 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 7) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (<= (+ (- 4) (* x1 1)) 0))
(assert (> (+ 4 (* x0 3) (* x1 1)) 0))
(assert (< (+ 5 (* x0 1)) 0))

==============
Solving Branch is 15!!!!
before solve at
sat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (< (+ 0 (* x0 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (<= (+ (- 7) (* x1 1)) 0))
(assert (<= (+ 1 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 9) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (<= (+ 2 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 8) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))
(assert (<= (+ 3 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 7) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (<= (+ (- 4) (* x1 1)) 0))
(assert (<= (+ 4 (* x0 3) (* x1 1)) 0))
(rmodel->model-converter-wrapper
x1 -> (- 1)
x0 -> (- 1)
)

==============
after solve
Total Elapsed Time: 2.18207
  Search Time: 1.0573
  Solving Time: 0.675615
  Program Time: 0.449152
remote run 0
input string -1
-1

parsin not complete!
branch size: 45
costraint size: 32
costraint size1: 32
costraint siz2e: 32
constraints_idx[0]:2constraints_idx[1]:4constraints_idx[2]:5constraints_idx[3]:6constraints_idx[4]:7constraints_idx[5]:9constraints_idx[6]:10constraints_idx[7]:11constraints_idx[8]:12constraints_idx[9]:14constraints_idx[10]:15constraints_idx[11]:16constraints_idx[12]:17constraints_idx[13]:19constraints_idx[14]:20constraints_idx[15]:21constraints_idx[16]:22constraints_idx[17]:24constraints_idx[18]:25constraints_idx[19]:26constraints_idx[20]:28constraints_idx[21]:29constraints_idx[22]:30constraints_idx[23]:32constraints_idx[24]:33constraints_idx[25]:34constraints_idx[26]:36constraints_idx[27]:37constraints_idx[28]:38constraints_idx[29]:40constraints_idx[30]:41constraints_idx[31]:42costraint idx front: 2
parsing complete!
Iteration 24 (2s): covered 9 branches [1 reach funs, 10 reach branches].
path.constraints_idx[15]=21
-1 6 9 6 10 12 14 15 6 10 12 14 15 6 10 12 14 15 6 10 12 13 6 10 12 13 6 10 12 13 6 10 12 13 6 10 12 13 6 10 11 7 -2 
-1 6 9 6 10 12 14 15 6 10 12 14 15 6 10 12 14 15 6 10 12 14 15 6 10 12 13 6 10 12 13 6 10 12 13 6 10 12 13 6 10 12 13 7 -2 
Constraint Size : 32
files.byte = 1338
no hi..
nRcv : 1024
no break..
file_info.st_size : 1024
files.byte 1338
no hi..
nRcv : 314
no break..
file_info.st_size : 1338
files.byte 1338
send done...
after run
after updatecover
after branch_idx
prev_ex 
cur_ex 
third branch_idx = 21
after checkprediction
after SymbolicPath
Solving Branch is 31!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (< (+ 0 (* x0 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (<= (+ (- 7) (* x1 1)) 0))
(assert (<= (+ 1 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 9) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (<= (+ 2 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 8) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))
(assert (<= (+ 3 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 7) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (<= (+ (- 4) (* x1 1)) 0))
(assert (<= (+ 4 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 6) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 5 (* x0 1)) 0))
(assert (<= (+ (- 3) (* x1 1)) 0))
(assert (> (+ 5 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 6 (* x0 1)) 0))
(assert (<= (+ (- 2) (* x1 1)) 0))
(assert (> (+ 6 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 7 (* x0 1)) 0))
(assert (<= (+ (- 1) (* x1 1)) 0))
(assert (> (+ 7 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 8 (* x0 1)) 0))
(assert (<= (+ 0 (* x1 1)) 0))
(assert (> (+ 8 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 9 (* x0 1)) 0))
(assert (<= (+ 1 (* x1 1)) 0))
(assert (<= (+ 9 (* x0 3) (* x1 1)) 0))

==============
Solving Branch is 30!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (< (+ 0 (* x0 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (<= (+ (- 7) (* x1 1)) 0))
(assert (<= (+ 1 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 9) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (<= (+ 2 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 8) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))
(assert (<= (+ 3 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 7) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (<= (+ (- 4) (* x1 1)) 0))
(assert (<= (+ 4 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 6) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 5 (* x0 1)) 0))
(assert (<= (+ (- 3) (* x1 1)) 0))
(assert (> (+ 5 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 6 (* x0 1)) 0))
(assert (<= (+ (- 2) (* x1 1)) 0))
(assert (> (+ 6 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 7 (* x0 1)) 0))
(assert (<= (+ (- 1) (* x1 1)) 0))
(assert (> (+ 7 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 8 (* x0 1)) 0))
(assert (<= (+ 0 (* x1 1)) 0))
(assert (> (+ 8 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 9 (* x0 1)) 0))
(assert (> (+ 1 (* x1 1)) 0))

==============
Solving Branch is 29!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (< (+ 0 (* x0 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (<= (+ (- 7) (* x1 1)) 0))
(assert (<= (+ 1 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 9) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (<= (+ 2 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 8) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))
(assert (<= (+ 3 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 7) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (<= (+ (- 4) (* x1 1)) 0))
(assert (<= (+ 4 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 6) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 5 (* x0 1)) 0))
(assert (<= (+ (- 3) (* x1 1)) 0))
(assert (> (+ 5 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 6 (* x0 1)) 0))
(assert (<= (+ (- 2) (* x1 1)) 0))
(assert (> (+ 6 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 7 (* x0 1)) 0))
(assert (<= (+ (- 1) (* x1 1)) 0))
(assert (> (+ 7 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 8 (* x0 1)) 0))
(assert (<= (+ 0 (* x1 1)) 0))
(assert (> (+ 8 (* x0 3) (* x1 1)) 0))
(assert (< (+ 9 (* x0 1)) 0))

==============
Solving Branch is 28!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (< (+ 0 (* x0 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (<= (+ (- 7) (* x1 1)) 0))
(assert (<= (+ 1 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 9) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (<= (+ 2 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 8) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))
(assert (<= (+ 3 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 7) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (<= (+ (- 4) (* x1 1)) 0))
(assert (<= (+ 4 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 6) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 5 (* x0 1)) 0))
(assert (<= (+ (- 3) (* x1 1)) 0))
(assert (> (+ 5 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 6 (* x0 1)) 0))
(assert (<= (+ (- 2) (* x1 1)) 0))
(assert (> (+ 6 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 7 (* x0 1)) 0))
(assert (<= (+ (- 1) (* x1 1)) 0))
(assert (> (+ 7 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 8 (* x0 1)) 0))
(assert (<= (+ 0 (* x1 1)) 0))
(assert (<= (+ 8 (* x0 3) (* x1 1)) 0))

==============
Solving Branch is 27!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (< (+ 0 (* x0 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (<= (+ (- 7) (* x1 1)) 0))
(assert (<= (+ 1 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 9) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (<= (+ 2 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 8) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))
(assert (<= (+ 3 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 7) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (<= (+ (- 4) (* x1 1)) 0))
(assert (<= (+ 4 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 6) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 5 (* x0 1)) 0))
(assert (<= (+ (- 3) (* x1 1)) 0))
(assert (> (+ 5 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 6 (* x0 1)) 0))
(assert (<= (+ (- 2) (* x1 1)) 0))
(assert (> (+ 6 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 7 (* x0 1)) 0))
(assert (<= (+ (- 1) (* x1 1)) 0))
(assert (> (+ 7 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 8 (* x0 1)) 0))
(assert (> (+ 0 (* x1 1)) 0))

==============
Solving Branch is 26!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (< (+ 0 (* x0 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (<= (+ (- 7) (* x1 1)) 0))
(assert (<= (+ 1 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 9) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (<= (+ 2 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 8) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))
(assert (<= (+ 3 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 7) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (<= (+ (- 4) (* x1 1)) 0))
(assert (<= (+ 4 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 6) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 5 (* x0 1)) 0))
(assert (<= (+ (- 3) (* x1 1)) 0))
(assert (> (+ 5 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 6 (* x0 1)) 0))
(assert (<= (+ (- 2) (* x1 1)) 0))
(assert (> (+ 6 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 7 (* x0 1)) 0))
(assert (<= (+ (- 1) (* x1 1)) 0))
(assert (> (+ 7 (* x0 3) (* x1 1)) 0))
(assert (< (+ 8 (* x0 1)) 0))

==============
Solving Branch is 25!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (< (+ 0 (* x0 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (<= (+ (- 7) (* x1 1)) 0))
(assert (<= (+ 1 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 9) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (<= (+ 2 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 8) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))
(assert (<= (+ 3 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 7) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (<= (+ (- 4) (* x1 1)) 0))
(assert (<= (+ 4 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 6) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 5 (* x0 1)) 0))
(assert (<= (+ (- 3) (* x1 1)) 0))
(assert (> (+ 5 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 6 (* x0 1)) 0))
(assert (<= (+ (- 2) (* x1 1)) 0))
(assert (> (+ 6 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 7 (* x0 1)) 0))
(assert (<= (+ (- 1) (* x1 1)) 0))
(assert (<= (+ 7 (* x0 3) (* x1 1)) 0))

==============
Solving Branch is 24!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (< (+ 0 (* x0 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (<= (+ (- 7) (* x1 1)) 0))
(assert (<= (+ 1 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 9) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (<= (+ 2 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 8) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))
(assert (<= (+ 3 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 7) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (<= (+ (- 4) (* x1 1)) 0))
(assert (<= (+ 4 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 6) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 5 (* x0 1)) 0))
(assert (<= (+ (- 3) (* x1 1)) 0))
(assert (> (+ 5 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 6 (* x0 1)) 0))
(assert (<= (+ (- 2) (* x1 1)) 0))
(assert (> (+ 6 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 7 (* x0 1)) 0))
(assert (> (+ (- 1) (* x1 1)) 0))

==============
Solving Branch is 23!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (< (+ 0 (* x0 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (<= (+ (- 7) (* x1 1)) 0))
(assert (<= (+ 1 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 9) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (<= (+ 2 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 8) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))
(assert (<= (+ 3 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 7) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (<= (+ (- 4) (* x1 1)) 0))
(assert (<= (+ 4 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 6) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 5 (* x0 1)) 0))
(assert (<= (+ (- 3) (* x1 1)) 0))
(assert (> (+ 5 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 6 (* x0 1)) 0))
(assert (<= (+ (- 2) (* x1 1)) 0))
(assert (> (+ 6 (* x0 3) (* x1 1)) 0))
(assert (< (+ 7 (* x0 1)) 0))

==============
Solving Branch is 22!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (< (+ 0 (* x0 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (<= (+ (- 7) (* x1 1)) 0))
(assert (<= (+ 1 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 9) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (<= (+ 2 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 8) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))
(assert (<= (+ 3 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 7) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (<= (+ (- 4) (* x1 1)) 0))
(assert (<= (+ 4 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 6) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 5 (* x0 1)) 0))
(assert (<= (+ (- 3) (* x1 1)) 0))
(assert (> (+ 5 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 6 (* x0 1)) 0))
(assert (<= (+ (- 2) (* x1 1)) 0))
(assert (<= (+ 6 (* x0 3) (* x1 1)) 0))

==============
Solving Branch is 21!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (< (+ 0 (* x0 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (<= (+ (- 7) (* x1 1)) 0))
(assert (<= (+ 1 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 9) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (<= (+ 2 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 8) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))
(assert (<= (+ 3 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 7) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (<= (+ (- 4) (* x1 1)) 0))
(assert (<= (+ 4 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 6) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 5 (* x0 1)) 0))
(assert (<= (+ (- 3) (* x1 1)) 0))
(assert (> (+ 5 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 6 (* x0 1)) 0))
(assert (> (+ (- 2) (* x1 1)) 0))

==============
Solving Branch is 20!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (< (+ 0 (* x0 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (<= (+ (- 7) (* x1 1)) 0))
(assert (<= (+ 1 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 9) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (<= (+ 2 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 8) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))
(assert (<= (+ 3 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 7) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (<= (+ (- 4) (* x1 1)) 0))
(assert (<= (+ 4 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 6) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 5 (* x0 1)) 0))
(assert (<= (+ (- 3) (* x1 1)) 0))
(assert (> (+ 5 (* x0 3) (* x1 1)) 0))
(assert (< (+ 6 (* x0 1)) 0))

==============
Solving Branch is 19!!!!
before solve at
sat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (< (+ 0 (* x0 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (<= (+ (- 7) (* x1 1)) 0))
(assert (<= (+ 1 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 9) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (<= (+ 2 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 8) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))
(assert (<= (+ 3 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 7) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (<= (+ (- 4) (* x1 1)) 0))
(assert (<= (+ 4 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 6) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 5 (* x0 1)) 0))
(assert (<= (+ (- 3) (* x1 1)) 0))
(assert (<= (+ 5 (* x0 3) (* x1 1)) 0))
(rmodel->model-converter-wrapper
x1 -> (- 2)
x0 -> (- 1)
)

==============
after solve
Total Elapsed Time: 2.23716
  Search Time: 1.05906
  Solving Time: 0.70781
  Program Time: 0.470287
remote run 0
input string -1
-2

parsin not complete!
branch size: 46
costraint size: 33
costraint size1: 33
costraint siz2e: 33
constraints_idx[0]:2constraints_idx[1]:4constraints_idx[2]:5constraints_idx[3]:6constraints_idx[4]:7constraints_idx[5]:9constraints_idx[6]:10constraints_idx[7]:11constraints_idx[8]:12constraints_idx[9]:14constraints_idx[10]:15constraints_idx[11]:16constraints_idx[12]:17constraints_idx[13]:19constraints_idx[14]:20constraints_idx[15]:21constraints_idx[16]:22constraints_idx[17]:24constraints_idx[18]:25constraints_idx[19]:26constraints_idx[20]:27constraints_idx[21]:29constraints_idx[22]:30constraints_idx[23]:31constraints_idx[24]:33constraints_idx[25]:34constraints_idx[26]:35constraints_idx[27]:37constraints_idx[28]:38constraints_idx[29]:39constraints_idx[30]:41constraints_idx[31]:42constraints_idx[32]:43costraint idx front: 2
parsing complete!
Iteration 25 (2s): covered 9 branches [1 reach funs, 10 reach branches].
path.constraints_idx[19]=26
-1 6 9 6 10 12 14 15 6 10 12 14 15 6 10 12 14 15 6 10 12 14 15 6 10 12 13 6 10 12 13 6 10 12 13 6 10 12 13 6 10 12 13 7 -2 
-1 6 9 6 10 12 14 15 6 10 12 14 15 6 10 12 14 15 6 10 12 14 15 6 10 12 14 15 6 10 12 13 6 10 12 13 6 10 12 13 6 10 12 13 7 -2 
Constraint Size : 33
files.byte = 1384
no hi..
nRcv : 1024
no break..
file_info.st_size : 1024
files.byte 1384
no hi..
nRcv : 360
no break..
file_info.st_size : 1384
files.byte 1384
send done...
after run
after updatecover
after branch_idx
prev_ex 
cur_ex 
third branch_idx = 26
after checkprediction
after SymbolicPath
Solving Branch is 32!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (< (+ 0 (* x0 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (<= (+ (- 7) (* x1 1)) 0))
(assert (<= (+ 1 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 9) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (<= (+ 2 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 8) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))
(assert (<= (+ 3 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 7) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (<= (+ (- 4) (* x1 1)) 0))
(assert (<= (+ 4 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 6) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 5 (* x0 1)) 0))
(assert (<= (+ (- 3) (* x1 1)) 0))
(assert (<= (+ 5 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 5) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 6 (* x0 1)) 0))
(assert (<= (+ (- 2) (* x1 1)) 0))
(assert (> (+ 6 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 7 (* x0 1)) 0))
(assert (<= (+ (- 1) (* x1 1)) 0))
(assert (> (+ 7 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 8 (* x0 1)) 0))
(assert (<= (+ 0 (* x1 1)) 0))
(assert (> (+ 8 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 9 (* x0 1)) 0))
(assert (<= (+ 1 (* x1 1)) 0))
(assert (<= (+ 9 (* x0 3) (* x1 1)) 0))

==============
Solving Branch is 31!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (< (+ 0 (* x0 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (<= (+ (- 7) (* x1 1)) 0))
(assert (<= (+ 1 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 9) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (<= (+ 2 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 8) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))
(assert (<= (+ 3 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 7) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (<= (+ (- 4) (* x1 1)) 0))
(assert (<= (+ 4 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 6) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 5 (* x0 1)) 0))
(assert (<= (+ (- 3) (* x1 1)) 0))
(assert (<= (+ 5 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 5) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 6 (* x0 1)) 0))
(assert (<= (+ (- 2) (* x1 1)) 0))
(assert (> (+ 6 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 7 (* x0 1)) 0))
(assert (<= (+ (- 1) (* x1 1)) 0))
(assert (> (+ 7 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 8 (* x0 1)) 0))
(assert (<= (+ 0 (* x1 1)) 0))
(assert (> (+ 8 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 9 (* x0 1)) 0))
(assert (> (+ 1 (* x1 1)) 0))

==============
Solving Branch is 30!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (< (+ 0 (* x0 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (<= (+ (- 7) (* x1 1)) 0))
(assert (<= (+ 1 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 9) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (<= (+ 2 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 8) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))
(assert (<= (+ 3 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 7) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (<= (+ (- 4) (* x1 1)) 0))
(assert (<= (+ 4 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 6) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 5 (* x0 1)) 0))
(assert (<= (+ (- 3) (* x1 1)) 0))
(assert (<= (+ 5 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 5) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 6 (* x0 1)) 0))
(assert (<= (+ (- 2) (* x1 1)) 0))
(assert (> (+ 6 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 7 (* x0 1)) 0))
(assert (<= (+ (- 1) (* x1 1)) 0))
(assert (> (+ 7 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 8 (* x0 1)) 0))
(assert (<= (+ 0 (* x1 1)) 0))
(assert (> (+ 8 (* x0 3) (* x1 1)) 0))
(assert (< (+ 9 (* x0 1)) 0))

==============
Solving Branch is 29!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (< (+ 0 (* x0 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (<= (+ (- 7) (* x1 1)) 0))
(assert (<= (+ 1 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 9) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (<= (+ 2 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 8) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))
(assert (<= (+ 3 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 7) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (<= (+ (- 4) (* x1 1)) 0))
(assert (<= (+ 4 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 6) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 5 (* x0 1)) 0))
(assert (<= (+ (- 3) (* x1 1)) 0))
(assert (<= (+ 5 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 5) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 6 (* x0 1)) 0))
(assert (<= (+ (- 2) (* x1 1)) 0))
(assert (> (+ 6 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 7 (* x0 1)) 0))
(assert (<= (+ (- 1) (* x1 1)) 0))
(assert (> (+ 7 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 8 (* x0 1)) 0))
(assert (<= (+ 0 (* x1 1)) 0))
(assert (<= (+ 8 (* x0 3) (* x1 1)) 0))

==============
Solving Branch is 28!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (< (+ 0 (* x0 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (<= (+ (- 7) (* x1 1)) 0))
(assert (<= (+ 1 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 9) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (<= (+ 2 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 8) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))
(assert (<= (+ 3 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 7) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (<= (+ (- 4) (* x1 1)) 0))
(assert (<= (+ 4 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 6) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 5 (* x0 1)) 0))
(assert (<= (+ (- 3) (* x1 1)) 0))
(assert (<= (+ 5 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 5) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 6 (* x0 1)) 0))
(assert (<= (+ (- 2) (* x1 1)) 0))
(assert (> (+ 6 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 7 (* x0 1)) 0))
(assert (<= (+ (- 1) (* x1 1)) 0))
(assert (> (+ 7 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 8 (* x0 1)) 0))
(assert (> (+ 0 (* x1 1)) 0))

==============
Solving Branch is 27!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (< (+ 0 (* x0 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (<= (+ (- 7) (* x1 1)) 0))
(assert (<= (+ 1 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 9) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (<= (+ 2 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 8) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))
(assert (<= (+ 3 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 7) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (<= (+ (- 4) (* x1 1)) 0))
(assert (<= (+ 4 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 6) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 5 (* x0 1)) 0))
(assert (<= (+ (- 3) (* x1 1)) 0))
(assert (<= (+ 5 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 5) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 6 (* x0 1)) 0))
(assert (<= (+ (- 2) (* x1 1)) 0))
(assert (> (+ 6 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 7 (* x0 1)) 0))
(assert (<= (+ (- 1) (* x1 1)) 0))
(assert (> (+ 7 (* x0 3) (* x1 1)) 0))
(assert (< (+ 8 (* x0 1)) 0))

==============
Solving Branch is 26!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (< (+ 0 (* x0 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (<= (+ (- 7) (* x1 1)) 0))
(assert (<= (+ 1 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 9) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (<= (+ 2 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 8) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))
(assert (<= (+ 3 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 7) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (<= (+ (- 4) (* x1 1)) 0))
(assert (<= (+ 4 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 6) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 5 (* x0 1)) 0))
(assert (<= (+ (- 3) (* x1 1)) 0))
(assert (<= (+ 5 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 5) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 6 (* x0 1)) 0))
(assert (<= (+ (- 2) (* x1 1)) 0))
(assert (> (+ 6 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 7 (* x0 1)) 0))
(assert (<= (+ (- 1) (* x1 1)) 0))
(assert (<= (+ 7 (* x0 3) (* x1 1)) 0))

==============
Solving Branch is 25!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (< (+ 0 (* x0 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (<= (+ (- 7) (* x1 1)) 0))
(assert (<= (+ 1 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 9) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (<= (+ 2 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 8) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))
(assert (<= (+ 3 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 7) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (<= (+ (- 4) (* x1 1)) 0))
(assert (<= (+ 4 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 6) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 5 (* x0 1)) 0))
(assert (<= (+ (- 3) (* x1 1)) 0))
(assert (<= (+ 5 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 5) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 6 (* x0 1)) 0))
(assert (<= (+ (- 2) (* x1 1)) 0))
(assert (> (+ 6 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 7 (* x0 1)) 0))
(assert (> (+ (- 1) (* x1 1)) 0))

==============
Solving Branch is 24!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (< (+ 0 (* x0 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (<= (+ (- 7) (* x1 1)) 0))
(assert (<= (+ 1 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 9) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (<= (+ 2 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 8) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))
(assert (<= (+ 3 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 7) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (<= (+ (- 4) (* x1 1)) 0))
(assert (<= (+ 4 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 6) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 5 (* x0 1)) 0))
(assert (<= (+ (- 3) (* x1 1)) 0))
(assert (<= (+ 5 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 5) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 6 (* x0 1)) 0))
(assert (<= (+ (- 2) (* x1 1)) 0))
(assert (> (+ 6 (* x0 3) (* x1 1)) 0))
(assert (< (+ 7 (* x0 1)) 0))

==============
Solving Branch is 23!!!!
before solve at
sat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (< (+ 0 (* x0 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (<= (+ (- 7) (* x1 1)) 0))
(assert (<= (+ 1 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 9) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (<= (+ 2 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 8) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))
(assert (<= (+ 3 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 7) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (<= (+ (- 4) (* x1 1)) 0))
(assert (<= (+ 4 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 6) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 5 (* x0 1)) 0))
(assert (<= (+ (- 3) (* x1 1)) 0))
(assert (<= (+ 5 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 5) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 6 (* x0 1)) 0))
(assert (<= (+ (- 2) (* x1 1)) 0))
(assert (<= (+ 6 (* x0 3) (* x1 1)) 0))
(rmodel->model-converter-wrapper
x1 -> (- 3)
x0 -> (- 1)
)

==============
after solve
Total Elapsed Time: 2.2798
  Search Time: 1.06057
  Solving Time: 0.73317
  Program Time: 0.486056
remote run 0
input string -1
-3

parsin not complete!
branch size: 47
costraint size: 34
costraint size1: 34
costraint siz2e: 34
constraints_idx[0]:2constraints_idx[1]:4constraints_idx[2]:5constraints_idx[3]:6constraints_idx[4]:7constraints_idx[5]:9constraints_idx[6]:10constraints_idx[7]:11constraints_idx[8]:12constraints_idx[9]:14constraints_idx[10]:15constraints_idx[11]:16constraints_idx[12]:17constraints_idx[13]:19constraints_idx[14]:20constraints_idx[15]:21constraints_idx[16]:22constraints_idx[17]:24constraints_idx[18]:25constraints_idx[19]:26constraints_idx[20]:27constraints_idx[21]:29constraints_idx[22]:30constraints_idx[23]:31constraints_idx[24]:32constraints_idx[25]:34constraints_idx[26]:35constraints_idx[27]:36constraints_idx[28]:38constraints_idx[29]:39constraints_idx[30]:40constraints_idx[31]:42constraints_idx[32]:43constraints_idx[33]:44costraint idx front: 2
parsing complete!
Iteration 26 (2s): covered 9 branches [1 reach funs, 10 reach branches].
path.constraints_idx[23]=31
-1 6 9 6 10 12 14 15 6 10 12 14 15 6 10 12 14 15 6 10 12 14 15 6 10 12 14 15 6 10 12 13 6 10 12 13 6 10 12 13 6 10 12 13 7 -2 
-1 6 9 6 10 12 14 15 6 10 12 14 15 6 10 12 14 15 6 10 12 14 15 6 10 12 14 15 6 10 12 14 15 6 10 12 13 6 10 12 13 6 10 12 13 7 -2 
Constraint Size : 34
files.byte = 1430
no hi..
nRcv : 1024
no break..
file_info.st_size : 1024
files.byte 1430
no hi..
nRcv : 406
no break..
file_info.st_size : 1430
files.byte 1430
send done...
after run
after updatecover
after branch_idx
prev_ex 
cur_ex 
third branch_idx = 31
after checkprediction
after SymbolicPath
Solving Branch is 33!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (< (+ 0 (* x0 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (<= (+ (- 7) (* x1 1)) 0))
(assert (<= (+ 1 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 9) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (<= (+ 2 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 8) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))
(assert (<= (+ 3 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 7) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (<= (+ (- 4) (* x1 1)) 0))
(assert (<= (+ 4 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 6) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 5 (* x0 1)) 0))
(assert (<= (+ (- 3) (* x1 1)) 0))
(assert (<= (+ 5 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 5) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 6 (* x0 1)) 0))
(assert (<= (+ (- 2) (* x1 1)) 0))
(assert (<= (+ 6 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 4) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 7 (* x0 1)) 0))
(assert (<= (+ (- 1) (* x1 1)) 0))
(assert (> (+ 7 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 8 (* x0 1)) 0))
(assert (<= (+ 0 (* x1 1)) 0))
(assert (> (+ 8 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 9 (* x0 1)) 0))
(assert (<= (+ 1 (* x1 1)) 0))
(assert (<= (+ 9 (* x0 3) (* x1 1)) 0))

==============
Solving Branch is 32!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (< (+ 0 (* x0 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (<= (+ (- 7) (* x1 1)) 0))
(assert (<= (+ 1 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 9) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (<= (+ 2 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 8) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))
(assert (<= (+ 3 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 7) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (<= (+ (- 4) (* x1 1)) 0))
(assert (<= (+ 4 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 6) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 5 (* x0 1)) 0))
(assert (<= (+ (- 3) (* x1 1)) 0))
(assert (<= (+ 5 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 5) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 6 (* x0 1)) 0))
(assert (<= (+ (- 2) (* x1 1)) 0))
(assert (<= (+ 6 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 4) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 7 (* x0 1)) 0))
(assert (<= (+ (- 1) (* x1 1)) 0))
(assert (> (+ 7 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 8 (* x0 1)) 0))
(assert (<= (+ 0 (* x1 1)) 0))
(assert (> (+ 8 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 9 (* x0 1)) 0))
(assert (> (+ 1 (* x1 1)) 0))

==============
Solving Branch is 31!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (< (+ 0 (* x0 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (<= (+ (- 7) (* x1 1)) 0))
(assert (<= (+ 1 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 9) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (<= (+ 2 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 8) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))
(assert (<= (+ 3 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 7) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (<= (+ (- 4) (* x1 1)) 0))
(assert (<= (+ 4 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 6) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 5 (* x0 1)) 0))
(assert (<= (+ (- 3) (* x1 1)) 0))
(assert (<= (+ 5 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 5) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 6 (* x0 1)) 0))
(assert (<= (+ (- 2) (* x1 1)) 0))
(assert (<= (+ 6 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 4) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 7 (* x0 1)) 0))
(assert (<= (+ (- 1) (* x1 1)) 0))
(assert (> (+ 7 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 8 (* x0 1)) 0))
(assert (<= (+ 0 (* x1 1)) 0))
(assert (> (+ 8 (* x0 3) (* x1 1)) 0))
(assert (< (+ 9 (* x0 1)) 0))

==============
Solving Branch is 30!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (< (+ 0 (* x0 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (<= (+ (- 7) (* x1 1)) 0))
(assert (<= (+ 1 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 9) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (<= (+ 2 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 8) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))
(assert (<= (+ 3 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 7) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (<= (+ (- 4) (* x1 1)) 0))
(assert (<= (+ 4 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 6) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 5 (* x0 1)) 0))
(assert (<= (+ (- 3) (* x1 1)) 0))
(assert (<= (+ 5 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 5) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 6 (* x0 1)) 0))
(assert (<= (+ (- 2) (* x1 1)) 0))
(assert (<= (+ 6 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 4) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 7 (* x0 1)) 0))
(assert (<= (+ (- 1) (* x1 1)) 0))
(assert (> (+ 7 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 8 (* x0 1)) 0))
(assert (<= (+ 0 (* x1 1)) 0))
(assert (<= (+ 8 (* x0 3) (* x1 1)) 0))

==============
Solving Branch is 29!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (< (+ 0 (* x0 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (<= (+ (- 7) (* x1 1)) 0))
(assert (<= (+ 1 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 9) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (<= (+ 2 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 8) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))
(assert (<= (+ 3 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 7) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (<= (+ (- 4) (* x1 1)) 0))
(assert (<= (+ 4 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 6) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 5 (* x0 1)) 0))
(assert (<= (+ (- 3) (* x1 1)) 0))
(assert (<= (+ 5 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 5) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 6 (* x0 1)) 0))
(assert (<= (+ (- 2) (* x1 1)) 0))
(assert (<= (+ 6 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 4) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 7 (* x0 1)) 0))
(assert (<= (+ (- 1) (* x1 1)) 0))
(assert (> (+ 7 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 8 (* x0 1)) 0))
(assert (> (+ 0 (* x1 1)) 0))

==============
Solving Branch is 28!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (< (+ 0 (* x0 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (<= (+ (- 7) (* x1 1)) 0))
(assert (<= (+ 1 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 9) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (<= (+ 2 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 8) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))
(assert (<= (+ 3 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 7) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (<= (+ (- 4) (* x1 1)) 0))
(assert (<= (+ 4 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 6) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 5 (* x0 1)) 0))
(assert (<= (+ (- 3) (* x1 1)) 0))
(assert (<= (+ 5 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 5) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 6 (* x0 1)) 0))
(assert (<= (+ (- 2) (* x1 1)) 0))
(assert (<= (+ 6 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 4) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 7 (* x0 1)) 0))
(assert (<= (+ (- 1) (* x1 1)) 0))
(assert (> (+ 7 (* x0 3) (* x1 1)) 0))
(assert (< (+ 8 (* x0 1)) 0))

==============
Solving Branch is 27!!!!
before solve at
sat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (< (+ 0 (* x0 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (<= (+ (- 7) (* x1 1)) 0))
(assert (<= (+ 1 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 9) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (<= (+ 2 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 8) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))
(assert (<= (+ 3 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 7) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (<= (+ (- 4) (* x1 1)) 0))
(assert (<= (+ 4 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 6) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 5 (* x0 1)) 0))
(assert (<= (+ (- 3) (* x1 1)) 0))
(assert (<= (+ 5 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 5) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 6 (* x0 1)) 0))
(assert (<= (+ (- 2) (* x1 1)) 0))
(assert (<= (+ 6 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 4) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 7 (* x0 1)) 0))
(assert (<= (+ (- 1) (* x1 1)) 0))
(assert (<= (+ 7 (* x0 3) (* x1 1)) 0))
(rmodel->model-converter-wrapper
x1 -> (- 4)
x0 -> (- 1)
)

==============
after solve
Total Elapsed Time: 2.32602
  Search Time: 1.06219
  Solving Time: 0.755365
  Program Time: 0.508469
remote run 0
input string -1
-4

parsin not complete!
branch size: 48
costraint size: 35
costraint size1: 35
costraint siz2e: 35
constraints_idx[0]:2constraints_idx[1]:4constraints_idx[2]:5constraints_idx[3]:6constraints_idx[4]:7constraints_idx[5]:9constraints_idx[6]:10constraints_idx[7]:11constraints_idx[8]:12constraints_idx[9]:14constraints_idx[10]:15constraints_idx[11]:16constraints_idx[12]:17constraints_idx[13]:19constraints_idx[14]:20constraints_idx[15]:21constraints_idx[16]:22constraints_idx[17]:24constraints_idx[18]:25constraints_idx[19]:26constraints_idx[20]:27constraints_idx[21]:29constraints_idx[22]:30constraints_idx[23]:31constraints_idx[24]:32constraints_idx[25]:34constraints_idx[26]:35constraints_idx[27]:36constraints_idx[28]:37constraints_idx[29]:39constraints_idx[30]:40constraints_idx[31]:41constraints_idx[32]:43constraints_idx[33]:44constraints_idx[34]:45costraint idx front: 2
parsing complete!
Iteration 27 (2s): covered 9 branches [1 reach funs, 10 reach branches].
path.constraints_idx[27]=36
-1 6 9 6 10 12 14 15 6 10 12 14 15 6 10 12 14 15 6 10 12 14 15 6 10 12 14 15 6 10 12 14 15 6 10 12 13 6 10 12 13 6 10 12 13 7 -2 
-1 6 9 6 10 12 14 15 6 10 12 14 15 6 10 12 14 15 6 10 12 14 15 6 10 12 14 15 6 10 12 14 15 6 10 12 14 15 6 10 12 13 6 10 12 13 7 -2 
Constraint Size : 35
files.byte = 1476
no hi..
nRcv : 1024
no break..
file_info.st_size : 1024
files.byte 1476
no hi..
nRcv : 452
no break..
file_info.st_size : 1476
files.byte 1476
send done...
after run
after updatecover
after branch_idx
prev_ex 
cur_ex 
third branch_idx = 36
after checkprediction
after SymbolicPath
Solving Branch is 34!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (< (+ 0 (* x0 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (<= (+ (- 7) (* x1 1)) 0))
(assert (<= (+ 1 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 9) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (<= (+ 2 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 8) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))
(assert (<= (+ 3 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 7) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (<= (+ (- 4) (* x1 1)) 0))
(assert (<= (+ 4 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 6) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 5 (* x0 1)) 0))
(assert (<= (+ (- 3) (* x1 1)) 0))
(assert (<= (+ 5 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 5) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 6 (* x0 1)) 0))
(assert (<= (+ (- 2) (* x1 1)) 0))
(assert (<= (+ 6 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 4) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 7 (* x0 1)) 0))
(assert (<= (+ (- 1) (* x1 1)) 0))
(assert (<= (+ 7 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 3) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 8 (* x0 1)) 0))
(assert (<= (+ 0 (* x1 1)) 0))
(assert (> (+ 8 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 9 (* x0 1)) 0))
(assert (<= (+ 1 (* x1 1)) 0))
(assert (<= (+ 9 (* x0 3) (* x1 1)) 0))

==============
Solving Branch is 33!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (< (+ 0 (* x0 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (<= (+ (- 7) (* x1 1)) 0))
(assert (<= (+ 1 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 9) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (<= (+ 2 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 8) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))
(assert (<= (+ 3 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 7) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (<= (+ (- 4) (* x1 1)) 0))
(assert (<= (+ 4 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 6) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 5 (* x0 1)) 0))
(assert (<= (+ (- 3) (* x1 1)) 0))
(assert (<= (+ 5 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 5) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 6 (* x0 1)) 0))
(assert (<= (+ (- 2) (* x1 1)) 0))
(assert (<= (+ 6 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 4) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 7 (* x0 1)) 0))
(assert (<= (+ (- 1) (* x1 1)) 0))
(assert (<= (+ 7 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 3) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 8 (* x0 1)) 0))
(assert (<= (+ 0 (* x1 1)) 0))
(assert (> (+ 8 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 9 (* x0 1)) 0))
(assert (> (+ 1 (* x1 1)) 0))

==============
Solving Branch is 32!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (< (+ 0 (* x0 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (<= (+ (- 7) (* x1 1)) 0))
(assert (<= (+ 1 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 9) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (<= (+ 2 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 8) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))
(assert (<= (+ 3 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 7) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (<= (+ (- 4) (* x1 1)) 0))
(assert (<= (+ 4 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 6) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 5 (* x0 1)) 0))
(assert (<= (+ (- 3) (* x1 1)) 0))
(assert (<= (+ 5 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 5) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 6 (* x0 1)) 0))
(assert (<= (+ (- 2) (* x1 1)) 0))
(assert (<= (+ 6 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 4) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 7 (* x0 1)) 0))
(assert (<= (+ (- 1) (* x1 1)) 0))
(assert (<= (+ 7 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 3) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 8 (* x0 1)) 0))
(assert (<= (+ 0 (* x1 1)) 0))
(assert (> (+ 8 (* x0 3) (* x1 1)) 0))
(assert (< (+ 9 (* x0 1)) 0))

==============
Solving Branch is 31!!!!
before solve at
sat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (< (+ 0 (* x0 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (<= (+ (- 7) (* x1 1)) 0))
(assert (<= (+ 1 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 9) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (<= (+ 2 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 8) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))
(assert (<= (+ 3 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 7) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (<= (+ (- 4) (* x1 1)) 0))
(assert (<= (+ 4 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 6) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 5 (* x0 1)) 0))
(assert (<= (+ (- 3) (* x1 1)) 0))
(assert (<= (+ 5 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 5) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 6 (* x0 1)) 0))
(assert (<= (+ (- 2) (* x1 1)) 0))
(assert (<= (+ 6 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 4) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 7 (* x0 1)) 0))
(assert (<= (+ (- 1) (* x1 1)) 0))
(assert (<= (+ 7 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 3) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 8 (* x0 1)) 0))
(assert (<= (+ 0 (* x1 1)) 0))
(assert (<= (+ 8 (* x0 3) (* x1 1)) 0))
(rmodel->model-converter-wrapper
x1 -> (- 5)
x0 -> (- 1)
)

==============
after solve
Total Elapsed Time: 2.36429
  Search Time: 1.06402
  Solving Time: 0.770128
  Program Time: 0.530148
remote run 0
input string -1
-5

parsin not complete!
branch size: 49
costraint size: 36
costraint size1: 36
costraint siz2e: 36
constraints_idx[0]:2constraints_idx[1]:4constraints_idx[2]:5constraints_idx[3]:6constraints_idx[4]:7constraints_idx[5]:9constraints_idx[6]:10constraints_idx[7]:11constraints_idx[8]:12constraints_idx[9]:14constraints_idx[10]:15constraints_idx[11]:16constraints_idx[12]:17constraints_idx[13]:19constraints_idx[14]:20constraints_idx[15]:21constraints_idx[16]:22constraints_idx[17]:24constraints_idx[18]:25constraints_idx[19]:26constraints_idx[20]:27constraints_idx[21]:29constraints_idx[22]:30constraints_idx[23]:31constraints_idx[24]:32constraints_idx[25]:34constraints_idx[26]:35constraints_idx[27]:36constraints_idx[28]:37constraints_idx[29]:39constraints_idx[30]:40constraints_idx[31]:41constraints_idx[32]:42constraints_idx[33]:44constraints_idx[34]:45constraints_idx[35]:46costraint idx front: 2
parsing complete!
Iteration 28 (2s): covered 9 branches [1 reach funs, 10 reach branches].
path.constraints_idx[31]=41
-1 6 9 6 10 12 14 15 6 10 12 14 15 6 10 12 14 15 6 10 12 14 15 6 10 12 14 15 6 10 12 14 15 6 10 12 14 15 6 10 12 13 6 10 12 13 7 -2 
-1 6 9 6 10 12 14 15 6 10 12 14 15 6 10 12 14 15 6 10 12 14 15 6 10 12 14 15 6 10 12 14 15 6 10 12 14 15 6 10 12 14 15 6 10 12 13 7 -2 
Constraint Size : 36
files.byte = 1522
no hi..
nRcv : 1024
no break..
file_info.st_size : 1024
files.byte 1522
no hi..
nRcv : 498
no break..
file_info.st_size : 1522
files.byte 1522
send done...
after run
after updatecover
after branch_idx
prev_ex 
cur_ex 
third branch_idx = 41
after checkprediction
after SymbolicPath
Solving Branch is 35!!!!
before solve at
sat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (< (+ 0 (* x0 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (<= (+ (- 7) (* x1 1)) 0))
(assert (<= (+ 1 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 9) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (<= (+ 2 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 8) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))
(assert (<= (+ 3 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 7) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (<= (+ (- 4) (* x1 1)) 0))
(assert (<= (+ 4 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 6) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 5 (* x0 1)) 0))
(assert (<= (+ (- 3) (* x1 1)) 0))
(assert (<= (+ 5 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 5) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 6 (* x0 1)) 0))
(assert (<= (+ (- 2) (* x1 1)) 0))
(assert (<= (+ 6 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 4) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 7 (* x0 1)) 0))
(assert (<= (+ (- 1) (* x1 1)) 0))
(assert (<= (+ 7 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 3) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 8 (* x0 1)) 0))
(assert (<= (+ 0 (* x1 1)) 0))
(assert (<= (+ 8 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 2) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 9 (* x0 1)) 0))
(assert (<= (+ 1 (* x1 1)) 0))
(assert (<= (+ 9 (* x0 3) (* x1 1)) 0))
(rmodel->model-converter-wrapper
x1 -> (- 6)
x0 -> (- 1)
)

==============
after solve
Total Elapsed Time: 2.39052
  Search Time: 1.06576
  Solving Time: 0.774714
  Program Time: 0.550053
remote run 0
input string -1
-6

parsin not complete!
branch size: 50
costraint size: 37
costraint size1: 37
costraint siz2e: 37
constraints_idx[0]:2constraints_idx[1]:4constraints_idx[2]:5constraints_idx[3]:6constraints_idx[4]:7constraints_idx[5]:9constraints_idx[6]:10constraints_idx[7]:11constraints_idx[8]:12constraints_idx[9]:14constraints_idx[10]:15constraints_idx[11]:16constraints_idx[12]:17constraints_idx[13]:19constraints_idx[14]:20constraints_idx[15]:21constraints_idx[16]:22constraints_idx[17]:24constraints_idx[18]:25constraints_idx[19]:26constraints_idx[20]:27constraints_idx[21]:29constraints_idx[22]:30constraints_idx[23]:31constraints_idx[24]:32constraints_idx[25]:34constraints_idx[26]:35constraints_idx[27]:36constraints_idx[28]:37constraints_idx[29]:39constraints_idx[30]:40constraints_idx[31]:41constraints_idx[32]:42constraints_idx[33]:44constraints_idx[34]:45constraints_idx[35]:46constraints_idx[36]:47costraint idx front: 2
parsing complete!
Iteration 29 (2s): covered 9 branches [1 reach funs, 10 reach branches].
path.constraints_idx[35]=46
-1 6 9 6 10 12 14 15 6 10 12 14 15 6 10 12 14 15 6 10 12 14 15 6 10 12 14 15 6 10 12 14 15 6 10 12 14 15 6 10 12 14 15 6 10 12 13 7 -2 
-1 6 9 6 10 12 14 15 6 10 12 14 15 6 10 12 14 15 6 10 12 14 15 6 10 12 14 15 6 10 12 14 15 6 10 12 14 15 6 10 12 14 15 6 10 12 14 15 7 -2 
Constraint Size : 37
files.byte = 1568
no hi..
nRcv : 1024
no break..
file_info.st_size : 1024
files.byte 1568
no hi..
nRcv : 424
no break..
file_info.st_size : 1448
files.byte 1568
no hi..
nRcv : 120
no break..
file_info.st_size : 1568
files.byte 1568
send done...
after run
after updatecover
after branch_idx
prev_ex 
cur_ex 
third branch_idx = 46
after checkprediction
after SymbolicPath
Solving Branch is 36!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (< (+ 0 (* x0 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (<= (+ (- 7) (* x1 1)) 0))
(assert (<= (+ 1 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 9) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (<= (+ 2 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 8) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))
(assert (<= (+ 3 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 7) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (<= (+ (- 4) (* x1 1)) 0))
(assert (<= (+ 4 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 6) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 5 (* x0 1)) 0))
(assert (<= (+ (- 3) (* x1 1)) 0))
(assert (<= (+ 5 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 5) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 6 (* x0 1)) 0))
(assert (<= (+ (- 2) (* x1 1)) 0))
(assert (<= (+ 6 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 4) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 7 (* x0 1)) 0))
(assert (<= (+ (- 1) (* x1 1)) 0))
(assert (<= (+ 7 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 3) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 8 (* x0 1)) 0))
(assert (<= (+ 0 (* x1 1)) 0))
(assert (<= (+ 8 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 2) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 9 (* x0 1)) 0))
(assert (<= (+ 1 (* x1 1)) 0))
(assert (<= (+ 9 (* x0 3) (* x1 1)) 0))
(assert (>= (+ (- 1) (* x0 1) (* x1 1)) 0))

==============
after for loop
after pureDfs final
Solving Branch is 34!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (< (+ 0 (* x0 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (<= (+ (- 7) (* x1 1)) 0))
(assert (<= (+ 1 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 9) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (<= (+ 2 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 8) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))
(assert (<= (+ 3 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 7) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (<= (+ (- 4) (* x1 1)) 0))
(assert (<= (+ 4 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 6) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 5 (* x0 1)) 0))
(assert (<= (+ (- 3) (* x1 1)) 0))
(assert (<= (+ 5 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 5) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 6 (* x0 1)) 0))
(assert (<= (+ (- 2) (* x1 1)) 0))
(assert (<= (+ 6 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 4) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 7 (* x0 1)) 0))
(assert (<= (+ (- 1) (* x1 1)) 0))
(assert (<= (+ 7 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 3) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 8 (* x0 1)) 0))
(assert (<= (+ 0 (* x1 1)) 0))
(assert (<= (+ 8 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 2) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 9 (* x0 1)) 0))
(assert (> (+ 1 (* x1 1)) 0))

==============
Solving Branch is 33!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (< (+ 0 (* x0 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (<= (+ (- 7) (* x1 1)) 0))
(assert (<= (+ 1 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 9) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (<= (+ 2 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 8) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))
(assert (<= (+ 3 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 7) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (<= (+ (- 4) (* x1 1)) 0))
(assert (<= (+ 4 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 6) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 5 (* x0 1)) 0))
(assert (<= (+ (- 3) (* x1 1)) 0))
(assert (<= (+ 5 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 5) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 6 (* x0 1)) 0))
(assert (<= (+ (- 2) (* x1 1)) 0))
(assert (<= (+ 6 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 4) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 7 (* x0 1)) 0))
(assert (<= (+ (- 1) (* x1 1)) 0))
(assert (<= (+ 7 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 3) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 8 (* x0 1)) 0))
(assert (<= (+ 0 (* x1 1)) 0))
(assert (<= (+ 8 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 2) (* x0 1) (* x1 1)) 0))
(assert (< (+ 9 (* x0 1)) 0))

==============
Solving Branch is 32!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (< (+ 0 (* x0 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (<= (+ (- 7) (* x1 1)) 0))
(assert (<= (+ 1 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 9) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (<= (+ 2 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 8) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))
(assert (<= (+ 3 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 7) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (<= (+ (- 4) (* x1 1)) 0))
(assert (<= (+ 4 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 6) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 5 (* x0 1)) 0))
(assert (<= (+ (- 3) (* x1 1)) 0))
(assert (<= (+ 5 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 5) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 6 (* x0 1)) 0))
(assert (<= (+ (- 2) (* x1 1)) 0))
(assert (<= (+ 6 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 4) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 7 (* x0 1)) 0))
(assert (<= (+ (- 1) (* x1 1)) 0))
(assert (<= (+ 7 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 3) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 8 (* x0 1)) 0))
(assert (<= (+ 0 (* x1 1)) 0))
(assert (<= (+ 8 (* x0 3) (* x1 1)) 0))
(assert (>= (+ (- 2) (* x0 1) (* x1 1)) 0))

==============
after for loop
after pureDfs final
Solving Branch is 30!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (< (+ 0 (* x0 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (<= (+ (- 7) (* x1 1)) 0))
(assert (<= (+ 1 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 9) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (<= (+ 2 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 8) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))
(assert (<= (+ 3 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 7) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (<= (+ (- 4) (* x1 1)) 0))
(assert (<= (+ 4 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 6) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 5 (* x0 1)) 0))
(assert (<= (+ (- 3) (* x1 1)) 0))
(assert (<= (+ 5 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 5) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 6 (* x0 1)) 0))
(assert (<= (+ (- 2) (* x1 1)) 0))
(assert (<= (+ 6 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 4) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 7 (* x0 1)) 0))
(assert (<= (+ (- 1) (* x1 1)) 0))
(assert (<= (+ 7 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 3) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 8 (* x0 1)) 0))
(assert (> (+ 0 (* x1 1)) 0))

==============
Solving Branch is 29!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (< (+ 0 (* x0 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (<= (+ (- 7) (* x1 1)) 0))
(assert (<= (+ 1 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 9) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (<= (+ 2 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 8) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))
(assert (<= (+ 3 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 7) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (<= (+ (- 4) (* x1 1)) 0))
(assert (<= (+ 4 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 6) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 5 (* x0 1)) 0))
(assert (<= (+ (- 3) (* x1 1)) 0))
(assert (<= (+ 5 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 5) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 6 (* x0 1)) 0))
(assert (<= (+ (- 2) (* x1 1)) 0))
(assert (<= (+ 6 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 4) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 7 (* x0 1)) 0))
(assert (<= (+ (- 1) (* x1 1)) 0))
(assert (<= (+ 7 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 3) (* x0 1) (* x1 1)) 0))
(assert (< (+ 8 (* x0 1)) 0))

==============
Solving Branch is 28!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (< (+ 0 (* x0 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (<= (+ (- 7) (* x1 1)) 0))
(assert (<= (+ 1 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 9) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (<= (+ 2 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 8) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))
(assert (<= (+ 3 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 7) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (<= (+ (- 4) (* x1 1)) 0))
(assert (<= (+ 4 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 6) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 5 (* x0 1)) 0))
(assert (<= (+ (- 3) (* x1 1)) 0))
(assert (<= (+ 5 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 5) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 6 (* x0 1)) 0))
(assert (<= (+ (- 2) (* x1 1)) 0))
(assert (<= (+ 6 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 4) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 7 (* x0 1)) 0))
(assert (<= (+ (- 1) (* x1 1)) 0))
(assert (<= (+ 7 (* x0 3) (* x1 1)) 0))
(assert (>= (+ (- 3) (* x0 1) (* x1 1)) 0))

==============
after for loop
after pureDfs final
Solving Branch is 26!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (< (+ 0 (* x0 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (<= (+ (- 7) (* x1 1)) 0))
(assert (<= (+ 1 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 9) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (<= (+ 2 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 8) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))
(assert (<= (+ 3 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 7) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (<= (+ (- 4) (* x1 1)) 0))
(assert (<= (+ 4 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 6) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 5 (* x0 1)) 0))
(assert (<= (+ (- 3) (* x1 1)) 0))
(assert (<= (+ 5 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 5) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 6 (* x0 1)) 0))
(assert (<= (+ (- 2) (* x1 1)) 0))
(assert (<= (+ 6 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 4) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 7 (* x0 1)) 0))
(assert (> (+ (- 1) (* x1 1)) 0))

==============
Solving Branch is 25!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (< (+ 0 (* x0 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (<= (+ (- 7) (* x1 1)) 0))
(assert (<= (+ 1 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 9) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (<= (+ 2 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 8) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))
(assert (<= (+ 3 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 7) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (<= (+ (- 4) (* x1 1)) 0))
(assert (<= (+ 4 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 6) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 5 (* x0 1)) 0))
(assert (<= (+ (- 3) (* x1 1)) 0))
(assert (<= (+ 5 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 5) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 6 (* x0 1)) 0))
(assert (<= (+ (- 2) (* x1 1)) 0))
(assert (<= (+ 6 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 4) (* x0 1) (* x1 1)) 0))
(assert (< (+ 7 (* x0 1)) 0))

==============
Solving Branch is 24!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (< (+ 0 (* x0 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (<= (+ (- 7) (* x1 1)) 0))
(assert (<= (+ 1 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 9) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (<= (+ 2 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 8) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))
(assert (<= (+ 3 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 7) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (<= (+ (- 4) (* x1 1)) 0))
(assert (<= (+ 4 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 6) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 5 (* x0 1)) 0))
(assert (<= (+ (- 3) (* x1 1)) 0))
(assert (<= (+ 5 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 5) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 6 (* x0 1)) 0))
(assert (<= (+ (- 2) (* x1 1)) 0))
(assert (<= (+ 6 (* x0 3) (* x1 1)) 0))
(assert (>= (+ (- 4) (* x0 1) (* x1 1)) 0))

==============
after for loop
after pureDfs final
Solving Branch is 22!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (< (+ 0 (* x0 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (<= (+ (- 7) (* x1 1)) 0))
(assert (<= (+ 1 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 9) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (<= (+ 2 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 8) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))
(assert (<= (+ 3 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 7) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (<= (+ (- 4) (* x1 1)) 0))
(assert (<= (+ 4 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 6) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 5 (* x0 1)) 0))
(assert (<= (+ (- 3) (* x1 1)) 0))
(assert (<= (+ 5 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 5) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 6 (* x0 1)) 0))
(assert (> (+ (- 2) (* x1 1)) 0))

==============
Solving Branch is 21!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (< (+ 0 (* x0 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (<= (+ (- 7) (* x1 1)) 0))
(assert (<= (+ 1 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 9) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (<= (+ 2 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 8) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))
(assert (<= (+ 3 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 7) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (<= (+ (- 4) (* x1 1)) 0))
(assert (<= (+ 4 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 6) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 5 (* x0 1)) 0))
(assert (<= (+ (- 3) (* x1 1)) 0))
(assert (<= (+ 5 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 5) (* x0 1) (* x1 1)) 0))
(assert (< (+ 6 (* x0 1)) 0))

==============
Solving Branch is 20!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (< (+ 0 (* x0 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (<= (+ (- 7) (* x1 1)) 0))
(assert (<= (+ 1 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 9) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (<= (+ 2 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 8) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))
(assert (<= (+ 3 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 7) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (<= (+ (- 4) (* x1 1)) 0))
(assert (<= (+ 4 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 6) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 5 (* x0 1)) 0))
(assert (<= (+ (- 3) (* x1 1)) 0))
(assert (<= (+ 5 (* x0 3) (* x1 1)) 0))
(assert (>= (+ (- 5) (* x0 1) (* x1 1)) 0))

==============
after for loop
after pureDfs final
Solving Branch is 18!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (< (+ 0 (* x0 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (<= (+ (- 7) (* x1 1)) 0))
(assert (<= (+ 1 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 9) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (<= (+ 2 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 8) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))
(assert (<= (+ 3 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 7) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (<= (+ (- 4) (* x1 1)) 0))
(assert (<= (+ 4 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 6) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 5 (* x0 1)) 0))
(assert (> (+ (- 3) (* x1 1)) 0))

==============
Solving Branch is 17!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (< (+ 0 (* x0 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (<= (+ (- 7) (* x1 1)) 0))
(assert (<= (+ 1 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 9) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (<= (+ 2 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 8) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))
(assert (<= (+ 3 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 7) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (<= (+ (- 4) (* x1 1)) 0))
(assert (<= (+ 4 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 6) (* x0 1) (* x1 1)) 0))
(assert (< (+ 5 (* x0 1)) 0))

==============
Solving Branch is 16!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (< (+ 0 (* x0 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (<= (+ (- 7) (* x1 1)) 0))
(assert (<= (+ 1 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 9) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (<= (+ 2 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 8) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))
(assert (<= (+ 3 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 7) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (<= (+ (- 4) (* x1 1)) 0))
(assert (<= (+ 4 (* x0 3) (* x1 1)) 0))
(assert (>= (+ (- 6) (* x0 1) (* x1 1)) 0))

==============
after for loop
after pureDfs final
Solving Branch is 14!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (< (+ 0 (* x0 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (<= (+ (- 7) (* x1 1)) 0))
(assert (<= (+ 1 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 9) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (<= (+ 2 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 8) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))
(assert (<= (+ 3 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 7) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (> (+ (- 4) (* x1 1)) 0))

==============
Solving Branch is 13!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (< (+ 0 (* x0 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (<= (+ (- 7) (* x1 1)) 0))
(assert (<= (+ 1 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 9) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (<= (+ 2 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 8) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))
(assert (<= (+ 3 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 7) (* x0 1) (* x1 1)) 0))
(assert (< (+ 4 (* x0 1)) 0))

==============
Solving Branch is 12!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (< (+ 0 (* x0 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (<= (+ (- 7) (* x1 1)) 0))
(assert (<= (+ 1 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 9) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (<= (+ 2 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 8) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))
(assert (<= (+ 3 (* x0 3) (* x1 1)) 0))
(assert (>= (+ (- 7) (* x0 1) (* x1 1)) 0))

==============
Solving Branch is 11!!!!
before solve at
sat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (< (+ 0 (* x0 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (<= (+ (- 7) (* x1 1)) 0))
(assert (<= (+ 1 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 9) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (<= (+ 2 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 8) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))
(assert (> (+ 3 (* x0 3) (* x1 1)) 0))
(rmodel->model-converter-wrapper
x1 -> 1
x0 -> (- 1)
)

==============
after solve
Total Elapsed Time: 2.45643
  Search Time: 1.06804
  Solving Time: 0.821565
  Program Time: 0.566827
remote run 0
input string -1
1

parsin not complete!
branch size: 41
costraint size: 28
costraint size1: 28
costraint siz2e: 28
constraints_idx[0]:2constraints_idx[1]:4constraints_idx[2]:5constraints_idx[3]:6constraints_idx[4]:7constraints_idx[5]:9constraints_idx[6]:10constraints_idx[7]:11constraints_idx[8]:12constraints_idx[9]:14constraints_idx[10]:15constraints_idx[11]:16constraints_idx[12]:18constraints_idx[13]:19constraints_idx[14]:20constraints_idx[15]:22constraints_idx[16]:23constraints_idx[17]:24constraints_idx[18]:26constraints_idx[19]:27constraints_idx[20]:28constraints_idx[21]:30constraints_idx[22]:31constraints_idx[23]:32constraints_idx[24]:34constraints_idx[25]:35constraints_idx[26]:37constraints_idx[27]:38costraint idx front: 2
parsing complete!
Iteration 30 (2s): covered 9 branches [1 reach funs, 10 reach branches].
path.constraints_idx[11]=16
-1 6 9 6 10 12 14 15 6 10 12 14 15 6 10 12 14 15 6 10 12 13 6 10 12 13 6 10 12 13 6 10 12 13 6 10 12 13 6 10 11 7 -2 
-1 6 9 6 10 12 14 15 6 10 12 14 15 6 10 12 13 6 10 12 13 6 10 12 13 6 10 12 13 6 10 12 13 6 10 11 6 10 11 7 -2 
Constraint Size : 28
files.byte = 1154
no hi..
nRcv : 1024
no break..
file_info.st_size : 1024
files.byte 1154
no hi..
nRcv : 130
no break..
file_info.st_size : 1154
files.byte 1154
send done...
after run
after updatecover
after branch_idx
prev_ex 
cur_ex 
third branch_idx = 16
after checkprediction
after SymbolicPath
Solving Branch is 27!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (< (+ 0 (* x0 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (<= (+ (- 7) (* x1 1)) 0))
(assert (<= (+ 1 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 9) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (<= (+ 2 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 8) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))
(assert (> (+ 3 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (<= (+ (- 4) (* x1 1)) 0))
(assert (> (+ 4 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 5 (* x0 1)) 0))
(assert (<= (+ (- 3) (* x1 1)) 0))
(assert (> (+ 5 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 6 (* x0 1)) 0))
(assert (<= (+ (- 2) (* x1 1)) 0))
(assert (> (+ 6 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 7 (* x0 1)) 0))
(assert (<= (+ (- 1) (* x1 1)) 0))
(assert (> (+ 7 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 8 (* x0 1)) 0))
(assert (> (+ 0 (* x1 1)) 0))
(assert (>= (+ 9 (* x0 1)) 0))
(assert (<= (+ 1 (* x1 1)) 0))

==============
Solving Branch is 26!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (< (+ 0 (* x0 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (<= (+ (- 7) (* x1 1)) 0))
(assert (<= (+ 1 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 9) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (<= (+ 2 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 8) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))
(assert (> (+ 3 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (<= (+ (- 4) (* x1 1)) 0))
(assert (> (+ 4 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 5 (* x0 1)) 0))
(assert (<= (+ (- 3) (* x1 1)) 0))
(assert (> (+ 5 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 6 (* x0 1)) 0))
(assert (<= (+ (- 2) (* x1 1)) 0))
(assert (> (+ 6 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 7 (* x0 1)) 0))
(assert (<= (+ (- 1) (* x1 1)) 0))
(assert (> (+ 7 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 8 (* x0 1)) 0))
(assert (> (+ 0 (* x1 1)) 0))
(assert (< (+ 9 (* x0 1)) 0))

==============
Solving Branch is 25!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (< (+ 0 (* x0 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (<= (+ (- 7) (* x1 1)) 0))
(assert (<= (+ 1 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 9) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (<= (+ 2 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 8) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))
(assert (> (+ 3 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (<= (+ (- 4) (* x1 1)) 0))
(assert (> (+ 4 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 5 (* x0 1)) 0))
(assert (<= (+ (- 3) (* x1 1)) 0))
(assert (> (+ 5 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 6 (* x0 1)) 0))
(assert (<= (+ (- 2) (* x1 1)) 0))
(assert (> (+ 6 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 7 (* x0 1)) 0))
(assert (<= (+ (- 1) (* x1 1)) 0))
(assert (> (+ 7 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 8 (* x0 1)) 0))
(assert (<= (+ 0 (* x1 1)) 0))

==============
Solving Branch is 24!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (< (+ 0 (* x0 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (<= (+ (- 7) (* x1 1)) 0))
(assert (<= (+ 1 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 9) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (<= (+ 2 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 8) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))
(assert (> (+ 3 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (<= (+ (- 4) (* x1 1)) 0))
(assert (> (+ 4 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 5 (* x0 1)) 0))
(assert (<= (+ (- 3) (* x1 1)) 0))
(assert (> (+ 5 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 6 (* x0 1)) 0))
(assert (<= (+ (- 2) (* x1 1)) 0))
(assert (> (+ 6 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 7 (* x0 1)) 0))
(assert (<= (+ (- 1) (* x1 1)) 0))
(assert (> (+ 7 (* x0 3) (* x1 1)) 0))
(assert (< (+ 8 (* x0 1)) 0))

==============
Solving Branch is 23!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (< (+ 0 (* x0 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (<= (+ (- 7) (* x1 1)) 0))
(assert (<= (+ 1 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 9) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (<= (+ 2 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 8) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))
(assert (> (+ 3 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (<= (+ (- 4) (* x1 1)) 0))
(assert (> (+ 4 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 5 (* x0 1)) 0))
(assert (<= (+ (- 3) (* x1 1)) 0))
(assert (> (+ 5 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 6 (* x0 1)) 0))
(assert (<= (+ (- 2) (* x1 1)) 0))
(assert (> (+ 6 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 7 (* x0 1)) 0))
(assert (<= (+ (- 1) (* x1 1)) 0))
(assert (<= (+ 7 (* x0 3) (* x1 1)) 0))

==============
Solving Branch is 22!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (< (+ 0 (* x0 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (<= (+ (- 7) (* x1 1)) 0))
(assert (<= (+ 1 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 9) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (<= (+ 2 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 8) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))
(assert (> (+ 3 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (<= (+ (- 4) (* x1 1)) 0))
(assert (> (+ 4 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 5 (* x0 1)) 0))
(assert (<= (+ (- 3) (* x1 1)) 0))
(assert (> (+ 5 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 6 (* x0 1)) 0))
(assert (<= (+ (- 2) (* x1 1)) 0))
(assert (> (+ 6 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 7 (* x0 1)) 0))
(assert (> (+ (- 1) (* x1 1)) 0))

==============
Solving Branch is 21!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (< (+ 0 (* x0 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (<= (+ (- 7) (* x1 1)) 0))
(assert (<= (+ 1 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 9) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (<= (+ 2 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 8) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))
(assert (> (+ 3 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (<= (+ (- 4) (* x1 1)) 0))
(assert (> (+ 4 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 5 (* x0 1)) 0))
(assert (<= (+ (- 3) (* x1 1)) 0))
(assert (> (+ 5 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 6 (* x0 1)) 0))
(assert (<= (+ (- 2) (* x1 1)) 0))
(assert (> (+ 6 (* x0 3) (* x1 1)) 0))
(assert (< (+ 7 (* x0 1)) 0))

==============
Solving Branch is 20!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (< (+ 0 (* x0 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (<= (+ (- 7) (* x1 1)) 0))
(assert (<= (+ 1 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 9) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (<= (+ 2 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 8) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))
(assert (> (+ 3 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (<= (+ (- 4) (* x1 1)) 0))
(assert (> (+ 4 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 5 (* x0 1)) 0))
(assert (<= (+ (- 3) (* x1 1)) 0))
(assert (> (+ 5 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 6 (* x0 1)) 0))
(assert (<= (+ (- 2) (* x1 1)) 0))
(assert (<= (+ 6 (* x0 3) (* x1 1)) 0))

==============
Solving Branch is 19!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (< (+ 0 (* x0 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (<= (+ (- 7) (* x1 1)) 0))
(assert (<= (+ 1 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 9) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (<= (+ 2 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 8) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))
(assert (> (+ 3 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (<= (+ (- 4) (* x1 1)) 0))
(assert (> (+ 4 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 5 (* x0 1)) 0))
(assert (<= (+ (- 3) (* x1 1)) 0))
(assert (> (+ 5 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 6 (* x0 1)) 0))
(assert (> (+ (- 2) (* x1 1)) 0))

==============
Solving Branch is 18!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (< (+ 0 (* x0 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (<= (+ (- 7) (* x1 1)) 0))
(assert (<= (+ 1 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 9) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (<= (+ 2 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 8) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))
(assert (> (+ 3 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (<= (+ (- 4) (* x1 1)) 0))
(assert (> (+ 4 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 5 (* x0 1)) 0))
(assert (<= (+ (- 3) (* x1 1)) 0))
(assert (> (+ 5 (* x0 3) (* x1 1)) 0))
(assert (< (+ 6 (* x0 1)) 0))

==============
Solving Branch is 17!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (< (+ 0 (* x0 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (<= (+ (- 7) (* x1 1)) 0))
(assert (<= (+ 1 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 9) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (<= (+ 2 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 8) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))
(assert (> (+ 3 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (<= (+ (- 4) (* x1 1)) 0))
(assert (> (+ 4 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 5 (* x0 1)) 0))
(assert (<= (+ (- 3) (* x1 1)) 0))
(assert (<= (+ 5 (* x0 3) (* x1 1)) 0))

==============
Solving Branch is 16!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (< (+ 0 (* x0 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (<= (+ (- 7) (* x1 1)) 0))
(assert (<= (+ 1 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 9) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (<= (+ 2 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 8) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))
(assert (> (+ 3 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (<= (+ (- 4) (* x1 1)) 0))
(assert (> (+ 4 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 5 (* x0 1)) 0))
(assert (> (+ (- 3) (* x1 1)) 0))

==============
Solving Branch is 15!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (< (+ 0 (* x0 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (<= (+ (- 7) (* x1 1)) 0))
(assert (<= (+ 1 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 9) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (<= (+ 2 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 8) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))
(assert (> (+ 3 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (<= (+ (- 4) (* x1 1)) 0))
(assert (> (+ 4 (* x0 3) (* x1 1)) 0))
(assert (< (+ 5 (* x0 1)) 0))

==============
Solving Branch is 14!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (< (+ 0 (* x0 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (<= (+ (- 7) (* x1 1)) 0))
(assert (<= (+ 1 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 9) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (<= (+ 2 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 8) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))
(assert (> (+ 3 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (<= (+ (- 4) (* x1 1)) 0))
(assert (<= (+ 4 (* x0 3) (* x1 1)) 0))

==============
Solving Branch is 13!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (< (+ 0 (* x0 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (<= (+ (- 7) (* x1 1)) 0))
(assert (<= (+ 1 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 9) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (<= (+ 2 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 8) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))
(assert (> (+ 3 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (> (+ (- 4) (* x1 1)) 0))

==============
Solving Branch is 12!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (< (+ 0 (* x0 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (<= (+ (- 7) (* x1 1)) 0))
(assert (<= (+ 1 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 9) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (<= (+ 2 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 8) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))
(assert (> (+ 3 (* x0 3) (* x1 1)) 0))
(assert (< (+ 4 (* x0 1)) 0))

==============
after for loop
after pureDfs final
Solving Branch is 10!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (< (+ 0 (* x0 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (<= (+ (- 7) (* x1 1)) 0))
(assert (<= (+ 1 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 9) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (<= (+ 2 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 8) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (> (+ (- 5) (* x1 1)) 0))

==============
Solving Branch is 9!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (< (+ 0 (* x0 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (<= (+ (- 7) (* x1 1)) 0))
(assert (<= (+ 1 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 9) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (<= (+ 2 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 8) (* x0 1) (* x1 1)) 0))
(assert (< (+ 3 (* x0 1)) 0))

==============
Solving Branch is 8!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (< (+ 0 (* x0 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (<= (+ (- 7) (* x1 1)) 0))
(assert (<= (+ 1 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 9) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (<= (+ 2 (* x0 3) (* x1 1)) 0))
(assert (>= (+ (- 8) (* x0 1) (* x1 1)) 0))

==============
Solving Branch is 7!!!!
before solve at
sat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (< (+ 0 (* x0 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (<= (+ (- 7) (* x1 1)) 0))
(assert (<= (+ 1 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 9) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (> (+ 2 (* x0 3) (* x1 1)) 0))
(rmodel->model-converter-wrapper
x1 -> 2
x0 -> (- 1)
)

==============
after solve
Total Elapsed Time: 2.51207
  Search Time: 1.06949
  Solving Time: 0.859031
  Program Time: 0.583546
remote run 0
input string -1
2

parsin not complete!
branch size: 39
costraint size: 26
costraint size1: 26
costraint siz2e: 26
constraints_idx[0]:2constraints_idx[1]:4constraints_idx[2]:5constraints_idx[3]:6constraints_idx[4]:7constraints_idx[5]:9constraints_idx[6]:10constraints_idx[7]:11constraints_idx[8]:13constraints_idx[9]:14constraints_idx[10]:15constraints_idx[11]:17constraints_idx[12]:18constraints_idx[13]:19constraints_idx[14]:21constraints_idx[15]:22constraints_idx[16]:23constraints_idx[17]:25constraints_idx[18]:26constraints_idx[19]:27constraints_idx[20]:29constraints_idx[21]:30constraints_idx[22]:32constraints_idx[23]:33constraints_idx[24]:35constraints_idx[25]:36costraint idx front: 2
parsing complete!
Iteration 31 (2s): covered 9 branches [1 reach funs, 10 reach branches].
path.constraints_idx[7]=11
-1 6 9 6 10 12 14 15 6 10 12 14 15 6 10 12 14 15 6 10 12 13 6 10 12 13 6 10 12 13 6 10 12 13 6 10 12 13 6 10 11 7 -2 
-1 6 9 6 10 12 14 15 6 10 12 13 6 10 12 13 6 10 12 13 6 10 12 13 6 10 12 13 6 10 11 6 10 11 6 10 11 7 -2 
Constraint Size : 26
files.byte = 1062
no hi..
nRcv : 1024
no break..
file_info.st_size : 1024
files.byte 1062
no hi..
nRcv : 38
no break..
file_info.st_size : 1062
files.byte 1062
send done...
after run
after updatecover
after branch_idx
prev_ex 
cur_ex 
third branch_idx = 11
after checkprediction
after SymbolicPath
Solving Branch is 25!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (< (+ 0 (* x0 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (<= (+ (- 7) (* x1 1)) 0))
(assert (<= (+ 1 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 9) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (> (+ 2 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))
(assert (> (+ 3 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (<= (+ (- 4) (* x1 1)) 0))
(assert (> (+ 4 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 5 (* x0 1)) 0))
(assert (<= (+ (- 3) (* x1 1)) 0))
(assert (> (+ 5 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 6 (* x0 1)) 0))
(assert (<= (+ (- 2) (* x1 1)) 0))
(assert (> (+ 6 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 7 (* x0 1)) 0))
(assert (> (+ (- 1) (* x1 1)) 0))
(assert (>= (+ 8 (* x0 1)) 0))
(assert (> (+ 0 (* x1 1)) 0))
(assert (>= (+ 9 (* x0 1)) 0))
(assert (<= (+ 1 (* x1 1)) 0))

==============
Solving Branch is 24!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (< (+ 0 (* x0 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (<= (+ (- 7) (* x1 1)) 0))
(assert (<= (+ 1 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 9) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (> (+ 2 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))
(assert (> (+ 3 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (<= (+ (- 4) (* x1 1)) 0))
(assert (> (+ 4 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 5 (* x0 1)) 0))
(assert (<= (+ (- 3) (* x1 1)) 0))
(assert (> (+ 5 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 6 (* x0 1)) 0))
(assert (<= (+ (- 2) (* x1 1)) 0))
(assert (> (+ 6 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 7 (* x0 1)) 0))
(assert (> (+ (- 1) (* x1 1)) 0))
(assert (>= (+ 8 (* x0 1)) 0))
(assert (> (+ 0 (* x1 1)) 0))
(assert (< (+ 9 (* x0 1)) 0))

==============
Solving Branch is 23!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (< (+ 0 (* x0 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (<= (+ (- 7) (* x1 1)) 0))
(assert (<= (+ 1 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 9) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (> (+ 2 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))
(assert (> (+ 3 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (<= (+ (- 4) (* x1 1)) 0))
(assert (> (+ 4 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 5 (* x0 1)) 0))
(assert (<= (+ (- 3) (* x1 1)) 0))
(assert (> (+ 5 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 6 (* x0 1)) 0))
(assert (<= (+ (- 2) (* x1 1)) 0))
(assert (> (+ 6 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 7 (* x0 1)) 0))
(assert (> (+ (- 1) (* x1 1)) 0))
(assert (>= (+ 8 (* x0 1)) 0))
(assert (<= (+ 0 (* x1 1)) 0))

==============
Solving Branch is 22!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (< (+ 0 (* x0 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (<= (+ (- 7) (* x1 1)) 0))
(assert (<= (+ 1 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 9) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (> (+ 2 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))
(assert (> (+ 3 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (<= (+ (- 4) (* x1 1)) 0))
(assert (> (+ 4 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 5 (* x0 1)) 0))
(assert (<= (+ (- 3) (* x1 1)) 0))
(assert (> (+ 5 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 6 (* x0 1)) 0))
(assert (<= (+ (- 2) (* x1 1)) 0))
(assert (> (+ 6 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 7 (* x0 1)) 0))
(assert (> (+ (- 1) (* x1 1)) 0))
(assert (< (+ 8 (* x0 1)) 0))

==============
Solving Branch is 21!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (< (+ 0 (* x0 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (<= (+ (- 7) (* x1 1)) 0))
(assert (<= (+ 1 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 9) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (> (+ 2 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))
(assert (> (+ 3 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (<= (+ (- 4) (* x1 1)) 0))
(assert (> (+ 4 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 5 (* x0 1)) 0))
(assert (<= (+ (- 3) (* x1 1)) 0))
(assert (> (+ 5 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 6 (* x0 1)) 0))
(assert (<= (+ (- 2) (* x1 1)) 0))
(assert (> (+ 6 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 7 (* x0 1)) 0))
(assert (<= (+ (- 1) (* x1 1)) 0))

==============
Solving Branch is 20!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (< (+ 0 (* x0 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (<= (+ (- 7) (* x1 1)) 0))
(assert (<= (+ 1 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 9) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (> (+ 2 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))
(assert (> (+ 3 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (<= (+ (- 4) (* x1 1)) 0))
(assert (> (+ 4 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 5 (* x0 1)) 0))
(assert (<= (+ (- 3) (* x1 1)) 0))
(assert (> (+ 5 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 6 (* x0 1)) 0))
(assert (<= (+ (- 2) (* x1 1)) 0))
(assert (> (+ 6 (* x0 3) (* x1 1)) 0))
(assert (< (+ 7 (* x0 1)) 0))

==============
Solving Branch is 19!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (< (+ 0 (* x0 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (<= (+ (- 7) (* x1 1)) 0))
(assert (<= (+ 1 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 9) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (> (+ 2 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))
(assert (> (+ 3 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (<= (+ (- 4) (* x1 1)) 0))
(assert (> (+ 4 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 5 (* x0 1)) 0))
(assert (<= (+ (- 3) (* x1 1)) 0))
(assert (> (+ 5 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 6 (* x0 1)) 0))
(assert (<= (+ (- 2) (* x1 1)) 0))
(assert (<= (+ 6 (* x0 3) (* x1 1)) 0))

==============
Solving Branch is 18!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (< (+ 0 (* x0 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (<= (+ (- 7) (* x1 1)) 0))
(assert (<= (+ 1 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 9) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (> (+ 2 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))
(assert (> (+ 3 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (<= (+ (- 4) (* x1 1)) 0))
(assert (> (+ 4 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 5 (* x0 1)) 0))
(assert (<= (+ (- 3) (* x1 1)) 0))
(assert (> (+ 5 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 6 (* x0 1)) 0))
(assert (> (+ (- 2) (* x1 1)) 0))

==============
Solving Branch is 17!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (< (+ 0 (* x0 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (<= (+ (- 7) (* x1 1)) 0))
(assert (<= (+ 1 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 9) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (> (+ 2 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))
(assert (> (+ 3 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (<= (+ (- 4) (* x1 1)) 0))
(assert (> (+ 4 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 5 (* x0 1)) 0))
(assert (<= (+ (- 3) (* x1 1)) 0))
(assert (> (+ 5 (* x0 3) (* x1 1)) 0))
(assert (< (+ 6 (* x0 1)) 0))

==============
Solving Branch is 16!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (< (+ 0 (* x0 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (<= (+ (- 7) (* x1 1)) 0))
(assert (<= (+ 1 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 9) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (> (+ 2 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))
(assert (> (+ 3 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (<= (+ (- 4) (* x1 1)) 0))
(assert (> (+ 4 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 5 (* x0 1)) 0))
(assert (<= (+ (- 3) (* x1 1)) 0))
(assert (<= (+ 5 (* x0 3) (* x1 1)) 0))

==============
Solving Branch is 15!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (< (+ 0 (* x0 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (<= (+ (- 7) (* x1 1)) 0))
(assert (<= (+ 1 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 9) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (> (+ 2 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))
(assert (> (+ 3 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (<= (+ (- 4) (* x1 1)) 0))
(assert (> (+ 4 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 5 (* x0 1)) 0))
(assert (> (+ (- 3) (* x1 1)) 0))

==============
Solving Branch is 14!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (< (+ 0 (* x0 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (<= (+ (- 7) (* x1 1)) 0))
(assert (<= (+ 1 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 9) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (> (+ 2 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))
(assert (> (+ 3 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (<= (+ (- 4) (* x1 1)) 0))
(assert (> (+ 4 (* x0 3) (* x1 1)) 0))
(assert (< (+ 5 (* x0 1)) 0))

==============
Solving Branch is 13!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (< (+ 0 (* x0 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (<= (+ (- 7) (* x1 1)) 0))
(assert (<= (+ 1 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 9) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (> (+ 2 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))
(assert (> (+ 3 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (<= (+ (- 4) (* x1 1)) 0))
(assert (<= (+ 4 (* x0 3) (* x1 1)) 0))

==============
Solving Branch is 12!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (< (+ 0 (* x0 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (<= (+ (- 7) (* x1 1)) 0))
(assert (<= (+ 1 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 9) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (> (+ 2 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))
(assert (> (+ 3 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (> (+ (- 4) (* x1 1)) 0))

==============
Solving Branch is 11!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (< (+ 0 (* x0 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (<= (+ (- 7) (* x1 1)) 0))
(assert (<= (+ 1 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 9) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (> (+ 2 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))
(assert (> (+ 3 (* x0 3) (* x1 1)) 0))
(assert (< (+ 4 (* x0 1)) 0))

==============
Solving Branch is 10!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (< (+ 0 (* x0 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (<= (+ (- 7) (* x1 1)) 0))
(assert (<= (+ 1 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 9) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (> (+ 2 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))
(assert (<= (+ 3 (* x0 3) (* x1 1)) 0))

==============
Solving Branch is 9!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (< (+ 0 (* x0 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (<= (+ (- 7) (* x1 1)) 0))
(assert (<= (+ 1 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 9) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (> (+ 2 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (> (+ (- 5) (* x1 1)) 0))

==============
Solving Branch is 8!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (< (+ 0 (* x0 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (<= (+ (- 7) (* x1 1)) 0))
(assert (<= (+ 1 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 9) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (> (+ 2 (* x0 3) (* x1 1)) 0))
(assert (< (+ 3 (* x0 1)) 0))

==============
after for loop
after pureDfs final
Solving Branch is 6!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (< (+ 0 (* x0 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (<= (+ (- 7) (* x1 1)) 0))
(assert (<= (+ 1 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 9) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (> (+ (- 6) (* x1 1)) 0))

==============
Solving Branch is 5!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (< (+ 0 (* x0 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (<= (+ (- 7) (* x1 1)) 0))
(assert (<= (+ 1 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 9) (* x0 1) (* x1 1)) 0))
(assert (< (+ 2 (* x0 1)) 0))

==============
Solving Branch is 4!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (< (+ 0 (* x0 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (<= (+ (- 7) (* x1 1)) 0))
(assert (<= (+ 1 (* x0 3) (* x1 1)) 0))
(assert (>= (+ (- 9) (* x0 1) (* x1 1)) 0))

==============
Solving Branch is 3!!!!
before solve at
sat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (< (+ 0 (* x0 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (<= (+ (- 7) (* x1 1)) 0))
(assert (> (+ 1 (* x0 3) (* x1 1)) 0))
(rmodel->model-converter-wrapper
x1 -> 3
x0 -> (- 1)
)

==============
after solve
Total Elapsed Time: 2.56993
  Search Time: 1.07083
  Solving Time: 0.895334
  Program Time: 0.603764
remote run 0
input string -1
3

parsin not complete!
branch size: 37
costraint size: 24
costraint size1: 24
costraint siz2e: 24
constraints_idx[0]:2constraints_idx[1]:4constraints_idx[2]:5constraints_idx[3]:6constraints_idx[4]:8constraints_idx[5]:9constraints_idx[6]:10constraints_idx[7]:12constraints_idx[8]:13constraints_idx[9]:14constraints_idx[10]:16constraints_idx[11]:17constraints_idx[12]:18constraints_idx[13]:20constraints_idx[14]:21constraints_idx[15]:22constraints_idx[16]:24constraints_idx[17]:25constraints_idx[18]:27constraints_idx[19]:28constraints_idx[20]:30constraints_idx[21]:31constraints_idx[22]:33constraints_idx[23]:34costraint idx front: 2
parsing complete!
Iteration 32 (2s): covered 9 branches [1 reach funs, 10 reach branches].
path.constraints_idx[3]=6
-1 6 9 6 10 12 14 15 6 10 12 14 15 6 10 12 14 15 6 10 12 13 6 10 12 13 6 10 12 13 6 10 12 13 6 10 12 13 6 10 11 7 -2 
-1 6 9 6 10 12 13 6 10 12 13 6 10 12 13 6 10 12 13 6 10 12 13 6 10 11 6 10 11 6 10 11 6 10 11 7 -2 
Constraint Size : 24
files.byte = 970
no hi..
nRcv : 970
no break..
file_info.st_size : 970
files.byte 970
send done...
after run
after updatecover
after branch_idx
prev_ex 
cur_ex 
third branch_idx = 6
after checkprediction
after SymbolicPath
Solving Branch is 23!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (< (+ 0 (* x0 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (<= (+ (- 7) (* x1 1)) 0))
(assert (> (+ 1 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (> (+ 2 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))
(assert (> (+ 3 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (<= (+ (- 4) (* x1 1)) 0))
(assert (> (+ 4 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 5 (* x0 1)) 0))
(assert (<= (+ (- 3) (* x1 1)) 0))
(assert (> (+ 5 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 6 (* x0 1)) 0))
(assert (> (+ (- 2) (* x1 1)) 0))
(assert (>= (+ 7 (* x0 1)) 0))
(assert (> (+ (- 1) (* x1 1)) 0))
(assert (>= (+ 8 (* x0 1)) 0))
(assert (> (+ 0 (* x1 1)) 0))
(assert (>= (+ 9 (* x0 1)) 0))
(assert (<= (+ 1 (* x1 1)) 0))

==============
Solving Branch is 22!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (< (+ 0 (* x0 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (<= (+ (- 7) (* x1 1)) 0))
(assert (> (+ 1 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (> (+ 2 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))
(assert (> (+ 3 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (<= (+ (- 4) (* x1 1)) 0))
(assert (> (+ 4 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 5 (* x0 1)) 0))
(assert (<= (+ (- 3) (* x1 1)) 0))
(assert (> (+ 5 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 6 (* x0 1)) 0))
(assert (> (+ (- 2) (* x1 1)) 0))
(assert (>= (+ 7 (* x0 1)) 0))
(assert (> (+ (- 1) (* x1 1)) 0))
(assert (>= (+ 8 (* x0 1)) 0))
(assert (> (+ 0 (* x1 1)) 0))
(assert (< (+ 9 (* x0 1)) 0))

==============
Solving Branch is 21!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (< (+ 0 (* x0 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (<= (+ (- 7) (* x1 1)) 0))
(assert (> (+ 1 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (> (+ 2 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))
(assert (> (+ 3 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (<= (+ (- 4) (* x1 1)) 0))
(assert (> (+ 4 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 5 (* x0 1)) 0))
(assert (<= (+ (- 3) (* x1 1)) 0))
(assert (> (+ 5 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 6 (* x0 1)) 0))
(assert (> (+ (- 2) (* x1 1)) 0))
(assert (>= (+ 7 (* x0 1)) 0))
(assert (> (+ (- 1) (* x1 1)) 0))
(assert (>= (+ 8 (* x0 1)) 0))
(assert (<= (+ 0 (* x1 1)) 0))

==============
Solving Branch is 20!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (< (+ 0 (* x0 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (<= (+ (- 7) (* x1 1)) 0))
(assert (> (+ 1 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (> (+ 2 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))
(assert (> (+ 3 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (<= (+ (- 4) (* x1 1)) 0))
(assert (> (+ 4 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 5 (* x0 1)) 0))
(assert (<= (+ (- 3) (* x1 1)) 0))
(assert (> (+ 5 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 6 (* x0 1)) 0))
(assert (> (+ (- 2) (* x1 1)) 0))
(assert (>= (+ 7 (* x0 1)) 0))
(assert (> (+ (- 1) (* x1 1)) 0))
(assert (< (+ 8 (* x0 1)) 0))

==============
Solving Branch is 19!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (< (+ 0 (* x0 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (<= (+ (- 7) (* x1 1)) 0))
(assert (> (+ 1 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (> (+ 2 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))
(assert (> (+ 3 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (<= (+ (- 4) (* x1 1)) 0))
(assert (> (+ 4 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 5 (* x0 1)) 0))
(assert (<= (+ (- 3) (* x1 1)) 0))
(assert (> (+ 5 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 6 (* x0 1)) 0))
(assert (> (+ (- 2) (* x1 1)) 0))
(assert (>= (+ 7 (* x0 1)) 0))
(assert (<= (+ (- 1) (* x1 1)) 0))

==============
Solving Branch is 18!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (< (+ 0 (* x0 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (<= (+ (- 7) (* x1 1)) 0))
(assert (> (+ 1 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (> (+ 2 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))
(assert (> (+ 3 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (<= (+ (- 4) (* x1 1)) 0))
(assert (> (+ 4 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 5 (* x0 1)) 0))
(assert (<= (+ (- 3) (* x1 1)) 0))
(assert (> (+ 5 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 6 (* x0 1)) 0))
(assert (> (+ (- 2) (* x1 1)) 0))
(assert (< (+ 7 (* x0 1)) 0))

==============
Solving Branch is 17!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (< (+ 0 (* x0 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (<= (+ (- 7) (* x1 1)) 0))
(assert (> (+ 1 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (> (+ 2 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))
(assert (> (+ 3 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (<= (+ (- 4) (* x1 1)) 0))
(assert (> (+ 4 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 5 (* x0 1)) 0))
(assert (<= (+ (- 3) (* x1 1)) 0))
(assert (> (+ 5 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 6 (* x0 1)) 0))
(assert (<= (+ (- 2) (* x1 1)) 0))

==============
Solving Branch is 16!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (< (+ 0 (* x0 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (<= (+ (- 7) (* x1 1)) 0))
(assert (> (+ 1 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (> (+ 2 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))
(assert (> (+ 3 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (<= (+ (- 4) (* x1 1)) 0))
(assert (> (+ 4 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 5 (* x0 1)) 0))
(assert (<= (+ (- 3) (* x1 1)) 0))
(assert (> (+ 5 (* x0 3) (* x1 1)) 0))
(assert (< (+ 6 (* x0 1)) 0))

==============
Solving Branch is 15!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (< (+ 0 (* x0 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (<= (+ (- 7) (* x1 1)) 0))
(assert (> (+ 1 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (> (+ 2 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))
(assert (> (+ 3 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (<= (+ (- 4) (* x1 1)) 0))
(assert (> (+ 4 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 5 (* x0 1)) 0))
(assert (<= (+ (- 3) (* x1 1)) 0))
(assert (<= (+ 5 (* x0 3) (* x1 1)) 0))

==============
Solving Branch is 14!!!!
before solve at
sat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (< (+ 0 (* x0 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (<= (+ (- 7) (* x1 1)) 0))
(assert (> (+ 1 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (> (+ 2 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))
(assert (> (+ 3 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (<= (+ (- 4) (* x1 1)) 0))
(assert (> (+ 4 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 5 (* x0 1)) 0))
(assert (> (+ (- 3) (* x1 1)) 0))
(rmodel->model-converter-wrapper
x1 -> 4
x0 -> (- 1)
)

==============
after solve
Total Elapsed Time: 2.60803
  Search Time: 1.07239
  Solving Time: 0.917212
  Program Time: 0.618433
remote run 0
input string -1
4

parsin not complete!
branch size: 36
costraint size: 23
costraint size1: 23
costraint siz2e: 23
constraints_idx[0]:2constraints_idx[1]:4constraints_idx[2]:5constraints_idx[3]:6constraints_idx[4]:8constraints_idx[5]:9constraints_idx[6]:10constraints_idx[7]:12constraints_idx[8]:13constraints_idx[9]:14constraints_idx[10]:16constraints_idx[11]:17constraints_idx[12]:18constraints_idx[13]:20constraints_idx[14]:21constraints_idx[15]:23constraints_idx[16]:24constraints_idx[17]:26constraints_idx[18]:27constraints_idx[19]:29constraints_idx[20]:30constraints_idx[21]:32constraints_idx[22]:33costraint idx front: 2
parsing complete!
Iteration 33 (2s): covered 9 branches [1 reach funs, 10 reach branches].
path.constraints_idx[14]=21
-1 6 9 6 10 12 13 6 10 12 13 6 10 12 13 6 10 12 13 6 10 12 13 6 10 11 6 10 11 6 10 11 6 10 11 7 -2 
-1 6 9 6 10 12 13 6 10 12 13 6 10 12 13 6 10 12 13 6 10 11 6 10 11 6 10 11 6 10 11 6 10 11 7 -2 
Constraint Size : 23
files.byte = 924
no hi..
nRcv : 924
no break..
file_info.st_size : 924
files.byte 924
send done...
after run
after updatecover
after branch_idx
prev_ex 
cur_ex 
third branch_idx = 21
after checkprediction
after SymbolicPath
Solving Branch is 22!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (< (+ 0 (* x0 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (<= (+ (- 7) (* x1 1)) 0))
(assert (> (+ 1 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (> (+ 2 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))
(assert (> (+ 3 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (<= (+ (- 4) (* x1 1)) 0))
(assert (> (+ 4 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 5 (* x0 1)) 0))
(assert (> (+ (- 3) (* x1 1)) 0))
(assert (>= (+ 6 (* x0 1)) 0))
(assert (> (+ (- 2) (* x1 1)) 0))
(assert (>= (+ 7 (* x0 1)) 0))
(assert (> (+ (- 1) (* x1 1)) 0))
(assert (>= (+ 8 (* x0 1)) 0))
(assert (> (+ 0 (* x1 1)) 0))
(assert (>= (+ 9 (* x0 1)) 0))
(assert (<= (+ 1 (* x1 1)) 0))

==============
Solving Branch is 21!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (< (+ 0 (* x0 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (<= (+ (- 7) (* x1 1)) 0))
(assert (> (+ 1 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (> (+ 2 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))
(assert (> (+ 3 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (<= (+ (- 4) (* x1 1)) 0))
(assert (> (+ 4 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 5 (* x0 1)) 0))
(assert (> (+ (- 3) (* x1 1)) 0))
(assert (>= (+ 6 (* x0 1)) 0))
(assert (> (+ (- 2) (* x1 1)) 0))
(assert (>= (+ 7 (* x0 1)) 0))
(assert (> (+ (- 1) (* x1 1)) 0))
(assert (>= (+ 8 (* x0 1)) 0))
(assert (> (+ 0 (* x1 1)) 0))
(assert (< (+ 9 (* x0 1)) 0))

==============
Solving Branch is 20!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (< (+ 0 (* x0 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (<= (+ (- 7) (* x1 1)) 0))
(assert (> (+ 1 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (> (+ 2 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))
(assert (> (+ 3 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (<= (+ (- 4) (* x1 1)) 0))
(assert (> (+ 4 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 5 (* x0 1)) 0))
(assert (> (+ (- 3) (* x1 1)) 0))
(assert (>= (+ 6 (* x0 1)) 0))
(assert (> (+ (- 2) (* x1 1)) 0))
(assert (>= (+ 7 (* x0 1)) 0))
(assert (> (+ (- 1) (* x1 1)) 0))
(assert (>= (+ 8 (* x0 1)) 0))
(assert (<= (+ 0 (* x1 1)) 0))

==============
Solving Branch is 19!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (< (+ 0 (* x0 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (<= (+ (- 7) (* x1 1)) 0))
(assert (> (+ 1 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (> (+ 2 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))
(assert (> (+ 3 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (<= (+ (- 4) (* x1 1)) 0))
(assert (> (+ 4 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 5 (* x0 1)) 0))
(assert (> (+ (- 3) (* x1 1)) 0))
(assert (>= (+ 6 (* x0 1)) 0))
(assert (> (+ (- 2) (* x1 1)) 0))
(assert (>= (+ 7 (* x0 1)) 0))
(assert (> (+ (- 1) (* x1 1)) 0))
(assert (< (+ 8 (* x0 1)) 0))

==============
Solving Branch is 18!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (< (+ 0 (* x0 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (<= (+ (- 7) (* x1 1)) 0))
(assert (> (+ 1 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (> (+ 2 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))
(assert (> (+ 3 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (<= (+ (- 4) (* x1 1)) 0))
(assert (> (+ 4 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 5 (* x0 1)) 0))
(assert (> (+ (- 3) (* x1 1)) 0))
(assert (>= (+ 6 (* x0 1)) 0))
(assert (> (+ (- 2) (* x1 1)) 0))
(assert (>= (+ 7 (* x0 1)) 0))
(assert (<= (+ (- 1) (* x1 1)) 0))

==============
Solving Branch is 17!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (< (+ 0 (* x0 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (<= (+ (- 7) (* x1 1)) 0))
(assert (> (+ 1 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (> (+ 2 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))
(assert (> (+ 3 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (<= (+ (- 4) (* x1 1)) 0))
(assert (> (+ 4 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 5 (* x0 1)) 0))
(assert (> (+ (- 3) (* x1 1)) 0))
(assert (>= (+ 6 (* x0 1)) 0))
(assert (> (+ (- 2) (* x1 1)) 0))
(assert (< (+ 7 (* x0 1)) 0))

==============
Solving Branch is 16!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (< (+ 0 (* x0 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (<= (+ (- 7) (* x1 1)) 0))
(assert (> (+ 1 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (> (+ 2 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))
(assert (> (+ 3 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (<= (+ (- 4) (* x1 1)) 0))
(assert (> (+ 4 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 5 (* x0 1)) 0))
(assert (> (+ (- 3) (* x1 1)) 0))
(assert (>= (+ 6 (* x0 1)) 0))
(assert (<= (+ (- 2) (* x1 1)) 0))

==============
Solving Branch is 15!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (< (+ 0 (* x0 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (<= (+ (- 7) (* x1 1)) 0))
(assert (> (+ 1 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (> (+ 2 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))
(assert (> (+ 3 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (<= (+ (- 4) (* x1 1)) 0))
(assert (> (+ 4 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 5 (* x0 1)) 0))
(assert (> (+ (- 3) (* x1 1)) 0))
(assert (< (+ 6 (* x0 1)) 0))

==============
after for loop
after pureDfs final
Solving Branch is 13!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (< (+ 0 (* x0 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (<= (+ (- 7) (* x1 1)) 0))
(assert (> (+ 1 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (> (+ 2 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))
(assert (> (+ 3 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (<= (+ (- 4) (* x1 1)) 0))
(assert (> (+ 4 (* x0 3) (* x1 1)) 0))
(assert (< (+ 5 (* x0 1)) 0))

==============
Solving Branch is 12!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (< (+ 0 (* x0 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (<= (+ (- 7) (* x1 1)) 0))
(assert (> (+ 1 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (> (+ 2 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))
(assert (> (+ 3 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (<= (+ (- 4) (* x1 1)) 0))
(assert (<= (+ 4 (* x0 3) (* x1 1)) 0))

==============
Solving Branch is 11!!!!
before solve at
sat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (< (+ 0 (* x0 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (<= (+ (- 7) (* x1 1)) 0))
(assert (> (+ 1 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (> (+ 2 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))
(assert (> (+ 3 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (> (+ (- 4) (* x1 1)) 0))
(rmodel->model-converter-wrapper
x1 -> 5
x0 -> (- 1)
)

==============
after solve
Total Elapsed Time: 2.64964
  Search Time: 1.07376
  Solving Time: 0.940724
  Program Time: 0.635153
remote run 0
input string -1
5

parsin not complete!
branch size: 35
costraint size: 22
costraint size1: 22
costraint siz2e: 22
constraints_idx[0]:2constraints_idx[1]:4constraints_idx[2]:5constraints_idx[3]:6constraints_idx[4]:8constraints_idx[5]:9constraints_idx[6]:10constraints_idx[7]:12constraints_idx[8]:13constraints_idx[9]:14constraints_idx[10]:16constraints_idx[11]:17constraints_idx[12]:19constraints_idx[13]:20constraints_idx[14]:22constraints_idx[15]:23constraints_idx[16]:25constraints_idx[17]:26constraints_idx[18]:28constraints_idx[19]:29constraints_idx[20]:31constraints_idx[21]:32costraint idx front: 2
parsing complete!
Iteration 34 (2s): covered 9 branches [1 reach funs, 10 reach branches].
path.constraints_idx[11]=17
-1 6 9 6 10 12 13 6 10 12 13 6 10 12 13 6 10 12 13 6 10 12 13 6 10 11 6 10 11 6 10 11 6 10 11 7 -2 
-1 6 9 6 10 12 13 6 10 12 13 6 10 12 13 6 10 11 6 10 11 6 10 11 6 10 11 6 10 11 6 10 11 7 -2 
Constraint Size : 22
files.byte = 878
no hi..
nRcv : 878
no break..
file_info.st_size : 878
files.byte 878
send done...
after run
after updatecover
after branch_idx
prev_ex 
cur_ex 
third branch_idx = 17
after checkprediction
after SymbolicPath
Solving Branch is 21!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (< (+ 0 (* x0 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (<= (+ (- 7) (* x1 1)) 0))
(assert (> (+ 1 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (> (+ 2 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))
(assert (> (+ 3 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (> (+ (- 4) (* x1 1)) 0))
(assert (>= (+ 5 (* x0 1)) 0))
(assert (> (+ (- 3) (* x1 1)) 0))
(assert (>= (+ 6 (* x0 1)) 0))
(assert (> (+ (- 2) (* x1 1)) 0))
(assert (>= (+ 7 (* x0 1)) 0))
(assert (> (+ (- 1) (* x1 1)) 0))
(assert (>= (+ 8 (* x0 1)) 0))
(assert (> (+ 0 (* x1 1)) 0))
(assert (>= (+ 9 (* x0 1)) 0))
(assert (<= (+ 1 (* x1 1)) 0))

==============
Solving Branch is 20!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (< (+ 0 (* x0 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (<= (+ (- 7) (* x1 1)) 0))
(assert (> (+ 1 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (> (+ 2 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))
(assert (> (+ 3 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (> (+ (- 4) (* x1 1)) 0))
(assert (>= (+ 5 (* x0 1)) 0))
(assert (> (+ (- 3) (* x1 1)) 0))
(assert (>= (+ 6 (* x0 1)) 0))
(assert (> (+ (- 2) (* x1 1)) 0))
(assert (>= (+ 7 (* x0 1)) 0))
(assert (> (+ (- 1) (* x1 1)) 0))
(assert (>= (+ 8 (* x0 1)) 0))
(assert (> (+ 0 (* x1 1)) 0))
(assert (< (+ 9 (* x0 1)) 0))

==============
Solving Branch is 19!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (< (+ 0 (* x0 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (<= (+ (- 7) (* x1 1)) 0))
(assert (> (+ 1 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (> (+ 2 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))
(assert (> (+ 3 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (> (+ (- 4) (* x1 1)) 0))
(assert (>= (+ 5 (* x0 1)) 0))
(assert (> (+ (- 3) (* x1 1)) 0))
(assert (>= (+ 6 (* x0 1)) 0))
(assert (> (+ (- 2) (* x1 1)) 0))
(assert (>= (+ 7 (* x0 1)) 0))
(assert (> (+ (- 1) (* x1 1)) 0))
(assert (>= (+ 8 (* x0 1)) 0))
(assert (<= (+ 0 (* x1 1)) 0))

==============
Solving Branch is 18!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (< (+ 0 (* x0 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (<= (+ (- 7) (* x1 1)) 0))
(assert (> (+ 1 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (> (+ 2 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))
(assert (> (+ 3 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (> (+ (- 4) (* x1 1)) 0))
(assert (>= (+ 5 (* x0 1)) 0))
(assert (> (+ (- 3) (* x1 1)) 0))
(assert (>= (+ 6 (* x0 1)) 0))
(assert (> (+ (- 2) (* x1 1)) 0))
(assert (>= (+ 7 (* x0 1)) 0))
(assert (> (+ (- 1) (* x1 1)) 0))
(assert (< (+ 8 (* x0 1)) 0))

==============
Solving Branch is 17!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (< (+ 0 (* x0 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (<= (+ (- 7) (* x1 1)) 0))
(assert (> (+ 1 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (> (+ 2 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))
(assert (> (+ 3 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (> (+ (- 4) (* x1 1)) 0))
(assert (>= (+ 5 (* x0 1)) 0))
(assert (> (+ (- 3) (* x1 1)) 0))
(assert (>= (+ 6 (* x0 1)) 0))
(assert (> (+ (- 2) (* x1 1)) 0))
(assert (>= (+ 7 (* x0 1)) 0))
(assert (<= (+ (- 1) (* x1 1)) 0))

==============
Solving Branch is 16!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (< (+ 0 (* x0 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (<= (+ (- 7) (* x1 1)) 0))
(assert (> (+ 1 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (> (+ 2 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))
(assert (> (+ 3 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (> (+ (- 4) (* x1 1)) 0))
(assert (>= (+ 5 (* x0 1)) 0))
(assert (> (+ (- 3) (* x1 1)) 0))
(assert (>= (+ 6 (* x0 1)) 0))
(assert (> (+ (- 2) (* x1 1)) 0))
(assert (< (+ 7 (* x0 1)) 0))

==============
Solving Branch is 15!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (< (+ 0 (* x0 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (<= (+ (- 7) (* x1 1)) 0))
(assert (> (+ 1 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (> (+ 2 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))
(assert (> (+ 3 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (> (+ (- 4) (* x1 1)) 0))
(assert (>= (+ 5 (* x0 1)) 0))
(assert (> (+ (- 3) (* x1 1)) 0))
(assert (>= (+ 6 (* x0 1)) 0))
(assert (<= (+ (- 2) (* x1 1)) 0))

==============
Solving Branch is 14!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (< (+ 0 (* x0 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (<= (+ (- 7) (* x1 1)) 0))
(assert (> (+ 1 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (> (+ 2 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))
(assert (> (+ 3 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (> (+ (- 4) (* x1 1)) 0))
(assert (>= (+ 5 (* x0 1)) 0))
(assert (> (+ (- 3) (* x1 1)) 0))
(assert (< (+ 6 (* x0 1)) 0))

==============
Solving Branch is 13!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (< (+ 0 (* x0 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (<= (+ (- 7) (* x1 1)) 0))
(assert (> (+ 1 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (> (+ 2 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))
(assert (> (+ 3 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (> (+ (- 4) (* x1 1)) 0))
(assert (>= (+ 5 (* x0 1)) 0))
(assert (<= (+ (- 3) (* x1 1)) 0))

==============
Solving Branch is 12!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (< (+ 0 (* x0 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (<= (+ (- 7) (* x1 1)) 0))
(assert (> (+ 1 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (> (+ 2 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))
(assert (> (+ 3 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (> (+ (- 4) (* x1 1)) 0))
(assert (< (+ 5 (* x0 1)) 0))

==============
after for loop
after pureDfs final
Solving Branch is 10!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (< (+ 0 (* x0 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (<= (+ (- 7) (* x1 1)) 0))
(assert (> (+ 1 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (> (+ 2 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))
(assert (> (+ 3 (* x0 3) (* x1 1)) 0))
(assert (< (+ 4 (* x0 1)) 0))

==============
Solving Branch is 9!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (< (+ 0 (* x0 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (<= (+ (- 7) (* x1 1)) 0))
(assert (> (+ 1 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (> (+ 2 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))
(assert (<= (+ 3 (* x0 3) (* x1 1)) 0))

==============
Solving Branch is 8!!!!
before solve at
sat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (< (+ 0 (* x0 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (<= (+ (- 7) (* x1 1)) 0))
(assert (> (+ 1 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (> (+ 2 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (> (+ (- 5) (* x1 1)) 0))
(rmodel->model-converter-wrapper
x1 -> 6
x0 -> (- 1)
)

==============
after solve
Total Elapsed Time: 2.69498
  Search Time: 1.0751
  Solving Time: 0.963925
  Program Time: 0.655959
remote run 0
input string -1
6

parsin not complete!
branch size: 34
costraint size: 21
costraint size1: 21
costraint siz2e: 21
constraints_idx[0]:2constraints_idx[1]:4constraints_idx[2]:5constraints_idx[3]:6constraints_idx[4]:8constraints_idx[5]:9constraints_idx[6]:10constraints_idx[7]:12constraints_idx[8]:13constraints_idx[9]:15constraints_idx[10]:16constraints_idx[11]:18constraints_idx[12]:19constraints_idx[13]:21constraints_idx[14]:22constraints_idx[15]:24constraints_idx[16]:25constraints_idx[17]:27constraints_idx[18]:28constraints_idx[19]:30constraints_idx[20]:31costraint idx front: 2
parsing complete!
Iteration 35 (2s): covered 9 branches [1 reach funs, 10 reach branches].
path.constraints_idx[8]=13
-1 6 9 6 10 12 13 6 10 12 13 6 10 12 13 6 10 12 13 6 10 12 13 6 10 11 6 10 11 6 10 11 6 10 11 7 -2 
-1 6 9 6 10 12 13 6 10 12 13 6 10 11 6 10 11 6 10 11 6 10 11 6 10 11 6 10 11 6 10 11 7 -2 
Constraint Size : 21
files.byte = 832
no hi..
nRcv : 832
no break..
file_info.st_size : 832
files.byte 832
send done...
after run
after updatecover
after branch_idx
prev_ex 
cur_ex 
third branch_idx = 13
after checkprediction
after SymbolicPath
Solving Branch is 20!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (< (+ 0 (* x0 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (<= (+ (- 7) (* x1 1)) 0))
(assert (> (+ 1 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (> (+ 2 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (> (+ (- 5) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (> (+ (- 4) (* x1 1)) 0))
(assert (>= (+ 5 (* x0 1)) 0))
(assert (> (+ (- 3) (* x1 1)) 0))
(assert (>= (+ 6 (* x0 1)) 0))
(assert (> (+ (- 2) (* x1 1)) 0))
(assert (>= (+ 7 (* x0 1)) 0))
(assert (> (+ (- 1) (* x1 1)) 0))
(assert (>= (+ 8 (* x0 1)) 0))
(assert (> (+ 0 (* x1 1)) 0))
(assert (>= (+ 9 (* x0 1)) 0))
(assert (<= (+ 1 (* x1 1)) 0))

==============
Solving Branch is 19!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (< (+ 0 (* x0 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (<= (+ (- 7) (* x1 1)) 0))
(assert (> (+ 1 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (> (+ 2 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (> (+ (- 5) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (> (+ (- 4) (* x1 1)) 0))
(assert (>= (+ 5 (* x0 1)) 0))
(assert (> (+ (- 3) (* x1 1)) 0))
(assert (>= (+ 6 (* x0 1)) 0))
(assert (> (+ (- 2) (* x1 1)) 0))
(assert (>= (+ 7 (* x0 1)) 0))
(assert (> (+ (- 1) (* x1 1)) 0))
(assert (>= (+ 8 (* x0 1)) 0))
(assert (> (+ 0 (* x1 1)) 0))
(assert (< (+ 9 (* x0 1)) 0))

==============
Solving Branch is 18!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (< (+ 0 (* x0 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (<= (+ (- 7) (* x1 1)) 0))
(assert (> (+ 1 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (> (+ 2 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (> (+ (- 5) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (> (+ (- 4) (* x1 1)) 0))
(assert (>= (+ 5 (* x0 1)) 0))
(assert (> (+ (- 3) (* x1 1)) 0))
(assert (>= (+ 6 (* x0 1)) 0))
(assert (> (+ (- 2) (* x1 1)) 0))
(assert (>= (+ 7 (* x0 1)) 0))
(assert (> (+ (- 1) (* x1 1)) 0))
(assert (>= (+ 8 (* x0 1)) 0))
(assert (<= (+ 0 (* x1 1)) 0))

==============
Solving Branch is 17!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (< (+ 0 (* x0 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (<= (+ (- 7) (* x1 1)) 0))
(assert (> (+ 1 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (> (+ 2 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (> (+ (- 5) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (> (+ (- 4) (* x1 1)) 0))
(assert (>= (+ 5 (* x0 1)) 0))
(assert (> (+ (- 3) (* x1 1)) 0))
(assert (>= (+ 6 (* x0 1)) 0))
(assert (> (+ (- 2) (* x1 1)) 0))
(assert (>= (+ 7 (* x0 1)) 0))
(assert (> (+ (- 1) (* x1 1)) 0))
(assert (< (+ 8 (* x0 1)) 0))

==============
Solving Branch is 16!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (< (+ 0 (* x0 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (<= (+ (- 7) (* x1 1)) 0))
(assert (> (+ 1 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (> (+ 2 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (> (+ (- 5) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (> (+ (- 4) (* x1 1)) 0))
(assert (>= (+ 5 (* x0 1)) 0))
(assert (> (+ (- 3) (* x1 1)) 0))
(assert (>= (+ 6 (* x0 1)) 0))
(assert (> (+ (- 2) (* x1 1)) 0))
(assert (>= (+ 7 (* x0 1)) 0))
(assert (<= (+ (- 1) (* x1 1)) 0))

==============
Solving Branch is 15!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (< (+ 0 (* x0 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (<= (+ (- 7) (* x1 1)) 0))
(assert (> (+ 1 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (> (+ 2 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (> (+ (- 5) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (> (+ (- 4) (* x1 1)) 0))
(assert (>= (+ 5 (* x0 1)) 0))
(assert (> (+ (- 3) (* x1 1)) 0))
(assert (>= (+ 6 (* x0 1)) 0))
(assert (> (+ (- 2) (* x1 1)) 0))
(assert (< (+ 7 (* x0 1)) 0))

==============
Solving Branch is 14!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (< (+ 0 (* x0 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (<= (+ (- 7) (* x1 1)) 0))
(assert (> (+ 1 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (> (+ 2 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (> (+ (- 5) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (> (+ (- 4) (* x1 1)) 0))
(assert (>= (+ 5 (* x0 1)) 0))
(assert (> (+ (- 3) (* x1 1)) 0))
(assert (>= (+ 6 (* x0 1)) 0))
(assert (<= (+ (- 2) (* x1 1)) 0))

==============
Solving Branch is 13!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (< (+ 0 (* x0 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (<= (+ (- 7) (* x1 1)) 0))
(assert (> (+ 1 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (> (+ 2 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (> (+ (- 5) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (> (+ (- 4) (* x1 1)) 0))
(assert (>= (+ 5 (* x0 1)) 0))
(assert (> (+ (- 3) (* x1 1)) 0))
(assert (< (+ 6 (* x0 1)) 0))

==============
Solving Branch is 12!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (< (+ 0 (* x0 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (<= (+ (- 7) (* x1 1)) 0))
(assert (> (+ 1 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (> (+ 2 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (> (+ (- 5) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (> (+ (- 4) (* x1 1)) 0))
(assert (>= (+ 5 (* x0 1)) 0))
(assert (<= (+ (- 3) (* x1 1)) 0))

==============
Solving Branch is 11!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (< (+ 0 (* x0 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (<= (+ (- 7) (* x1 1)) 0))
(assert (> (+ 1 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (> (+ 2 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (> (+ (- 5) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (> (+ (- 4) (* x1 1)) 0))
(assert (< (+ 5 (* x0 1)) 0))

==============
Solving Branch is 10!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (< (+ 0 (* x0 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (<= (+ (- 7) (* x1 1)) 0))
(assert (> (+ 1 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (> (+ 2 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (> (+ (- 5) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (<= (+ (- 4) (* x1 1)) 0))

==============
Solving Branch is 9!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (< (+ 0 (* x0 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (<= (+ (- 7) (* x1 1)) 0))
(assert (> (+ 1 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (> (+ 2 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (> (+ (- 5) (* x1 1)) 0))
(assert (< (+ 4 (* x0 1)) 0))

==============
after for loop
after pureDfs final
Solving Branch is 7!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (< (+ 0 (* x0 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (<= (+ (- 7) (* x1 1)) 0))
(assert (> (+ 1 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (> (+ 2 (* x0 3) (* x1 1)) 0))
(assert (< (+ 3 (* x0 1)) 0))

==============
Solving Branch is 6!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (< (+ 0 (* x0 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (<= (+ (- 7) (* x1 1)) 0))
(assert (> (+ 1 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (<= (+ 2 (* x0 3) (* x1 1)) 0))

==============
Solving Branch is 5!!!!
before solve at
sat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (< (+ 0 (* x0 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (<= (+ (- 7) (* x1 1)) 0))
(assert (> (+ 1 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (> (+ (- 6) (* x1 1)) 0))
(rmodel->model-converter-wrapper
x1 -> 7
x0 -> (- 1)
)

==============
after solve
Total Elapsed Time: 2.74453
  Search Time: 1.07654
  Solving Time: 0.990787
  Program Time: 0.677204
remote run 0
input string -1
7

parsin not complete!
branch size: 33
costraint size: 20
costraint size1: 20
costraint siz2e: 20
constraints_idx[0]:2constraints_idx[1]:4constraints_idx[2]:5constraints_idx[3]:6constraints_idx[4]:8constraints_idx[5]:9constraints_idx[6]:11constraints_idx[7]:12constraints_idx[8]:14constraints_idx[9]:15constraints_idx[10]:17constraints_idx[11]:18constraints_idx[12]:20constraints_idx[13]:21constraints_idx[14]:23constraints_idx[15]:24constraints_idx[16]:26constraints_idx[17]:27constraints_idx[18]:29constraints_idx[19]:30costraint idx front: 2
parsing complete!
Iteration 36 (2s): covered 9 branches [1 reach funs, 10 reach branches].
path.constraints_idx[5]=9
-1 6 9 6 10 12 13 6 10 12 13 6 10 12 13 6 10 12 13 6 10 12 13 6 10 11 6 10 11 6 10 11 6 10 11 7 -2 
-1 6 9 6 10 12 13 6 10 11 6 10 11 6 10 11 6 10 11 6 10 11 6 10 11 6 10 11 6 10 11 7 -2 
Constraint Size : 20
files.byte = 786
no hi..
nRcv : 786
no break..
file_info.st_size : 786
files.byte 786
send done...
after run
after updatecover
after branch_idx
prev_ex 
cur_ex 
third branch_idx = 9
after checkprediction
after SymbolicPath
Solving Branch is 19!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (< (+ 0 (* x0 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (<= (+ (- 7) (* x1 1)) 0))
(assert (> (+ 1 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (> (+ (- 6) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (> (+ (- 5) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (> (+ (- 4) (* x1 1)) 0))
(assert (>= (+ 5 (* x0 1)) 0))
(assert (> (+ (- 3) (* x1 1)) 0))
(assert (>= (+ 6 (* x0 1)) 0))
(assert (> (+ (- 2) (* x1 1)) 0))
(assert (>= (+ 7 (* x0 1)) 0))
(assert (> (+ (- 1) (* x1 1)) 0))
(assert (>= (+ 8 (* x0 1)) 0))
(assert (> (+ 0 (* x1 1)) 0))
(assert (>= (+ 9 (* x0 1)) 0))
(assert (<= (+ 1 (* x1 1)) 0))

==============
Solving Branch is 18!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (< (+ 0 (* x0 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (<= (+ (- 7) (* x1 1)) 0))
(assert (> (+ 1 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (> (+ (- 6) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (> (+ (- 5) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (> (+ (- 4) (* x1 1)) 0))
(assert (>= (+ 5 (* x0 1)) 0))
(assert (> (+ (- 3) (* x1 1)) 0))
(assert (>= (+ 6 (* x0 1)) 0))
(assert (> (+ (- 2) (* x1 1)) 0))
(assert (>= (+ 7 (* x0 1)) 0))
(assert (> (+ (- 1) (* x1 1)) 0))
(assert (>= (+ 8 (* x0 1)) 0))
(assert (> (+ 0 (* x1 1)) 0))
(assert (< (+ 9 (* x0 1)) 0))

==============
Solving Branch is 17!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (< (+ 0 (* x0 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (<= (+ (- 7) (* x1 1)) 0))
(assert (> (+ 1 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (> (+ (- 6) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (> (+ (- 5) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (> (+ (- 4) (* x1 1)) 0))
(assert (>= (+ 5 (* x0 1)) 0))
(assert (> (+ (- 3) (* x1 1)) 0))
(assert (>= (+ 6 (* x0 1)) 0))
(assert (> (+ (- 2) (* x1 1)) 0))
(assert (>= (+ 7 (* x0 1)) 0))
(assert (> (+ (- 1) (* x1 1)) 0))
(assert (>= (+ 8 (* x0 1)) 0))
(assert (<= (+ 0 (* x1 1)) 0))

==============
Solving Branch is 16!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (< (+ 0 (* x0 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (<= (+ (- 7) (* x1 1)) 0))
(assert (> (+ 1 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (> (+ (- 6) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (> (+ (- 5) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (> (+ (- 4) (* x1 1)) 0))
(assert (>= (+ 5 (* x0 1)) 0))
(assert (> (+ (- 3) (* x1 1)) 0))
(assert (>= (+ 6 (* x0 1)) 0))
(assert (> (+ (- 2) (* x1 1)) 0))
(assert (>= (+ 7 (* x0 1)) 0))
(assert (> (+ (- 1) (* x1 1)) 0))
(assert (< (+ 8 (* x0 1)) 0))

==============
Solving Branch is 15!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (< (+ 0 (* x0 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (<= (+ (- 7) (* x1 1)) 0))
(assert (> (+ 1 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (> (+ (- 6) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (> (+ (- 5) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (> (+ (- 4) (* x1 1)) 0))
(assert (>= (+ 5 (* x0 1)) 0))
(assert (> (+ (- 3) (* x1 1)) 0))
(assert (>= (+ 6 (* x0 1)) 0))
(assert (> (+ (- 2) (* x1 1)) 0))
(assert (>= (+ 7 (* x0 1)) 0))
(assert (<= (+ (- 1) (* x1 1)) 0))

==============
Solving Branch is 14!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (< (+ 0 (* x0 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (<= (+ (- 7) (* x1 1)) 0))
(assert (> (+ 1 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (> (+ (- 6) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (> (+ (- 5) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (> (+ (- 4) (* x1 1)) 0))
(assert (>= (+ 5 (* x0 1)) 0))
(assert (> (+ (- 3) (* x1 1)) 0))
(assert (>= (+ 6 (* x0 1)) 0))
(assert (> (+ (- 2) (* x1 1)) 0))
(assert (< (+ 7 (* x0 1)) 0))

==============
Solving Branch is 13!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (< (+ 0 (* x0 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (<= (+ (- 7) (* x1 1)) 0))
(assert (> (+ 1 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (> (+ (- 6) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (> (+ (- 5) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (> (+ (- 4) (* x1 1)) 0))
(assert (>= (+ 5 (* x0 1)) 0))
(assert (> (+ (- 3) (* x1 1)) 0))
(assert (>= (+ 6 (* x0 1)) 0))
(assert (<= (+ (- 2) (* x1 1)) 0))

==============
Solving Branch is 12!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (< (+ 0 (* x0 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (<= (+ (- 7) (* x1 1)) 0))
(assert (> (+ 1 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (> (+ (- 6) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (> (+ (- 5) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (> (+ (- 4) (* x1 1)) 0))
(assert (>= (+ 5 (* x0 1)) 0))
(assert (> (+ (- 3) (* x1 1)) 0))
(assert (< (+ 6 (* x0 1)) 0))

==============
Solving Branch is 11!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (< (+ 0 (* x0 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (<= (+ (- 7) (* x1 1)) 0))
(assert (> (+ 1 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (> (+ (- 6) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (> (+ (- 5) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (> (+ (- 4) (* x1 1)) 0))
(assert (>= (+ 5 (* x0 1)) 0))
(assert (<= (+ (- 3) (* x1 1)) 0))

==============
Solving Branch is 10!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (< (+ 0 (* x0 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (<= (+ (- 7) (* x1 1)) 0))
(assert (> (+ 1 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (> (+ (- 6) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (> (+ (- 5) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (> (+ (- 4) (* x1 1)) 0))
(assert (< (+ 5 (* x0 1)) 0))

==============
Solving Branch is 9!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (< (+ 0 (* x0 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (<= (+ (- 7) (* x1 1)) 0))
(assert (> (+ 1 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (> (+ (- 6) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (> (+ (- 5) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (<= (+ (- 4) (* x1 1)) 0))

==============
Solving Branch is 8!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (< (+ 0 (* x0 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (<= (+ (- 7) (* x1 1)) 0))
(assert (> (+ 1 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (> (+ (- 6) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (> (+ (- 5) (* x1 1)) 0))
(assert (< (+ 4 (* x0 1)) 0))

==============
Solving Branch is 7!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (< (+ 0 (* x0 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (<= (+ (- 7) (* x1 1)) 0))
(assert (> (+ 1 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (> (+ (- 6) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))

==============
Solving Branch is 6!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (< (+ 0 (* x0 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (<= (+ (- 7) (* x1 1)) 0))
(assert (> (+ 1 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (> (+ (- 6) (* x1 1)) 0))
(assert (< (+ 3 (* x0 1)) 0))

==============
after for loop
after pureDfs final
Solving Branch is 4!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (< (+ 0 (* x0 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (<= (+ (- 7) (* x1 1)) 0))
(assert (> (+ 1 (* x0 3) (* x1 1)) 0))
(assert (< (+ 2 (* x0 1)) 0))

==============
after for loop
after pureDfs final
Solving Branch is 2!!!!
before solve at
sat : (declare-fun x1 () Int)
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (> (+ (- 7) (* x1 1)) 0))
(rmodel->model-converter-wrapper
x1 -> 8
)

==============
after solve
Total Elapsed Time: 2.79034
  Search Time: 1.07778
  Solving Time: 1.01608
  Program Time: 0.696479
remote run 0
input string -1
8

parsin not complete!
branch size: 32
costraint size: 19
costraint size1: 19
costraint siz2e: 19
constraints_idx[0]:2constraints_idx[1]:4constraints_idx[2]:5constraints_idx[3]:7constraints_idx[4]:8constraints_idx[5]:10constraints_idx[6]:11constraints_idx[7]:13constraints_idx[8]:14constraints_idx[9]:16constraints_idx[10]:17constraints_idx[11]:19constraints_idx[12]:20constraints_idx[13]:22constraints_idx[14]:23constraints_idx[15]:25constraints_idx[16]:26constraints_idx[17]:28constraints_idx[18]:29costraint idx front: 2
parsing complete!
Iteration 37 (2s): covered 9 branches [1 reach funs, 10 reach branches].
path.constraints_idx[2]=5
-1 6 9 6 10 12 14 15 6 10 12 14 15 6 10 12 14 15 6 10 12 13 6 10 12 13 6 10 12 13 6 10 12 13 6 10 12 13 6 10 11 7 -2 
-1 6 9 6 10 11 6 10 11 6 10 11 6 10 11 6 10 11 6 10 11 6 10 11 6 10 11 6 10 11 7 -2 
Constraint Size : 19
files.byte = 740
no hi..
nRcv : 740
no break..
file_info.st_size : 740
files.byte 740
send done...
after run
after updatecover
after branch_idx
prev_ex 
cur_ex 
third branch_idx = 5
after checkprediction
after SymbolicPath
Solving Branch is 18!!!!
before solve at
unsat : (declare-fun x1 () Int)
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (> (+ (- 7) (* x1 1)) 0))
(assert (> (+ (- 6) (* x1 1)) 0))
(assert (> (+ (- 5) (* x1 1)) 0))
(assert (> (+ (- 4) (* x1 1)) 0))
(assert (> (+ (- 3) (* x1 1)) 0))
(assert (> (+ (- 2) (* x1 1)) 0))
(assert (> (+ (- 1) (* x1 1)) 0))
(assert (> (+ 0 (* x1 1)) 0))
(assert (<= (+ 1 (* x1 1)) 0))

==============
Solving Branch is 17!!!!
before solve at
unsat : (declare-fun x0 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (< (+ 0 (* x0 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (>= (+ 5 (* x0 1)) 0))
(assert (>= (+ 6 (* x0 1)) 0))
(assert (>= (+ 7 (* x0 1)) 0))
(assert (>= (+ 8 (* x0 1)) 0))
(assert (< (+ 9 (* x0 1)) 0))

==============
Solving Branch is 16!!!!
before solve at
unsat : (declare-fun x1 () Int)
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (> (+ (- 7) (* x1 1)) 0))
(assert (> (+ (- 6) (* x1 1)) 0))
(assert (> (+ (- 5) (* x1 1)) 0))
(assert (> (+ (- 4) (* x1 1)) 0))
(assert (> (+ (- 3) (* x1 1)) 0))
(assert (> (+ (- 2) (* x1 1)) 0))
(assert (> (+ (- 1) (* x1 1)) 0))
(assert (<= (+ 0 (* x1 1)) 0))

==============
Solving Branch is 15!!!!
before solve at
unsat : (declare-fun x0 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (< (+ 0 (* x0 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (>= (+ 5 (* x0 1)) 0))
(assert (>= (+ 6 (* x0 1)) 0))
(assert (>= (+ 7 (* x0 1)) 0))
(assert (< (+ 8 (* x0 1)) 0))

==============
Solving Branch is 14!!!!
before solve at
unsat : (declare-fun x1 () Int)
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (> (+ (- 7) (* x1 1)) 0))
(assert (> (+ (- 6) (* x1 1)) 0))
(assert (> (+ (- 5) (* x1 1)) 0))
(assert (> (+ (- 4) (* x1 1)) 0))
(assert (> (+ (- 3) (* x1 1)) 0))
(assert (> (+ (- 2) (* x1 1)) 0))
(assert (<= (+ (- 1) (* x1 1)) 0))

==============
Solving Branch is 13!!!!
before solve at
unsat : (declare-fun x0 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (< (+ 0 (* x0 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (>= (+ 5 (* x0 1)) 0))
(assert (>= (+ 6 (* x0 1)) 0))
(assert (< (+ 7 (* x0 1)) 0))

==============
Solving Branch is 12!!!!
before solve at
unsat : (declare-fun x1 () Int)
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (> (+ (- 7) (* x1 1)) 0))
(assert (> (+ (- 6) (* x1 1)) 0))
(assert (> (+ (- 5) (* x1 1)) 0))
(assert (> (+ (- 4) (* x1 1)) 0))
(assert (> (+ (- 3) (* x1 1)) 0))
(assert (<= (+ (- 2) (* x1 1)) 0))

==============
Solving Branch is 11!!!!
before solve at
unsat : (declare-fun x0 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (< (+ 0 (* x0 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (>= (+ 5 (* x0 1)) 0))
(assert (< (+ 6 (* x0 1)) 0))

==============
Solving Branch is 10!!!!
before solve at
unsat : (declare-fun x1 () Int)
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (> (+ (- 7) (* x1 1)) 0))
(assert (> (+ (- 6) (* x1 1)) 0))
(assert (> (+ (- 5) (* x1 1)) 0))
(assert (> (+ (- 4) (* x1 1)) 0))
(assert (<= (+ (- 3) (* x1 1)) 0))

==============
Solving Branch is 9!!!!
before solve at
unsat : (declare-fun x0 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (< (+ 0 (* x0 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (< (+ 5 (* x0 1)) 0))

==============
Solving Branch is 8!!!!
before solve at
unsat : (declare-fun x1 () Int)
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (> (+ (- 7) (* x1 1)) 0))
(assert (> (+ (- 6) (* x1 1)) 0))
(assert (> (+ (- 5) (* x1 1)) 0))
(assert (<= (+ (- 4) (* x1 1)) 0))

==============
Solving Branch is 7!!!!
before solve at
unsat : (declare-fun x0 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (< (+ 0 (* x0 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (< (+ 4 (* x0 1)) 0))

==============
Solving Branch is 6!!!!
before solve at
unsat : (declare-fun x1 () Int)
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (> (+ (- 7) (* x1 1)) 0))
(assert (> (+ (- 6) (* x1 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))

==============
Solving Branch is 5!!!!
before solve at
unsat : (declare-fun x0 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (< (+ 0 (* x0 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (< (+ 3 (* x0 1)) 0))

==============
Solving Branch is 4!!!!
before solve at
unsat : (declare-fun x1 () Int)
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (> (+ (- 7) (* x1 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))

==============
Solving Branch is 3!!!!
before solve at
unsat : (declare-fun x0 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (< (+ 0 (* x0 1)) 0))
(assert (>= (+ 1 (* x0 1)) 0))
(assert (< (+ 2 (* x0 1)) 0))

==============
after for loop
after pureDfs final
Solving Branch is 1!!!!
before solve at
sat : (declare-fun x0 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (< (+ 0 (* x0 1)) 0))
(assert (< (+ 1 (* x0 1)) 0))
(rmodel->model-converter-wrapper
x0 -> (- 2)
)

==============
after solve
Total Elapsed Time: 2.8269
  Search Time: 1.07945
  Solving Time: 1.03558
  Program Time: 0.711877
remote run 0
input string -2
0

parsin not complete!
branch size: 43
costraint size: 30
costraint size1: 30
costraint siz2e: 30
constraints_idx[0]:2constraints_idx[1]:4constraints_idx[2]:6constraints_idx[3]:7constraints_idx[4]:8constraints_idx[5]:9constraints_idx[6]:11constraints_idx[7]:12constraints_idx[8]:13constraints_idx[9]:14constraints_idx[10]:16constraints_idx[11]:17constraints_idx[12]:18constraints_idx[13]:19constraints_idx[14]:21constraints_idx[15]:22constraints_idx[16]:23constraints_idx[17]:24constraints_idx[18]:26constraints_idx[19]:27constraints_idx[20]:28constraints_idx[21]:29constraints_idx[22]:31constraints_idx[23]:32constraints_idx[24]:33constraints_idx[25]:35constraints_idx[26]:36constraints_idx[27]:37constraints_idx[28]:39constraints_idx[29]:40costraint idx front: 2
parsing complete!
Iteration 38 (2s): covered 9 branches [1 reach funs, 10 reach branches].
path.constraints_idx[1]=4
-1 6 9 6 10 12 14 15 6 10 12 14 15 6 10 12 14 15 6 10 12 13 6 10 12 13 6 10 12 13 6 10 12 13 6 10 12 13 6 10 11 7 -2 
-1 6 9 6 9 6 10 12 14 15 6 10 12 14 15 6 10 12 14 15 6 10 12 14 15 6 10 12 14 15 6 10 12 13 6 10 12 13 6 10 11 7 -2 
Constraint Size : 30
files.byte = 1258
no hi..
nRcv : 1024
no break..
file_info.st_size : 1024
files.byte 1258
no hi..
nRcv : 234
no break..
file_info.st_size : 1258
files.byte 1258
send done...
after run
after updatecover
after branch_idx
prev_ex 
cur_ex 
third branch_idx = 4
after checkprediction
after SymbolicPath
Solving Branch is 29!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (< (+ 0 (* x0 1)) 0))
(assert (< (+ 1 (* x0 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (<= (+ 2 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 8) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))
(assert (<= (+ 3 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 7) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (<= (+ (- 4) (* x1 1)) 0))
(assert (<= (+ 4 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 6) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 5 (* x0 1)) 0))
(assert (<= (+ (- 3) (* x1 1)) 0))
(assert (<= (+ 5 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 5) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 6 (* x0 1)) 0))
(assert (<= (+ (- 2) (* x1 1)) 0))
(assert (<= (+ 6 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 4) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 7 (* x0 1)) 0))
(assert (<= (+ (- 1) (* x1 1)) 0))
(assert (> (+ 7 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 8 (* x0 1)) 0))
(assert (<= (+ 0 (* x1 1)) 0))
(assert (> (+ 8 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 9 (* x0 1)) 0))
(assert (<= (+ 1 (* x1 1)) 0))

==============
Solving Branch is 28!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (< (+ 0 (* x0 1)) 0))
(assert (< (+ 1 (* x0 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (<= (+ 2 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 8) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))
(assert (<= (+ 3 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 7) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (<= (+ (- 4) (* x1 1)) 0))
(assert (<= (+ 4 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 6) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 5 (* x0 1)) 0))
(assert (<= (+ (- 3) (* x1 1)) 0))
(assert (<= (+ 5 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 5) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 6 (* x0 1)) 0))
(assert (<= (+ (- 2) (* x1 1)) 0))
(assert (<= (+ 6 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 4) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 7 (* x0 1)) 0))
(assert (<= (+ (- 1) (* x1 1)) 0))
(assert (> (+ 7 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 8 (* x0 1)) 0))
(assert (<= (+ 0 (* x1 1)) 0))
(assert (> (+ 8 (* x0 3) (* x1 1)) 0))
(assert (< (+ 9 (* x0 1)) 0))

==============
Solving Branch is 27!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (< (+ 0 (* x0 1)) 0))
(assert (< (+ 1 (* x0 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (<= (+ 2 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 8) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))
(assert (<= (+ 3 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 7) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (<= (+ (- 4) (* x1 1)) 0))
(assert (<= (+ 4 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 6) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 5 (* x0 1)) 0))
(assert (<= (+ (- 3) (* x1 1)) 0))
(assert (<= (+ 5 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 5) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 6 (* x0 1)) 0))
(assert (<= (+ (- 2) (* x1 1)) 0))
(assert (<= (+ 6 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 4) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 7 (* x0 1)) 0))
(assert (<= (+ (- 1) (* x1 1)) 0))
(assert (> (+ 7 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 8 (* x0 1)) 0))
(assert (<= (+ 0 (* x1 1)) 0))
(assert (<= (+ 8 (* x0 3) (* x1 1)) 0))

==============
Solving Branch is 26!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (< (+ 0 (* x0 1)) 0))
(assert (< (+ 1 (* x0 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (<= (+ 2 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 8) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))
(assert (<= (+ 3 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 7) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (<= (+ (- 4) (* x1 1)) 0))
(assert (<= (+ 4 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 6) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 5 (* x0 1)) 0))
(assert (<= (+ (- 3) (* x1 1)) 0))
(assert (<= (+ 5 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 5) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 6 (* x0 1)) 0))
(assert (<= (+ (- 2) (* x1 1)) 0))
(assert (<= (+ 6 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 4) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 7 (* x0 1)) 0))
(assert (<= (+ (- 1) (* x1 1)) 0))
(assert (> (+ 7 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 8 (* x0 1)) 0))
(assert (> (+ 0 (* x1 1)) 0))

==============
Solving Branch is 25!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (< (+ 0 (* x0 1)) 0))
(assert (< (+ 1 (* x0 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (<= (+ 2 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 8) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))
(assert (<= (+ 3 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 7) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (<= (+ (- 4) (* x1 1)) 0))
(assert (<= (+ 4 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 6) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 5 (* x0 1)) 0))
(assert (<= (+ (- 3) (* x1 1)) 0))
(assert (<= (+ 5 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 5) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 6 (* x0 1)) 0))
(assert (<= (+ (- 2) (* x1 1)) 0))
(assert (<= (+ 6 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 4) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 7 (* x0 1)) 0))
(assert (<= (+ (- 1) (* x1 1)) 0))
(assert (> (+ 7 (* x0 3) (* x1 1)) 0))
(assert (< (+ 8 (* x0 1)) 0))

==============
Solving Branch is 24!!!!
before solve at
sat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (< (+ 0 (* x0 1)) 0))
(assert (< (+ 1 (* x0 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (<= (+ 2 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 8) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))
(assert (<= (+ 3 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 7) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (<= (+ (- 4) (* x1 1)) 0))
(assert (<= (+ 4 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 6) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 5 (* x0 1)) 0))
(assert (<= (+ (- 3) (* x1 1)) 0))
(assert (<= (+ 5 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 5) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 6 (* x0 1)) 0))
(assert (<= (+ (- 2) (* x1 1)) 0))
(assert (<= (+ 6 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 4) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 7 (* x0 1)) 0))
(assert (<= (+ (- 1) (* x1 1)) 0))
(assert (<= (+ 7 (* x0 3) (* x1 1)) 0))
(rmodel->model-converter-wrapper
x1 -> (- 1)
x0 -> (- 2)
)

==============
after solve
Total Elapsed Time: 2.86482
  Search Time: 1.08101
  Solving Time: 1.05363
  Program Time: 0.730182
remote run 0
input string -2
-1

parsin not complete!
branch size: 45
costraint size: 32
costraint size1: 32
costraint siz2e: 32
constraints_idx[0]:2constraints_idx[1]:4constraints_idx[2]:6constraints_idx[3]:7constraints_idx[4]:8constraints_idx[5]:9constraints_idx[6]:11constraints_idx[7]:12constraints_idx[8]:13constraints_idx[9]:14constraints_idx[10]:16constraints_idx[11]:17constraints_idx[12]:18constraints_idx[13]:19constraints_idx[14]:21constraints_idx[15]:22constraints_idx[16]:23constraints_idx[17]:24constraints_idx[18]:26constraints_idx[19]:27constraints_idx[20]:28constraints_idx[21]:29constraints_idx[22]:31constraints_idx[23]:32constraints_idx[24]:33constraints_idx[25]:34constraints_idx[26]:36constraints_idx[27]:37constraints_idx[28]:38constraints_idx[29]:40constraints_idx[30]:41constraints_idx[31]:42costraint idx front: 2
parsing complete!
Iteration 39 (2s): covered 9 branches [1 reach funs, 10 reach branches].
path.constraints_idx[24]=33
-1 6 9 6 9 6 10 12 14 15 6 10 12 14 15 6 10 12 14 15 6 10 12 14 15 6 10 12 14 15 6 10 12 13 6 10 12 13 6 10 11 7 -2 
-1 6 9 6 9 6 10 12 14 15 6 10 12 14 15 6 10 12 14 15 6 10 12 14 15 6 10 12 14 15 6 10 12 14 15 6 10 12 13 6 10 12 13 7 -2 
Constraint Size : 32
files.byte = 1350
no hi..
nRcv : 1024
no break..
file_info.st_size : 1024
files.byte 1350
no hi..
nRcv : 326
no break..
file_info.st_size : 1350
files.byte 1350
send done...
after run
after updatecover
after branch_idx
prev_ex 
cur_ex 
third branch_idx = 33
after checkprediction
after SymbolicPath
Solving Branch is 31!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (< (+ 0 (* x0 1)) 0))
(assert (< (+ 1 (* x0 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (<= (+ 2 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 8) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))
(assert (<= (+ 3 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 7) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (<= (+ (- 4) (* x1 1)) 0))
(assert (<= (+ 4 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 6) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 5 (* x0 1)) 0))
(assert (<= (+ (- 3) (* x1 1)) 0))
(assert (<= (+ 5 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 5) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 6 (* x0 1)) 0))
(assert (<= (+ (- 2) (* x1 1)) 0))
(assert (<= (+ 6 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 4) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 7 (* x0 1)) 0))
(assert (<= (+ (- 1) (* x1 1)) 0))
(assert (<= (+ 7 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 3) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 8 (* x0 1)) 0))
(assert (<= (+ 0 (* x1 1)) 0))
(assert (> (+ 8 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 9 (* x0 1)) 0))
(assert (<= (+ 1 (* x1 1)) 0))
(assert (<= (+ 9 (* x0 3) (* x1 1)) 0))

==============
Solving Branch is 30!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (< (+ 0 (* x0 1)) 0))
(assert (< (+ 1 (* x0 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (<= (+ 2 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 8) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))
(assert (<= (+ 3 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 7) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (<= (+ (- 4) (* x1 1)) 0))
(assert (<= (+ 4 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 6) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 5 (* x0 1)) 0))
(assert (<= (+ (- 3) (* x1 1)) 0))
(assert (<= (+ 5 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 5) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 6 (* x0 1)) 0))
(assert (<= (+ (- 2) (* x1 1)) 0))
(assert (<= (+ 6 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 4) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 7 (* x0 1)) 0))
(assert (<= (+ (- 1) (* x1 1)) 0))
(assert (<= (+ 7 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 3) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 8 (* x0 1)) 0))
(assert (<= (+ 0 (* x1 1)) 0))
(assert (> (+ 8 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 9 (* x0 1)) 0))
(assert (> (+ 1 (* x1 1)) 0))

==============
Solving Branch is 29!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (< (+ 0 (* x0 1)) 0))
(assert (< (+ 1 (* x0 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (<= (+ 2 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 8) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))
(assert (<= (+ 3 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 7) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (<= (+ (- 4) (* x1 1)) 0))
(assert (<= (+ 4 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 6) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 5 (* x0 1)) 0))
(assert (<= (+ (- 3) (* x1 1)) 0))
(assert (<= (+ 5 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 5) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 6 (* x0 1)) 0))
(assert (<= (+ (- 2) (* x1 1)) 0))
(assert (<= (+ 6 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 4) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 7 (* x0 1)) 0))
(assert (<= (+ (- 1) (* x1 1)) 0))
(assert (<= (+ 7 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 3) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 8 (* x0 1)) 0))
(assert (<= (+ 0 (* x1 1)) 0))
(assert (> (+ 8 (* x0 3) (* x1 1)) 0))
(assert (< (+ 9 (* x0 1)) 0))

==============
Solving Branch is 28!!!!
before solve at
sat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (< (+ 0 (* x0 1)) 0))
(assert (< (+ 1 (* x0 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (<= (+ 2 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 8) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))
(assert (<= (+ 3 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 7) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (<= (+ (- 4) (* x1 1)) 0))
(assert (<= (+ 4 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 6) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 5 (* x0 1)) 0))
(assert (<= (+ (- 3) (* x1 1)) 0))
(assert (<= (+ 5 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 5) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 6 (* x0 1)) 0))
(assert (<= (+ (- 2) (* x1 1)) 0))
(assert (<= (+ 6 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 4) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 7 (* x0 1)) 0))
(assert (<= (+ (- 1) (* x1 1)) 0))
(assert (<= (+ 7 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 3) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 8 (* x0 1)) 0))
(assert (<= (+ 0 (* x1 1)) 0))
(assert (<= (+ 8 (* x0 3) (* x1 1)) 0))
(rmodel->model-converter-wrapper
x1 -> (- 2)
x0 -> (- 2)
)

==============
after solve
Total Elapsed Time: 2.90057
  Search Time: 1.08274
  Solving Time: 1.06691
  Program Time: 0.750914
remote run 0
input string -2
-2

parsin not complete!
branch size: 46
costraint size: 33
costraint size1: 33
costraint siz2e: 33
constraints_idx[0]:2constraints_idx[1]:4constraints_idx[2]:6constraints_idx[3]:7constraints_idx[4]:8constraints_idx[5]:9constraints_idx[6]:11constraints_idx[7]:12constraints_idx[8]:13constraints_idx[9]:14constraints_idx[10]:16constraints_idx[11]:17constraints_idx[12]:18constraints_idx[13]:19constraints_idx[14]:21constraints_idx[15]:22constraints_idx[16]:23constraints_idx[17]:24constraints_idx[18]:26constraints_idx[19]:27constraints_idx[20]:28constraints_idx[21]:29constraints_idx[22]:31constraints_idx[23]:32constraints_idx[24]:33constraints_idx[25]:34constraints_idx[26]:36constraints_idx[27]:37constraints_idx[28]:38constraints_idx[29]:39constraints_idx[30]:41constraints_idx[31]:42constraints_idx[32]:43costraint idx front: 2
parsing complete!
Iteration 40 (3s): covered 9 branches [1 reach funs, 10 reach branches].
path.constraints_idx[28]=38
-1 6 9 6 9 6 10 12 14 15 6 10 12 14 15 6 10 12 14 15 6 10 12 14 15 6 10 12 14 15 6 10 12 14 15 6 10 12 13 6 10 12 13 7 -2 
-1 6 9 6 9 6 10 12 14 15 6 10 12 14 15 6 10 12 14 15 6 10 12 14 15 6 10 12 14 15 6 10 12 14 15 6 10 12 14 15 6 10 12 13 7 -2 
Constraint Size : 33
files.byte = 1396
no hi..
nRcv : 1024
no break..
file_info.st_size : 1024
files.byte 1396
no hi..
nRcv : 372
no break..
file_info.st_size : 1396
files.byte 1396
send done...
after run
after updatecover
after branch_idx
prev_ex 
cur_ex 
third branch_idx = 38
after checkprediction
after SymbolicPath
Solving Branch is 32!!!!
before solve at
sat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (< (+ 0 (* x0 1)) 0))
(assert (< (+ 1 (* x0 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (<= (+ 2 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 8) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))
(assert (<= (+ 3 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 7) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (<= (+ (- 4) (* x1 1)) 0))
(assert (<= (+ 4 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 6) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 5 (* x0 1)) 0))
(assert (<= (+ (- 3) (* x1 1)) 0))
(assert (<= (+ 5 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 5) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 6 (* x0 1)) 0))
(assert (<= (+ (- 2) (* x1 1)) 0))
(assert (<= (+ 6 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 4) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 7 (* x0 1)) 0))
(assert (<= (+ (- 1) (* x1 1)) 0))
(assert (<= (+ 7 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 3) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 8 (* x0 1)) 0))
(assert (<= (+ 0 (* x1 1)) 0))
(assert (<= (+ 8 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 2) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 9 (* x0 1)) 0))
(assert (<= (+ 1 (* x1 1)) 0))
(assert (<= (+ 9 (* x0 3) (* x1 1)) 0))
(rmodel->model-converter-wrapper
x1 -> (- 3)
x0 -> (- 2)
)

==============
after solve
Total Elapsed Time: 2.92712
  Search Time: 1.08446
  Solving Time: 1.07096
  Program Time: 0.771691
remote run 0
input string -2
-3

parsin not complete!
branch size: 47
costraint size: 34
costraint size1: 34
costraint siz2e: 34
constraints_idx[0]:2constraints_idx[1]:4constraints_idx[2]:6constraints_idx[3]:7constraints_idx[4]:8constraints_idx[5]:9constraints_idx[6]:11constraints_idx[7]:12constraints_idx[8]:13constraints_idx[9]:14constraints_idx[10]:16constraints_idx[11]:17constraints_idx[12]:18constraints_idx[13]:19constraints_idx[14]:21constraints_idx[15]:22constraints_idx[16]:23constraints_idx[17]:24constraints_idx[18]:26constraints_idx[19]:27constraints_idx[20]:28constraints_idx[21]:29constraints_idx[22]:31constraints_idx[23]:32constraints_idx[24]:33constraints_idx[25]:34constraints_idx[26]:36constraints_idx[27]:37constraints_idx[28]:38constraints_idx[29]:39constraints_idx[30]:41constraints_idx[31]:42constraints_idx[32]:43constraints_idx[33]:44costraint idx front: 2
parsing complete!
Iteration 41 (3s): covered 9 branches [1 reach funs, 10 reach branches].
path.constraints_idx[32]=43
-1 6 9 6 9 6 10 12 14 15 6 10 12 14 15 6 10 12 14 15 6 10 12 14 15 6 10 12 14 15 6 10 12 14 15 6 10 12 14 15 6 10 12 13 7 -2 
-1 6 9 6 9 6 10 12 14 15 6 10 12 14 15 6 10 12 14 15 6 10 12 14 15 6 10 12 14 15 6 10 12 14 15 6 10 12 14 15 6 10 12 14 15 7 -2 
Constraint Size : 34
files.byte = 1442
no hi..
nRcv : 1024
no break..
file_info.st_size : 1024
files.byte 1442
no hi..
nRcv : 418
no break..
file_info.st_size : 1442
files.byte 1442
send done...
after run
after updatecover
after branch_idx
prev_ex 
cur_ex 
third branch_idx = 43
after checkprediction
after SymbolicPath
Solving Branch is 33!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (< (+ 0 (* x0 1)) 0))
(assert (< (+ 1 (* x0 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (<= (+ 2 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 8) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))
(assert (<= (+ 3 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 7) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (<= (+ (- 4) (* x1 1)) 0))
(assert (<= (+ 4 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 6) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 5 (* x0 1)) 0))
(assert (<= (+ (- 3) (* x1 1)) 0))
(assert (<= (+ 5 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 5) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 6 (* x0 1)) 0))
(assert (<= (+ (- 2) (* x1 1)) 0))
(assert (<= (+ 6 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 4) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 7 (* x0 1)) 0))
(assert (<= (+ (- 1) (* x1 1)) 0))
(assert (<= (+ 7 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 3) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 8 (* x0 1)) 0))
(assert (<= (+ 0 (* x1 1)) 0))
(assert (<= (+ 8 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 2) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 9 (* x0 1)) 0))
(assert (<= (+ 1 (* x1 1)) 0))
(assert (<= (+ 9 (* x0 3) (* x1 1)) 0))
(assert (>= (+ (- 1) (* x0 1) (* x1 1)) 0))

==============
after for loop
after pureDfs final
Solving Branch is 31!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (< (+ 0 (* x0 1)) 0))
(assert (< (+ 1 (* x0 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (<= (+ 2 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 8) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))
(assert (<= (+ 3 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 7) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (<= (+ (- 4) (* x1 1)) 0))
(assert (<= (+ 4 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 6) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 5 (* x0 1)) 0))
(assert (<= (+ (- 3) (* x1 1)) 0))
(assert (<= (+ 5 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 5) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 6 (* x0 1)) 0))
(assert (<= (+ (- 2) (* x1 1)) 0))
(assert (<= (+ 6 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 4) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 7 (* x0 1)) 0))
(assert (<= (+ (- 1) (* x1 1)) 0))
(assert (<= (+ 7 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 3) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 8 (* x0 1)) 0))
(assert (<= (+ 0 (* x1 1)) 0))
(assert (<= (+ 8 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 2) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 9 (* x0 1)) 0))
(assert (> (+ 1 (* x1 1)) 0))

==============
Solving Branch is 30!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (< (+ 0 (* x0 1)) 0))
(assert (< (+ 1 (* x0 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (<= (+ 2 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 8) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))
(assert (<= (+ 3 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 7) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (<= (+ (- 4) (* x1 1)) 0))
(assert (<= (+ 4 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 6) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 5 (* x0 1)) 0))
(assert (<= (+ (- 3) (* x1 1)) 0))
(assert (<= (+ 5 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 5) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 6 (* x0 1)) 0))
(assert (<= (+ (- 2) (* x1 1)) 0))
(assert (<= (+ 6 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 4) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 7 (* x0 1)) 0))
(assert (<= (+ (- 1) (* x1 1)) 0))
(assert (<= (+ 7 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 3) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 8 (* x0 1)) 0))
(assert (<= (+ 0 (* x1 1)) 0))
(assert (<= (+ 8 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 2) (* x0 1) (* x1 1)) 0))
(assert (< (+ 9 (* x0 1)) 0))

==============
Solving Branch is 29!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (< (+ 0 (* x0 1)) 0))
(assert (< (+ 1 (* x0 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (<= (+ 2 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 8) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))
(assert (<= (+ 3 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 7) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (<= (+ (- 4) (* x1 1)) 0))
(assert (<= (+ 4 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 6) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 5 (* x0 1)) 0))
(assert (<= (+ (- 3) (* x1 1)) 0))
(assert (<= (+ 5 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 5) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 6 (* x0 1)) 0))
(assert (<= (+ (- 2) (* x1 1)) 0))
(assert (<= (+ 6 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 4) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 7 (* x0 1)) 0))
(assert (<= (+ (- 1) (* x1 1)) 0))
(assert (<= (+ 7 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 3) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 8 (* x0 1)) 0))
(assert (<= (+ 0 (* x1 1)) 0))
(assert (<= (+ 8 (* x0 3) (* x1 1)) 0))
(assert (>= (+ (- 2) (* x0 1) (* x1 1)) 0))

==============
after for loop
after pureDfs final
Solving Branch is 27!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (< (+ 0 (* x0 1)) 0))
(assert (< (+ 1 (* x0 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (<= (+ 2 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 8) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))
(assert (<= (+ 3 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 7) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (<= (+ (- 4) (* x1 1)) 0))
(assert (<= (+ 4 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 6) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 5 (* x0 1)) 0))
(assert (<= (+ (- 3) (* x1 1)) 0))
(assert (<= (+ 5 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 5) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 6 (* x0 1)) 0))
(assert (<= (+ (- 2) (* x1 1)) 0))
(assert (<= (+ 6 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 4) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 7 (* x0 1)) 0))
(assert (<= (+ (- 1) (* x1 1)) 0))
(assert (<= (+ 7 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 3) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 8 (* x0 1)) 0))
(assert (> (+ 0 (* x1 1)) 0))

==============
Solving Branch is 26!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (< (+ 0 (* x0 1)) 0))
(assert (< (+ 1 (* x0 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (<= (+ 2 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 8) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))
(assert (<= (+ 3 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 7) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (<= (+ (- 4) (* x1 1)) 0))
(assert (<= (+ 4 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 6) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 5 (* x0 1)) 0))
(assert (<= (+ (- 3) (* x1 1)) 0))
(assert (<= (+ 5 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 5) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 6 (* x0 1)) 0))
(assert (<= (+ (- 2) (* x1 1)) 0))
(assert (<= (+ 6 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 4) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 7 (* x0 1)) 0))
(assert (<= (+ (- 1) (* x1 1)) 0))
(assert (<= (+ 7 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 3) (* x0 1) (* x1 1)) 0))
(assert (< (+ 8 (* x0 1)) 0))

==============
Solving Branch is 25!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (< (+ 0 (* x0 1)) 0))
(assert (< (+ 1 (* x0 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (<= (+ 2 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 8) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))
(assert (<= (+ 3 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 7) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (<= (+ (- 4) (* x1 1)) 0))
(assert (<= (+ 4 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 6) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 5 (* x0 1)) 0))
(assert (<= (+ (- 3) (* x1 1)) 0))
(assert (<= (+ 5 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 5) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 6 (* x0 1)) 0))
(assert (<= (+ (- 2) (* x1 1)) 0))
(assert (<= (+ 6 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 4) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 7 (* x0 1)) 0))
(assert (<= (+ (- 1) (* x1 1)) 0))
(assert (<= (+ 7 (* x0 3) (* x1 1)) 0))
(assert (>= (+ (- 3) (* x0 1) (* x1 1)) 0))

==============
after for loop
after pureDfs final
Solving Branch is 23!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (< (+ 0 (* x0 1)) 0))
(assert (< (+ 1 (* x0 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (<= (+ 2 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 8) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))
(assert (<= (+ 3 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 7) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (<= (+ (- 4) (* x1 1)) 0))
(assert (<= (+ 4 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 6) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 5 (* x0 1)) 0))
(assert (<= (+ (- 3) (* x1 1)) 0))
(assert (<= (+ 5 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 5) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 6 (* x0 1)) 0))
(assert (<= (+ (- 2) (* x1 1)) 0))
(assert (<= (+ 6 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 4) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 7 (* x0 1)) 0))
(assert (> (+ (- 1) (* x1 1)) 0))

==============
Solving Branch is 22!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (< (+ 0 (* x0 1)) 0))
(assert (< (+ 1 (* x0 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (<= (+ 2 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 8) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))
(assert (<= (+ 3 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 7) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (<= (+ (- 4) (* x1 1)) 0))
(assert (<= (+ 4 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 6) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 5 (* x0 1)) 0))
(assert (<= (+ (- 3) (* x1 1)) 0))
(assert (<= (+ 5 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 5) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 6 (* x0 1)) 0))
(assert (<= (+ (- 2) (* x1 1)) 0))
(assert (<= (+ 6 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 4) (* x0 1) (* x1 1)) 0))
(assert (< (+ 7 (* x0 1)) 0))

==============
Solving Branch is 21!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (< (+ 0 (* x0 1)) 0))
(assert (< (+ 1 (* x0 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (<= (+ 2 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 8) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))
(assert (<= (+ 3 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 7) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (<= (+ (- 4) (* x1 1)) 0))
(assert (<= (+ 4 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 6) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 5 (* x0 1)) 0))
(assert (<= (+ (- 3) (* x1 1)) 0))
(assert (<= (+ 5 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 5) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 6 (* x0 1)) 0))
(assert (<= (+ (- 2) (* x1 1)) 0))
(assert (<= (+ 6 (* x0 3) (* x1 1)) 0))
(assert (>= (+ (- 4) (* x0 1) (* x1 1)) 0))

==============
Solving Branch is 20!!!!
before solve at
sat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (< (+ 0 (* x0 1)) 0))
(assert (< (+ 1 (* x0 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (<= (+ 2 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 8) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))
(assert (<= (+ 3 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 7) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (<= (+ (- 4) (* x1 1)) 0))
(assert (<= (+ 4 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 6) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 5 (* x0 1)) 0))
(assert (<= (+ (- 3) (* x1 1)) 0))
(assert (<= (+ 5 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 5) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 6 (* x0 1)) 0))
(assert (<= (+ (- 2) (* x1 1)) 0))
(assert (> (+ 6 (* x0 3) (* x1 1)) 0))
(rmodel->model-converter-wrapper
x1 -> 1
x0 -> (- 2)
)

==============
after solve
Total Elapsed Time: 2.97505
  Search Time: 1.08678
  Solving Time: 1.10011
  Program Time: 0.788163
remote run 0
input string -2
1

parsin not complete!
branch size: 41
costraint size: 28
costraint size1: 28
costraint siz2e: 28
constraints_idx[0]:2constraints_idx[1]:4constraints_idx[2]:6constraints_idx[3]:7constraints_idx[4]:8constraints_idx[5]:9constraints_idx[6]:11constraints_idx[7]:12constraints_idx[8]:13constraints_idx[9]:14constraints_idx[10]:16constraints_idx[11]:17constraints_idx[12]:18constraints_idx[13]:19constraints_idx[14]:21constraints_idx[15]:22constraints_idx[16]:23constraints_idx[17]:24constraints_idx[18]:26constraints_idx[19]:27constraints_idx[20]:28constraints_idx[21]:30constraints_idx[22]:31constraints_idx[23]:32constraints_idx[24]:34constraints_idx[25]:35constraints_idx[26]:37constraints_idx[27]:38costraint idx front: 2
parsing complete!
Iteration 42 (3s): covered 9 branches [1 reach funs, 10 reach branches].
path.constraints_idx[20]=28
-1 6 9 6 9 6 10 12 14 15 6 10 12 14 15 6 10 12 14 15 6 10 12 14 15 6 10 12 14 15 6 10 12 13 6 10 12 13 6 10 11 7 -2 
-1 6 9 6 9 6 10 12 14 15 6 10 12 14 15 6 10 12 14 15 6 10 12 14 15 6 10 12 13 6 10 12 13 6 10 11 6 10 11 7 -2 
Constraint Size : 28
files.byte = 1166
no hi..
nRcv : 1024
no break..
file_info.st_size : 1024
files.byte 1166
no hi..
nRcv : 142
no break..
file_info.st_size : 1166
files.byte 1166
send done...
after run
after updatecover
after branch_idx
prev_ex 
cur_ex 
third branch_idx = 28
after checkprediction
after SymbolicPath
Solving Branch is 27!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (< (+ 0 (* x0 1)) 0))
(assert (< (+ 1 (* x0 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (<= (+ 2 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 8) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))
(assert (<= (+ 3 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 7) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (<= (+ (- 4) (* x1 1)) 0))
(assert (<= (+ 4 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 6) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 5 (* x0 1)) 0))
(assert (<= (+ (- 3) (* x1 1)) 0))
(assert (<= (+ 5 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 5) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 6 (* x0 1)) 0))
(assert (<= (+ (- 2) (* x1 1)) 0))
(assert (> (+ 6 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 7 (* x0 1)) 0))
(assert (<= (+ (- 1) (* x1 1)) 0))
(assert (> (+ 7 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 8 (* x0 1)) 0))
(assert (> (+ 0 (* x1 1)) 0))
(assert (>= (+ 9 (* x0 1)) 0))
(assert (<= (+ 1 (* x1 1)) 0))

==============
Solving Branch is 26!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (< (+ 0 (* x0 1)) 0))
(assert (< (+ 1 (* x0 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (<= (+ 2 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 8) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))
(assert (<= (+ 3 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 7) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (<= (+ (- 4) (* x1 1)) 0))
(assert (<= (+ 4 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 6) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 5 (* x0 1)) 0))
(assert (<= (+ (- 3) (* x1 1)) 0))
(assert (<= (+ 5 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 5) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 6 (* x0 1)) 0))
(assert (<= (+ (- 2) (* x1 1)) 0))
(assert (> (+ 6 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 7 (* x0 1)) 0))
(assert (<= (+ (- 1) (* x1 1)) 0))
(assert (> (+ 7 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 8 (* x0 1)) 0))
(assert (> (+ 0 (* x1 1)) 0))
(assert (< (+ 9 (* x0 1)) 0))

==============
Solving Branch is 25!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (< (+ 0 (* x0 1)) 0))
(assert (< (+ 1 (* x0 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (<= (+ 2 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 8) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))
(assert (<= (+ 3 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 7) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (<= (+ (- 4) (* x1 1)) 0))
(assert (<= (+ 4 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 6) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 5 (* x0 1)) 0))
(assert (<= (+ (- 3) (* x1 1)) 0))
(assert (<= (+ 5 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 5) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 6 (* x0 1)) 0))
(assert (<= (+ (- 2) (* x1 1)) 0))
(assert (> (+ 6 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 7 (* x0 1)) 0))
(assert (<= (+ (- 1) (* x1 1)) 0))
(assert (> (+ 7 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 8 (* x0 1)) 0))
(assert (<= (+ 0 (* x1 1)) 0))

==============
Solving Branch is 24!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (< (+ 0 (* x0 1)) 0))
(assert (< (+ 1 (* x0 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (<= (+ 2 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 8) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))
(assert (<= (+ 3 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 7) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (<= (+ (- 4) (* x1 1)) 0))
(assert (<= (+ 4 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 6) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 5 (* x0 1)) 0))
(assert (<= (+ (- 3) (* x1 1)) 0))
(assert (<= (+ 5 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 5) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 6 (* x0 1)) 0))
(assert (<= (+ (- 2) (* x1 1)) 0))
(assert (> (+ 6 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 7 (* x0 1)) 0))
(assert (<= (+ (- 1) (* x1 1)) 0))
(assert (> (+ 7 (* x0 3) (* x1 1)) 0))
(assert (< (+ 8 (* x0 1)) 0))

==============
Solving Branch is 23!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (< (+ 0 (* x0 1)) 0))
(assert (< (+ 1 (* x0 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (<= (+ 2 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 8) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))
(assert (<= (+ 3 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 7) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (<= (+ (- 4) (* x1 1)) 0))
(assert (<= (+ 4 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 6) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 5 (* x0 1)) 0))
(assert (<= (+ (- 3) (* x1 1)) 0))
(assert (<= (+ 5 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 5) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 6 (* x0 1)) 0))
(assert (<= (+ (- 2) (* x1 1)) 0))
(assert (> (+ 6 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 7 (* x0 1)) 0))
(assert (<= (+ (- 1) (* x1 1)) 0))
(assert (<= (+ 7 (* x0 3) (* x1 1)) 0))

==============
Solving Branch is 22!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (< (+ 0 (* x0 1)) 0))
(assert (< (+ 1 (* x0 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (<= (+ 2 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 8) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))
(assert (<= (+ 3 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 7) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (<= (+ (- 4) (* x1 1)) 0))
(assert (<= (+ 4 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 6) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 5 (* x0 1)) 0))
(assert (<= (+ (- 3) (* x1 1)) 0))
(assert (<= (+ 5 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 5) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 6 (* x0 1)) 0))
(assert (<= (+ (- 2) (* x1 1)) 0))
(assert (> (+ 6 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 7 (* x0 1)) 0))
(assert (> (+ (- 1) (* x1 1)) 0))

==============
Solving Branch is 21!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (< (+ 0 (* x0 1)) 0))
(assert (< (+ 1 (* x0 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (<= (+ 2 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 8) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))
(assert (<= (+ 3 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 7) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (<= (+ (- 4) (* x1 1)) 0))
(assert (<= (+ 4 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 6) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 5 (* x0 1)) 0))
(assert (<= (+ (- 3) (* x1 1)) 0))
(assert (<= (+ 5 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 5) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 6 (* x0 1)) 0))
(assert (<= (+ (- 2) (* x1 1)) 0))
(assert (> (+ 6 (* x0 3) (* x1 1)) 0))
(assert (< (+ 7 (* x0 1)) 0))

==============
after for loop
after pureDfs final
Solving Branch is 19!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (< (+ 0 (* x0 1)) 0))
(assert (< (+ 1 (* x0 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (<= (+ 2 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 8) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))
(assert (<= (+ 3 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 7) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (<= (+ (- 4) (* x1 1)) 0))
(assert (<= (+ 4 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 6) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 5 (* x0 1)) 0))
(assert (<= (+ (- 3) (* x1 1)) 0))
(assert (<= (+ 5 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 5) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 6 (* x0 1)) 0))
(assert (> (+ (- 2) (* x1 1)) 0))

==============
Solving Branch is 18!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (< (+ 0 (* x0 1)) 0))
(assert (< (+ 1 (* x0 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (<= (+ 2 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 8) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))
(assert (<= (+ 3 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 7) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (<= (+ (- 4) (* x1 1)) 0))
(assert (<= (+ 4 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 6) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 5 (* x0 1)) 0))
(assert (<= (+ (- 3) (* x1 1)) 0))
(assert (<= (+ 5 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 5) (* x0 1) (* x1 1)) 0))
(assert (< (+ 6 (* x0 1)) 0))

==============
Solving Branch is 17!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (< (+ 0 (* x0 1)) 0))
(assert (< (+ 1 (* x0 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (<= (+ 2 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 8) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))
(assert (<= (+ 3 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 7) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (<= (+ (- 4) (* x1 1)) 0))
(assert (<= (+ 4 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 6) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 5 (* x0 1)) 0))
(assert (<= (+ (- 3) (* x1 1)) 0))
(assert (<= (+ 5 (* x0 3) (* x1 1)) 0))
(assert (>= (+ (- 5) (* x0 1) (* x1 1)) 0))

==============
Solving Branch is 16!!!!
before solve at
sat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (< (+ 0 (* x0 1)) 0))
(assert (< (+ 1 (* x0 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (<= (+ 2 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 8) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))
(assert (<= (+ 3 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 7) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (<= (+ (- 4) (* x1 1)) 0))
(assert (<= (+ 4 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 6) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 5 (* x0 1)) 0))
(assert (<= (+ (- 3) (* x1 1)) 0))
(assert (> (+ 5 (* x0 3) (* x1 1)) 0))
(rmodel->model-converter-wrapper
x1 -> 2
x0 -> (- 2)
)

==============
after solve
Total Elapsed Time: 3.02314
  Search Time: 1.08823
  Solving Time: 1.12478
  Program Time: 0.810126
remote run 0
input string -2
2

parsin not complete!
branch size: 39
costraint size: 26
costraint size1: 26
costraint siz2e: 26
constraints_idx[0]:2constraints_idx[1]:4constraints_idx[2]:6constraints_idx[3]:7constraints_idx[4]:8constraints_idx[5]:9constraints_idx[6]:11constraints_idx[7]:12constraints_idx[8]:13constraints_idx[9]:14constraints_idx[10]:16constraints_idx[11]:17constraints_idx[12]:18constraints_idx[13]:19constraints_idx[14]:21constraints_idx[15]:22constraints_idx[16]:23constraints_idx[17]:25constraints_idx[18]:26constraints_idx[19]:27constraints_idx[20]:29constraints_idx[21]:30constraints_idx[22]:32constraints_idx[23]:33constraints_idx[24]:35constraints_idx[25]:36costraint idx front: 2
parsing complete!
Iteration 43 (3s): covered 9 branches [1 reach funs, 10 reach branches].
path.constraints_idx[16]=23
-1 6 9 6 9 6 10 12 14 15 6 10 12 14 15 6 10 12 14 15 6 10 12 14 15 6 10 12 14 15 6 10 12 13 6 10 12 13 6 10 11 7 -2 
-1 6 9 6 9 6 10 12 14 15 6 10 12 14 15 6 10 12 14 15 6 10 12 13 6 10 12 13 6 10 11 6 10 11 6 10 11 7 -2 
Constraint Size : 26
files.byte = 1074
no hi..
nRcv : 1024
no break..
file_info.st_size : 1024
files.byte 1074
no hi..
nRcv : 50
no break..
file_info.st_size : 1074
files.byte 1074
send done...
after run
after updatecover
after branch_idx
prev_ex 
cur_ex 
third branch_idx = 23
after checkprediction
after SymbolicPath
Solving Branch is 25!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (< (+ 0 (* x0 1)) 0))
(assert (< (+ 1 (* x0 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (<= (+ 2 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 8) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))
(assert (<= (+ 3 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 7) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (<= (+ (- 4) (* x1 1)) 0))
(assert (<= (+ 4 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 6) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 5 (* x0 1)) 0))
(assert (<= (+ (- 3) (* x1 1)) 0))
(assert (> (+ 5 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 6 (* x0 1)) 0))
(assert (<= (+ (- 2) (* x1 1)) 0))
(assert (> (+ 6 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 7 (* x0 1)) 0))
(assert (> (+ (- 1) (* x1 1)) 0))
(assert (>= (+ 8 (* x0 1)) 0))
(assert (> (+ 0 (* x1 1)) 0))
(assert (>= (+ 9 (* x0 1)) 0))
(assert (<= (+ 1 (* x1 1)) 0))

==============
Solving Branch is 24!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (< (+ 0 (* x0 1)) 0))
(assert (< (+ 1 (* x0 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (<= (+ 2 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 8) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))
(assert (<= (+ 3 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 7) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (<= (+ (- 4) (* x1 1)) 0))
(assert (<= (+ 4 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 6) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 5 (* x0 1)) 0))
(assert (<= (+ (- 3) (* x1 1)) 0))
(assert (> (+ 5 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 6 (* x0 1)) 0))
(assert (<= (+ (- 2) (* x1 1)) 0))
(assert (> (+ 6 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 7 (* x0 1)) 0))
(assert (> (+ (- 1) (* x1 1)) 0))
(assert (>= (+ 8 (* x0 1)) 0))
(assert (> (+ 0 (* x1 1)) 0))
(assert (< (+ 9 (* x0 1)) 0))

==============
Solving Branch is 23!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (< (+ 0 (* x0 1)) 0))
(assert (< (+ 1 (* x0 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (<= (+ 2 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 8) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))
(assert (<= (+ 3 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 7) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (<= (+ (- 4) (* x1 1)) 0))
(assert (<= (+ 4 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 6) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 5 (* x0 1)) 0))
(assert (<= (+ (- 3) (* x1 1)) 0))
(assert (> (+ 5 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 6 (* x0 1)) 0))
(assert (<= (+ (- 2) (* x1 1)) 0))
(assert (> (+ 6 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 7 (* x0 1)) 0))
(assert (> (+ (- 1) (* x1 1)) 0))
(assert (>= (+ 8 (* x0 1)) 0))
(assert (<= (+ 0 (* x1 1)) 0))

==============
Solving Branch is 22!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (< (+ 0 (* x0 1)) 0))
(assert (< (+ 1 (* x0 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (<= (+ 2 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 8) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))
(assert (<= (+ 3 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 7) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (<= (+ (- 4) (* x1 1)) 0))
(assert (<= (+ 4 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 6) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 5 (* x0 1)) 0))
(assert (<= (+ (- 3) (* x1 1)) 0))
(assert (> (+ 5 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 6 (* x0 1)) 0))
(assert (<= (+ (- 2) (* x1 1)) 0))
(assert (> (+ 6 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 7 (* x0 1)) 0))
(assert (> (+ (- 1) (* x1 1)) 0))
(assert (< (+ 8 (* x0 1)) 0))

==============
Solving Branch is 21!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (< (+ 0 (* x0 1)) 0))
(assert (< (+ 1 (* x0 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (<= (+ 2 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 8) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))
(assert (<= (+ 3 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 7) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (<= (+ (- 4) (* x1 1)) 0))
(assert (<= (+ 4 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 6) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 5 (* x0 1)) 0))
(assert (<= (+ (- 3) (* x1 1)) 0))
(assert (> (+ 5 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 6 (* x0 1)) 0))
(assert (<= (+ (- 2) (* x1 1)) 0))
(assert (> (+ 6 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 7 (* x0 1)) 0))
(assert (<= (+ (- 1) (* x1 1)) 0))

==============
Solving Branch is 20!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (< (+ 0 (* x0 1)) 0))
(assert (< (+ 1 (* x0 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (<= (+ 2 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 8) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))
(assert (<= (+ 3 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 7) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (<= (+ (- 4) (* x1 1)) 0))
(assert (<= (+ 4 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 6) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 5 (* x0 1)) 0))
(assert (<= (+ (- 3) (* x1 1)) 0))
(assert (> (+ 5 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 6 (* x0 1)) 0))
(assert (<= (+ (- 2) (* x1 1)) 0))
(assert (> (+ 6 (* x0 3) (* x1 1)) 0))
(assert (< (+ 7 (* x0 1)) 0))

==============
Solving Branch is 19!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (< (+ 0 (* x0 1)) 0))
(assert (< (+ 1 (* x0 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (<= (+ 2 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 8) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))
(assert (<= (+ 3 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 7) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (<= (+ (- 4) (* x1 1)) 0))
(assert (<= (+ 4 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 6) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 5 (* x0 1)) 0))
(assert (<= (+ (- 3) (* x1 1)) 0))
(assert (> (+ 5 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 6 (* x0 1)) 0))
(assert (<= (+ (- 2) (* x1 1)) 0))
(assert (<= (+ 6 (* x0 3) (* x1 1)) 0))

==============
Solving Branch is 18!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (< (+ 0 (* x0 1)) 0))
(assert (< (+ 1 (* x0 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (<= (+ 2 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 8) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))
(assert (<= (+ 3 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 7) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (<= (+ (- 4) (* x1 1)) 0))
(assert (<= (+ 4 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 6) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 5 (* x0 1)) 0))
(assert (<= (+ (- 3) (* x1 1)) 0))
(assert (> (+ 5 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 6 (* x0 1)) 0))
(assert (> (+ (- 2) (* x1 1)) 0))

==============
Solving Branch is 17!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (< (+ 0 (* x0 1)) 0))
(assert (< (+ 1 (* x0 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (<= (+ 2 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 8) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))
(assert (<= (+ 3 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 7) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (<= (+ (- 4) (* x1 1)) 0))
(assert (<= (+ 4 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 6) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 5 (* x0 1)) 0))
(assert (<= (+ (- 3) (* x1 1)) 0))
(assert (> (+ 5 (* x0 3) (* x1 1)) 0))
(assert (< (+ 6 (* x0 1)) 0))

==============
after for loop
after pureDfs final
Solving Branch is 15!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (< (+ 0 (* x0 1)) 0))
(assert (< (+ 1 (* x0 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (<= (+ 2 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 8) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))
(assert (<= (+ 3 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 7) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (<= (+ (- 4) (* x1 1)) 0))
(assert (<= (+ 4 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 6) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 5 (* x0 1)) 0))
(assert (> (+ (- 3) (* x1 1)) 0))

==============
Solving Branch is 14!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (< (+ 0 (* x0 1)) 0))
(assert (< (+ 1 (* x0 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (<= (+ 2 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 8) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))
(assert (<= (+ 3 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 7) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (<= (+ (- 4) (* x1 1)) 0))
(assert (<= (+ 4 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 6) (* x0 1) (* x1 1)) 0))
(assert (< (+ 5 (* x0 1)) 0))

==============
Solving Branch is 13!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (< (+ 0 (* x0 1)) 0))
(assert (< (+ 1 (* x0 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (<= (+ 2 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 8) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))
(assert (<= (+ 3 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 7) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (<= (+ (- 4) (* x1 1)) 0))
(assert (<= (+ 4 (* x0 3) (* x1 1)) 0))
(assert (>= (+ (- 6) (* x0 1) (* x1 1)) 0))

==============
Solving Branch is 12!!!!
before solve at
sat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (< (+ 0 (* x0 1)) 0))
(assert (< (+ 1 (* x0 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (<= (+ 2 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 8) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))
(assert (<= (+ 3 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 7) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (<= (+ (- 4) (* x1 1)) 0))
(assert (> (+ 4 (* x0 3) (* x1 1)) 0))
(rmodel->model-converter-wrapper
x1 -> 3
x0 -> (- 2)
)

==============
after solve
Total Elapsed Time: 3.07222
  Search Time: 1.08994
  Solving Time: 1.15546
  Program Time: 0.826817
remote run 0
input string -2
3

parsin not complete!
branch size: 37
costraint size: 24
costraint size1: 24
costraint siz2e: 24
constraints_idx[0]:2constraints_idx[1]:4constraints_idx[2]:6constraints_idx[3]:7constraints_idx[4]:8constraints_idx[5]:9constraints_idx[6]:11constraints_idx[7]:12constraints_idx[8]:13constraints_idx[9]:14constraints_idx[10]:16constraints_idx[11]:17constraints_idx[12]:18constraints_idx[13]:20constraints_idx[14]:21constraints_idx[15]:22constraints_idx[16]:24constraints_idx[17]:25constraints_idx[18]:27constraints_idx[19]:28constraints_idx[20]:30constraints_idx[21]:31constraints_idx[22]:33constraints_idx[23]:34costraint idx front: 2
parsing complete!
Iteration 44 (3s): covered 9 branches [1 reach funs, 10 reach branches].
path.constraints_idx[12]=18
-1 6 9 6 9 6 10 12 14 15 6 10 12 14 15 6 10 12 14 15 6 10 12 14 15 6 10 12 14 15 6 10 12 13 6 10 12 13 6 10 11 7 -2 
-1 6 9 6 9 6 10 12 14 15 6 10 12 14 15 6 10 12 13 6 10 12 13 6 10 11 6 10 11 6 10 11 6 10 11 7 -2 
Constraint Size : 24
files.byte = 982
no hi..
nRcv : 982
no break..
file_info.st_size : 982
files.byte 982
send done...
after run
after updatecover
after branch_idx
prev_ex 
cur_ex 
third branch_idx = 18
after checkprediction
after SymbolicPath
Solving Branch is 23!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (< (+ 0 (* x0 1)) 0))
(assert (< (+ 1 (* x0 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (<= (+ 2 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 8) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))
(assert (<= (+ 3 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 7) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (<= (+ (- 4) (* x1 1)) 0))
(assert (> (+ 4 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 5 (* x0 1)) 0))
(assert (<= (+ (- 3) (* x1 1)) 0))
(assert (> (+ 5 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 6 (* x0 1)) 0))
(assert (> (+ (- 2) (* x1 1)) 0))
(assert (>= (+ 7 (* x0 1)) 0))
(assert (> (+ (- 1) (* x1 1)) 0))
(assert (>= (+ 8 (* x0 1)) 0))
(assert (> (+ 0 (* x1 1)) 0))
(assert (>= (+ 9 (* x0 1)) 0))
(assert (<= (+ 1 (* x1 1)) 0))

==============
Solving Branch is 22!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (< (+ 0 (* x0 1)) 0))
(assert (< (+ 1 (* x0 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (<= (+ 2 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 8) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))
(assert (<= (+ 3 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 7) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (<= (+ (- 4) (* x1 1)) 0))
(assert (> (+ 4 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 5 (* x0 1)) 0))
(assert (<= (+ (- 3) (* x1 1)) 0))
(assert (> (+ 5 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 6 (* x0 1)) 0))
(assert (> (+ (- 2) (* x1 1)) 0))
(assert (>= (+ 7 (* x0 1)) 0))
(assert (> (+ (- 1) (* x1 1)) 0))
(assert (>= (+ 8 (* x0 1)) 0))
(assert (> (+ 0 (* x1 1)) 0))
(assert (< (+ 9 (* x0 1)) 0))

==============
Solving Branch is 21!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (< (+ 0 (* x0 1)) 0))
(assert (< (+ 1 (* x0 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (<= (+ 2 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 8) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))
(assert (<= (+ 3 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 7) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (<= (+ (- 4) (* x1 1)) 0))
(assert (> (+ 4 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 5 (* x0 1)) 0))
(assert (<= (+ (- 3) (* x1 1)) 0))
(assert (> (+ 5 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 6 (* x0 1)) 0))
(assert (> (+ (- 2) (* x1 1)) 0))
(assert (>= (+ 7 (* x0 1)) 0))
(assert (> (+ (- 1) (* x1 1)) 0))
(assert (>= (+ 8 (* x0 1)) 0))
(assert (<= (+ 0 (* x1 1)) 0))

==============
Solving Branch is 20!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (< (+ 0 (* x0 1)) 0))
(assert (< (+ 1 (* x0 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (<= (+ 2 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 8) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))
(assert (<= (+ 3 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 7) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (<= (+ (- 4) (* x1 1)) 0))
(assert (> (+ 4 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 5 (* x0 1)) 0))
(assert (<= (+ (- 3) (* x1 1)) 0))
(assert (> (+ 5 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 6 (* x0 1)) 0))
(assert (> (+ (- 2) (* x1 1)) 0))
(assert (>= (+ 7 (* x0 1)) 0))
(assert (> (+ (- 1) (* x1 1)) 0))
(assert (< (+ 8 (* x0 1)) 0))

==============
Solving Branch is 19!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (< (+ 0 (* x0 1)) 0))
(assert (< (+ 1 (* x0 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (<= (+ 2 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 8) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))
(assert (<= (+ 3 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 7) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (<= (+ (- 4) (* x1 1)) 0))
(assert (> (+ 4 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 5 (* x0 1)) 0))
(assert (<= (+ (- 3) (* x1 1)) 0))
(assert (> (+ 5 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 6 (* x0 1)) 0))
(assert (> (+ (- 2) (* x1 1)) 0))
(assert (>= (+ 7 (* x0 1)) 0))
(assert (<= (+ (- 1) (* x1 1)) 0))

==============
Solving Branch is 18!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (< (+ 0 (* x0 1)) 0))
(assert (< (+ 1 (* x0 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (<= (+ 2 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 8) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))
(assert (<= (+ 3 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 7) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (<= (+ (- 4) (* x1 1)) 0))
(assert (> (+ 4 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 5 (* x0 1)) 0))
(assert (<= (+ (- 3) (* x1 1)) 0))
(assert (> (+ 5 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 6 (* x0 1)) 0))
(assert (> (+ (- 2) (* x1 1)) 0))
(assert (< (+ 7 (* x0 1)) 0))

==============
Solving Branch is 17!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (< (+ 0 (* x0 1)) 0))
(assert (< (+ 1 (* x0 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (<= (+ 2 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 8) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))
(assert (<= (+ 3 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 7) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (<= (+ (- 4) (* x1 1)) 0))
(assert (> (+ 4 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 5 (* x0 1)) 0))
(assert (<= (+ (- 3) (* x1 1)) 0))
(assert (> (+ 5 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 6 (* x0 1)) 0))
(assert (<= (+ (- 2) (* x1 1)) 0))

==============
Solving Branch is 16!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (< (+ 0 (* x0 1)) 0))
(assert (< (+ 1 (* x0 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (<= (+ 2 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 8) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))
(assert (<= (+ 3 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 7) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (<= (+ (- 4) (* x1 1)) 0))
(assert (> (+ 4 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 5 (* x0 1)) 0))
(assert (<= (+ (- 3) (* x1 1)) 0))
(assert (> (+ 5 (* x0 3) (* x1 1)) 0))
(assert (< (+ 6 (* x0 1)) 0))

==============
Solving Branch is 15!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (< (+ 0 (* x0 1)) 0))
(assert (< (+ 1 (* x0 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (<= (+ 2 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 8) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))
(assert (<= (+ 3 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 7) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (<= (+ (- 4) (* x1 1)) 0))
(assert (> (+ 4 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 5 (* x0 1)) 0))
(assert (<= (+ (- 3) (* x1 1)) 0))
(assert (<= (+ 5 (* x0 3) (* x1 1)) 0))

==============
Solving Branch is 14!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (< (+ 0 (* x0 1)) 0))
(assert (< (+ 1 (* x0 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (<= (+ 2 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 8) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))
(assert (<= (+ 3 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 7) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (<= (+ (- 4) (* x1 1)) 0))
(assert (> (+ 4 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 5 (* x0 1)) 0))
(assert (> (+ (- 3) (* x1 1)) 0))

==============
Solving Branch is 13!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (< (+ 0 (* x0 1)) 0))
(assert (< (+ 1 (* x0 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (<= (+ 2 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 8) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))
(assert (<= (+ 3 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 7) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (<= (+ (- 4) (* x1 1)) 0))
(assert (> (+ 4 (* x0 3) (* x1 1)) 0))
(assert (< (+ 5 (* x0 1)) 0))

==============
after for loop
after pureDfs final
Solving Branch is 11!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (< (+ 0 (* x0 1)) 0))
(assert (< (+ 1 (* x0 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (<= (+ 2 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 8) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))
(assert (<= (+ 3 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 7) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (> (+ (- 4) (* x1 1)) 0))

==============
Solving Branch is 10!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (< (+ 0 (* x0 1)) 0))
(assert (< (+ 1 (* x0 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (<= (+ 2 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 8) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))
(assert (<= (+ 3 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 7) (* x0 1) (* x1 1)) 0))
(assert (< (+ 4 (* x0 1)) 0))

==============
Solving Branch is 9!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (< (+ 0 (* x0 1)) 0))
(assert (< (+ 1 (* x0 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (<= (+ 2 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 8) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))
(assert (<= (+ 3 (* x0 3) (* x1 1)) 0))
(assert (>= (+ (- 7) (* x0 1) (* x1 1)) 0))

==============
Solving Branch is 8!!!!
before solve at
sat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (< (+ 0 (* x0 1)) 0))
(assert (< (+ 1 (* x0 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (<= (+ 2 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 8) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))
(assert (> (+ 3 (* x0 3) (* x1 1)) 0))
(rmodel->model-converter-wrapper
x1 -> 4
x0 -> (- 2)
)

==============
after solve
Total Elapsed Time: 3.12836
  Search Time: 1.09191
  Solving Time: 1.18454
  Program Time: 0.851906
remote run 0
input string -2
4

parsin not complete!
branch size: 35
costraint size: 22
costraint size1: 22
costraint siz2e: 22
constraints_idx[0]:2constraints_idx[1]:4constraints_idx[2]:6constraints_idx[3]:7constraints_idx[4]:8constraints_idx[5]:9constraints_idx[6]:11constraints_idx[7]:12constraints_idx[8]:13constraints_idx[9]:15constraints_idx[10]:16constraints_idx[11]:17constraints_idx[12]:19constraints_idx[13]:20constraints_idx[14]:22constraints_idx[15]:23constraints_idx[16]:25constraints_idx[17]:26constraints_idx[18]:28constraints_idx[19]:29constraints_idx[20]:31constraints_idx[21]:32costraint idx front: 2
parsing complete!
Iteration 45 (3s): covered 9 branches [1 reach funs, 10 reach branches].
path.constraints_idx[8]=13
-1 6 9 6 9 6 10 12 14 15 6 10 12 14 15 6 10 12 14 15 6 10 12 14 15 6 10 12 14 15 6 10 12 13 6 10 12 13 6 10 11 7 -2 
-1 6 9 6 9 6 10 12 14 15 6 10 12 13 6 10 12 13 6 10 11 6 10 11 6 10 11 6 10 11 6 10 11 7 -2 
Constraint Size : 22
files.byte = 890
no hi..
nRcv : 890
no break..
file_info.st_size : 890
files.byte 890
send done...
after run
after updatecover
after branch_idx
prev_ex 
cur_ex 
third branch_idx = 13
after checkprediction
after SymbolicPath
Solving Branch is 21!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (< (+ 0 (* x0 1)) 0))
(assert (< (+ 1 (* x0 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (<= (+ 2 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 8) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))
(assert (> (+ 3 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (<= (+ (- 4) (* x1 1)) 0))
(assert (> (+ 4 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 5 (* x0 1)) 0))
(assert (> (+ (- 3) (* x1 1)) 0))
(assert (>= (+ 6 (* x0 1)) 0))
(assert (> (+ (- 2) (* x1 1)) 0))
(assert (>= (+ 7 (* x0 1)) 0))
(assert (> (+ (- 1) (* x1 1)) 0))
(assert (>= (+ 8 (* x0 1)) 0))
(assert (> (+ 0 (* x1 1)) 0))
(assert (>= (+ 9 (* x0 1)) 0))
(assert (<= (+ 1 (* x1 1)) 0))

==============
Solving Branch is 20!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (< (+ 0 (* x0 1)) 0))
(assert (< (+ 1 (* x0 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (<= (+ 2 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 8) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))
(assert (> (+ 3 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (<= (+ (- 4) (* x1 1)) 0))
(assert (> (+ 4 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 5 (* x0 1)) 0))
(assert (> (+ (- 3) (* x1 1)) 0))
(assert (>= (+ 6 (* x0 1)) 0))
(assert (> (+ (- 2) (* x1 1)) 0))
(assert (>= (+ 7 (* x0 1)) 0))
(assert (> (+ (- 1) (* x1 1)) 0))
(assert (>= (+ 8 (* x0 1)) 0))
(assert (> (+ 0 (* x1 1)) 0))
(assert (< (+ 9 (* x0 1)) 0))

==============
Solving Branch is 19!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (< (+ 0 (* x0 1)) 0))
(assert (< (+ 1 (* x0 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (<= (+ 2 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 8) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))
(assert (> (+ 3 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (<= (+ (- 4) (* x1 1)) 0))
(assert (> (+ 4 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 5 (* x0 1)) 0))
(assert (> (+ (- 3) (* x1 1)) 0))
(assert (>= (+ 6 (* x0 1)) 0))
(assert (> (+ (- 2) (* x1 1)) 0))
(assert (>= (+ 7 (* x0 1)) 0))
(assert (> (+ (- 1) (* x1 1)) 0))
(assert (>= (+ 8 (* x0 1)) 0))
(assert (<= (+ 0 (* x1 1)) 0))

==============
Solving Branch is 18!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (< (+ 0 (* x0 1)) 0))
(assert (< (+ 1 (* x0 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (<= (+ 2 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 8) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))
(assert (> (+ 3 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (<= (+ (- 4) (* x1 1)) 0))
(assert (> (+ 4 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 5 (* x0 1)) 0))
(assert (> (+ (- 3) (* x1 1)) 0))
(assert (>= (+ 6 (* x0 1)) 0))
(assert (> (+ (- 2) (* x1 1)) 0))
(assert (>= (+ 7 (* x0 1)) 0))
(assert (> (+ (- 1) (* x1 1)) 0))
(assert (< (+ 8 (* x0 1)) 0))

==============
Solving Branch is 17!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (< (+ 0 (* x0 1)) 0))
(assert (< (+ 1 (* x0 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (<= (+ 2 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 8) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))
(assert (> (+ 3 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (<= (+ (- 4) (* x1 1)) 0))
(assert (> (+ 4 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 5 (* x0 1)) 0))
(assert (> (+ (- 3) (* x1 1)) 0))
(assert (>= (+ 6 (* x0 1)) 0))
(assert (> (+ (- 2) (* x1 1)) 0))
(assert (>= (+ 7 (* x0 1)) 0))
(assert (<= (+ (- 1) (* x1 1)) 0))

==============
Solving Branch is 16!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (< (+ 0 (* x0 1)) 0))
(assert (< (+ 1 (* x0 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (<= (+ 2 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 8) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))
(assert (> (+ 3 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (<= (+ (- 4) (* x1 1)) 0))
(assert (> (+ 4 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 5 (* x0 1)) 0))
(assert (> (+ (- 3) (* x1 1)) 0))
(assert (>= (+ 6 (* x0 1)) 0))
(assert (> (+ (- 2) (* x1 1)) 0))
(assert (< (+ 7 (* x0 1)) 0))

==============
Solving Branch is 15!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (< (+ 0 (* x0 1)) 0))
(assert (< (+ 1 (* x0 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (<= (+ 2 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 8) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))
(assert (> (+ 3 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (<= (+ (- 4) (* x1 1)) 0))
(assert (> (+ 4 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 5 (* x0 1)) 0))
(assert (> (+ (- 3) (* x1 1)) 0))
(assert (>= (+ 6 (* x0 1)) 0))
(assert (<= (+ (- 2) (* x1 1)) 0))

==============
Solving Branch is 14!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (< (+ 0 (* x0 1)) 0))
(assert (< (+ 1 (* x0 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (<= (+ 2 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 8) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))
(assert (> (+ 3 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (<= (+ (- 4) (* x1 1)) 0))
(assert (> (+ 4 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 5 (* x0 1)) 0))
(assert (> (+ (- 3) (* x1 1)) 0))
(assert (< (+ 6 (* x0 1)) 0))

==============
Solving Branch is 13!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (< (+ 0 (* x0 1)) 0))
(assert (< (+ 1 (* x0 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (<= (+ 2 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 8) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))
(assert (> (+ 3 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (<= (+ (- 4) (* x1 1)) 0))
(assert (> (+ 4 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 5 (* x0 1)) 0))
(assert (<= (+ (- 3) (* x1 1)) 0))

==============
Solving Branch is 12!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (< (+ 0 (* x0 1)) 0))
(assert (< (+ 1 (* x0 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (<= (+ 2 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 8) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))
(assert (> (+ 3 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (<= (+ (- 4) (* x1 1)) 0))
(assert (> (+ 4 (* x0 3) (* x1 1)) 0))
(assert (< (+ 5 (* x0 1)) 0))

==============
Solving Branch is 11!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (< (+ 0 (* x0 1)) 0))
(assert (< (+ 1 (* x0 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (<= (+ 2 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 8) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))
(assert (> (+ 3 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (<= (+ (- 4) (* x1 1)) 0))
(assert (<= (+ 4 (* x0 3) (* x1 1)) 0))

==============
Solving Branch is 10!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (< (+ 0 (* x0 1)) 0))
(assert (< (+ 1 (* x0 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (<= (+ 2 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 8) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))
(assert (> (+ 3 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (> (+ (- 4) (* x1 1)) 0))

==============
Solving Branch is 9!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (< (+ 0 (* x0 1)) 0))
(assert (< (+ 1 (* x0 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (<= (+ 2 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 8) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))
(assert (> (+ 3 (* x0 3) (* x1 1)) 0))
(assert (< (+ 4 (* x0 1)) 0))

==============
after for loop
after pureDfs final
Solving Branch is 7!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (< (+ 0 (* x0 1)) 0))
(assert (< (+ 1 (* x0 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (<= (+ 2 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 8) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (> (+ (- 5) (* x1 1)) 0))

==============
Solving Branch is 6!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (< (+ 0 (* x0 1)) 0))
(assert (< (+ 1 (* x0 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (<= (+ 2 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 8) (* x0 1) (* x1 1)) 0))
(assert (< (+ 3 (* x0 1)) 0))

==============
Solving Branch is 5!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (< (+ 0 (* x0 1)) 0))
(assert (< (+ 1 (* x0 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (<= (+ 2 (* x0 3) (* x1 1)) 0))
(assert (>= (+ (- 8) (* x0 1) (* x1 1)) 0))

==============
Solving Branch is 4!!!!
before solve at
sat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (< (+ 0 (* x0 1)) 0))
(assert (< (+ 1 (* x0 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (> (+ 2 (* x0 3) (* x1 1)) 0))
(rmodel->model-converter-wrapper
x1 -> 5
x0 -> (- 2)
)

==============
after solve
Total Elapsed Time: 3.18716
  Search Time: 1.09334
  Solving Time: 1.22228
  Program Time: 0.871549
remote run 0
input string -2
5

parsin not complete!
branch size: 33
costraint size: 20
costraint size1: 20
costraint siz2e: 20
constraints_idx[0]:2constraints_idx[1]:4constraints_idx[2]:6constraints_idx[3]:7constraints_idx[4]:8constraints_idx[5]:10constraints_idx[6]:11constraints_idx[7]:12constraints_idx[8]:14constraints_idx[9]:15constraints_idx[10]:17constraints_idx[11]:18constraints_idx[12]:20constraints_idx[13]:21constraints_idx[14]:23constraints_idx[15]:24constraints_idx[16]:26constraints_idx[17]:27constraints_idx[18]:29constraints_idx[19]:30costraint idx front: 2
parsing complete!
Iteration 46 (3s): covered 9 branches [1 reach funs, 10 reach branches].
path.constraints_idx[4]=8
-1 6 9 6 9 6 10 12 14 15 6 10 12 14 15 6 10 12 14 15 6 10 12 14 15 6 10 12 14 15 6 10 12 13 6 10 12 13 6 10 11 7 -2 
-1 6 9 6 9 6 10 12 13 6 10 12 13 6 10 11 6 10 11 6 10 11 6 10 11 6 10 11 6 10 11 7 -2 
Constraint Size : 20
files.byte = 798
no hi..
nRcv : 798
no break..
file_info.st_size : 798
files.byte 798
send done...
after run
after updatecover
after branch_idx
prev_ex 
cur_ex 
third branch_idx = 8
after checkprediction
after SymbolicPath
Solving Branch is 19!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (< (+ 0 (* x0 1)) 0))
(assert (< (+ 1 (* x0 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (> (+ 2 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))
(assert (> (+ 3 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (> (+ (- 4) (* x1 1)) 0))
(assert (>= (+ 5 (* x0 1)) 0))
(assert (> (+ (- 3) (* x1 1)) 0))
(assert (>= (+ 6 (* x0 1)) 0))
(assert (> (+ (- 2) (* x1 1)) 0))
(assert (>= (+ 7 (* x0 1)) 0))
(assert (> (+ (- 1) (* x1 1)) 0))
(assert (>= (+ 8 (* x0 1)) 0))
(assert (> (+ 0 (* x1 1)) 0))
(assert (>= (+ 9 (* x0 1)) 0))
(assert (<= (+ 1 (* x1 1)) 0))

==============
Solving Branch is 18!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (< (+ 0 (* x0 1)) 0))
(assert (< (+ 1 (* x0 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (> (+ 2 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))
(assert (> (+ 3 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (> (+ (- 4) (* x1 1)) 0))
(assert (>= (+ 5 (* x0 1)) 0))
(assert (> (+ (- 3) (* x1 1)) 0))
(assert (>= (+ 6 (* x0 1)) 0))
(assert (> (+ (- 2) (* x1 1)) 0))
(assert (>= (+ 7 (* x0 1)) 0))
(assert (> (+ (- 1) (* x1 1)) 0))
(assert (>= (+ 8 (* x0 1)) 0))
(assert (> (+ 0 (* x1 1)) 0))
(assert (< (+ 9 (* x0 1)) 0))

==============
Solving Branch is 17!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (< (+ 0 (* x0 1)) 0))
(assert (< (+ 1 (* x0 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (> (+ 2 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))
(assert (> (+ 3 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (> (+ (- 4) (* x1 1)) 0))
(assert (>= (+ 5 (* x0 1)) 0))
(assert (> (+ (- 3) (* x1 1)) 0))
(assert (>= (+ 6 (* x0 1)) 0))
(assert (> (+ (- 2) (* x1 1)) 0))
(assert (>= (+ 7 (* x0 1)) 0))
(assert (> (+ (- 1) (* x1 1)) 0))
(assert (>= (+ 8 (* x0 1)) 0))
(assert (<= (+ 0 (* x1 1)) 0))

==============
Solving Branch is 16!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (< (+ 0 (* x0 1)) 0))
(assert (< (+ 1 (* x0 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (> (+ 2 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))
(assert (> (+ 3 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (> (+ (- 4) (* x1 1)) 0))
(assert (>= (+ 5 (* x0 1)) 0))
(assert (> (+ (- 3) (* x1 1)) 0))
(assert (>= (+ 6 (* x0 1)) 0))
(assert (> (+ (- 2) (* x1 1)) 0))
(assert (>= (+ 7 (* x0 1)) 0))
(assert (> (+ (- 1) (* x1 1)) 0))
(assert (< (+ 8 (* x0 1)) 0))

==============
Solving Branch is 15!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (< (+ 0 (* x0 1)) 0))
(assert (< (+ 1 (* x0 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (> (+ 2 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))
(assert (> (+ 3 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (> (+ (- 4) (* x1 1)) 0))
(assert (>= (+ 5 (* x0 1)) 0))
(assert (> (+ (- 3) (* x1 1)) 0))
(assert (>= (+ 6 (* x0 1)) 0))
(assert (> (+ (- 2) (* x1 1)) 0))
(assert (>= (+ 7 (* x0 1)) 0))
(assert (<= (+ (- 1) (* x1 1)) 0))

==============
Solving Branch is 14!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (< (+ 0 (* x0 1)) 0))
(assert (< (+ 1 (* x0 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (> (+ 2 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))
(assert (> (+ 3 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (> (+ (- 4) (* x1 1)) 0))
(assert (>= (+ 5 (* x0 1)) 0))
(assert (> (+ (- 3) (* x1 1)) 0))
(assert (>= (+ 6 (* x0 1)) 0))
(assert (> (+ (- 2) (* x1 1)) 0))
(assert (< (+ 7 (* x0 1)) 0))

==============
Solving Branch is 13!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (< (+ 0 (* x0 1)) 0))
(assert (< (+ 1 (* x0 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (> (+ 2 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))
(assert (> (+ 3 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (> (+ (- 4) (* x1 1)) 0))
(assert (>= (+ 5 (* x0 1)) 0))
(assert (> (+ (- 3) (* x1 1)) 0))
(assert (>= (+ 6 (* x0 1)) 0))
(assert (<= (+ (- 2) (* x1 1)) 0))

==============
Solving Branch is 12!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (< (+ 0 (* x0 1)) 0))
(assert (< (+ 1 (* x0 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (> (+ 2 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))
(assert (> (+ 3 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (> (+ (- 4) (* x1 1)) 0))
(assert (>= (+ 5 (* x0 1)) 0))
(assert (> (+ (- 3) (* x1 1)) 0))
(assert (< (+ 6 (* x0 1)) 0))

==============
Solving Branch is 11!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (< (+ 0 (* x0 1)) 0))
(assert (< (+ 1 (* x0 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (> (+ 2 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))
(assert (> (+ 3 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (> (+ (- 4) (* x1 1)) 0))
(assert (>= (+ 5 (* x0 1)) 0))
(assert (<= (+ (- 3) (* x1 1)) 0))

==============
Solving Branch is 10!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (< (+ 0 (* x0 1)) 0))
(assert (< (+ 1 (* x0 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (> (+ 2 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))
(assert (> (+ 3 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (> (+ (- 4) (* x1 1)) 0))
(assert (< (+ 5 (* x0 1)) 0))

==============
Solving Branch is 9!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (< (+ 0 (* x0 1)) 0))
(assert (< (+ 1 (* x0 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (> (+ 2 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))
(assert (> (+ 3 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (<= (+ (- 4) (* x1 1)) 0))

==============
Solving Branch is 8!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (< (+ 0 (* x0 1)) 0))
(assert (< (+ 1 (* x0 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (> (+ 2 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))
(assert (> (+ 3 (* x0 3) (* x1 1)) 0))
(assert (< (+ 4 (* x0 1)) 0))

==============
Solving Branch is 7!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (< (+ 0 (* x0 1)) 0))
(assert (< (+ 1 (* x0 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (> (+ 2 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))
(assert (<= (+ 3 (* x0 3) (* x1 1)) 0))

==============
Solving Branch is 6!!!!
before solve at
sat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (< (+ 0 (* x0 1)) 0))
(assert (< (+ 1 (* x0 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (> (+ 2 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (> (+ (- 5) (* x1 1)) 0))
(rmodel->model-converter-wrapper
x1 -> 6
x0 -> (- 2)
)

==============
after solve
Total Elapsed Time: 3.22711
  Search Time: 1.09474
  Solving Time: 1.24478
  Program Time: 0.887593
remote run 0
input string -2
6

parsin not complete!
branch size: 32
costraint size: 19
costraint size1: 19
costraint siz2e: 19
constraints_idx[0]:2constraints_idx[1]:4constraints_idx[2]:6constraints_idx[3]:7constraints_idx[4]:8constraints_idx[5]:10constraints_idx[6]:11constraints_idx[7]:13constraints_idx[8]:14constraints_idx[9]:16constraints_idx[10]:17constraints_idx[11]:19constraints_idx[12]:20constraints_idx[13]:22constraints_idx[14]:23constraints_idx[15]:25constraints_idx[16]:26constraints_idx[17]:28constraints_idx[18]:29costraint idx front: 2
parsing complete!
Iteration 47 (3s): covered 9 branches [1 reach funs, 10 reach branches].
path.constraints_idx[6]=11
-1 6 9 6 9 6 10 12 13 6 10 12 13 6 10 11 6 10 11 6 10 11 6 10 11 6 10 11 6 10 11 7 -2 
-1 6 9 6 9 6 10 12 13 6 10 11 6 10 11 6 10 11 6 10 11 6 10 11 6 10 11 6 10 11 7 -2 
Constraint Size : 19
files.byte = 752
no hi..
nRcv : 752
no break..
file_info.st_size : 752
files.byte 752
send done...
after run
after updatecover
after branch_idx
prev_ex 
cur_ex 
third branch_idx = 11
after checkprediction
after SymbolicPath
Solving Branch is 18!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (< (+ 0 (* x0 1)) 0))
(assert (< (+ 1 (* x0 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (> (+ 2 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (> (+ (- 5) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (> (+ (- 4) (* x1 1)) 0))
(assert (>= (+ 5 (* x0 1)) 0))
(assert (> (+ (- 3) (* x1 1)) 0))
(assert (>= (+ 6 (* x0 1)) 0))
(assert (> (+ (- 2) (* x1 1)) 0))
(assert (>= (+ 7 (* x0 1)) 0))
(assert (> (+ (- 1) (* x1 1)) 0))
(assert (>= (+ 8 (* x0 1)) 0))
(assert (> (+ 0 (* x1 1)) 0))
(assert (>= (+ 9 (* x0 1)) 0))
(assert (<= (+ 1 (* x1 1)) 0))

==============
Solving Branch is 17!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (< (+ 0 (* x0 1)) 0))
(assert (< (+ 1 (* x0 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (> (+ 2 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (> (+ (- 5) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (> (+ (- 4) (* x1 1)) 0))
(assert (>= (+ 5 (* x0 1)) 0))
(assert (> (+ (- 3) (* x1 1)) 0))
(assert (>= (+ 6 (* x0 1)) 0))
(assert (> (+ (- 2) (* x1 1)) 0))
(assert (>= (+ 7 (* x0 1)) 0))
(assert (> (+ (- 1) (* x1 1)) 0))
(assert (>= (+ 8 (* x0 1)) 0))
(assert (> (+ 0 (* x1 1)) 0))
(assert (< (+ 9 (* x0 1)) 0))

==============
Solving Branch is 16!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (< (+ 0 (* x0 1)) 0))
(assert (< (+ 1 (* x0 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (> (+ 2 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (> (+ (- 5) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (> (+ (- 4) (* x1 1)) 0))
(assert (>= (+ 5 (* x0 1)) 0))
(assert (> (+ (- 3) (* x1 1)) 0))
(assert (>= (+ 6 (* x0 1)) 0))
(assert (> (+ (- 2) (* x1 1)) 0))
(assert (>= (+ 7 (* x0 1)) 0))
(assert (> (+ (- 1) (* x1 1)) 0))
(assert (>= (+ 8 (* x0 1)) 0))
(assert (<= (+ 0 (* x1 1)) 0))

==============
Solving Branch is 15!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (< (+ 0 (* x0 1)) 0))
(assert (< (+ 1 (* x0 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (> (+ 2 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (> (+ (- 5) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (> (+ (- 4) (* x1 1)) 0))
(assert (>= (+ 5 (* x0 1)) 0))
(assert (> (+ (- 3) (* x1 1)) 0))
(assert (>= (+ 6 (* x0 1)) 0))
(assert (> (+ (- 2) (* x1 1)) 0))
(assert (>= (+ 7 (* x0 1)) 0))
(assert (> (+ (- 1) (* x1 1)) 0))
(assert (< (+ 8 (* x0 1)) 0))

==============
Solving Branch is 14!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (< (+ 0 (* x0 1)) 0))
(assert (< (+ 1 (* x0 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (> (+ 2 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (> (+ (- 5) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (> (+ (- 4) (* x1 1)) 0))
(assert (>= (+ 5 (* x0 1)) 0))
(assert (> (+ (- 3) (* x1 1)) 0))
(assert (>= (+ 6 (* x0 1)) 0))
(assert (> (+ (- 2) (* x1 1)) 0))
(assert (>= (+ 7 (* x0 1)) 0))
(assert (<= (+ (- 1) (* x1 1)) 0))

==============
Solving Branch is 13!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (< (+ 0 (* x0 1)) 0))
(assert (< (+ 1 (* x0 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (> (+ 2 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (> (+ (- 5) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (> (+ (- 4) (* x1 1)) 0))
(assert (>= (+ 5 (* x0 1)) 0))
(assert (> (+ (- 3) (* x1 1)) 0))
(assert (>= (+ 6 (* x0 1)) 0))
(assert (> (+ (- 2) (* x1 1)) 0))
(assert (< (+ 7 (* x0 1)) 0))

==============
Solving Branch is 12!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (< (+ 0 (* x0 1)) 0))
(assert (< (+ 1 (* x0 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (> (+ 2 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (> (+ (- 5) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (> (+ (- 4) (* x1 1)) 0))
(assert (>= (+ 5 (* x0 1)) 0))
(assert (> (+ (- 3) (* x1 1)) 0))
(assert (>= (+ 6 (* x0 1)) 0))
(assert (<= (+ (- 2) (* x1 1)) 0))

==============
Solving Branch is 11!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (< (+ 0 (* x0 1)) 0))
(assert (< (+ 1 (* x0 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (> (+ 2 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (> (+ (- 5) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (> (+ (- 4) (* x1 1)) 0))
(assert (>= (+ 5 (* x0 1)) 0))
(assert (> (+ (- 3) (* x1 1)) 0))
(assert (< (+ 6 (* x0 1)) 0))

==============
Solving Branch is 10!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (< (+ 0 (* x0 1)) 0))
(assert (< (+ 1 (* x0 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (> (+ 2 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (> (+ (- 5) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (> (+ (- 4) (* x1 1)) 0))
(assert (>= (+ 5 (* x0 1)) 0))
(assert (<= (+ (- 3) (* x1 1)) 0))

==============
Solving Branch is 9!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (< (+ 0 (* x0 1)) 0))
(assert (< (+ 1 (* x0 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (> (+ 2 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (> (+ (- 5) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (> (+ (- 4) (* x1 1)) 0))
(assert (< (+ 5 (* x0 1)) 0))

==============
Solving Branch is 8!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (< (+ 0 (* x0 1)) 0))
(assert (< (+ 1 (* x0 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (> (+ 2 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (> (+ (- 5) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (<= (+ (- 4) (* x1 1)) 0))

==============
Solving Branch is 7!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (< (+ 0 (* x0 1)) 0))
(assert (< (+ 1 (* x0 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (> (+ 2 (* x0 3) (* x1 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (> (+ (- 5) (* x1 1)) 0))
(assert (< (+ 4 (* x0 1)) 0))

==============
after for loop
after pureDfs final
Solving Branch is 5!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (< (+ 0 (* x0 1)) 0))
(assert (< (+ 1 (* x0 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (<= (+ (- 6) (* x1 1)) 0))
(assert (> (+ 2 (* x0 3) (* x1 1)) 0))
(assert (< (+ 3 (* x0 1)) 0))

==============
after for loop
after pureDfs final
Solving Branch is 3!!!!
before solve at
sat : (declare-fun x1 () Int)
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (> (+ (- 6) (* x1 1)) 0))
(rmodel->model-converter-wrapper
x1 -> 7
)

==============
after solve
Total Elapsed Time: 3.2654
  Search Time: 1.096
  Solving Time: 1.26311
  Program Time: 0.906293
remote run 0
input string -2
7

parsin not complete!
branch size: 31
costraint size: 18
costraint size1: 18
costraint siz2e: 18
constraints_idx[0]:2constraints_idx[1]:4constraints_idx[2]:6constraints_idx[3]:7constraints_idx[4]:9constraints_idx[5]:10constraints_idx[6]:12constraints_idx[7]:13constraints_idx[8]:15constraints_idx[9]:16constraints_idx[10]:18constraints_idx[11]:19constraints_idx[12]:21constraints_idx[13]:22constraints_idx[14]:24constraints_idx[15]:25constraints_idx[16]:27constraints_idx[17]:28costraint idx front: 2
parsing complete!
Iteration 48 (3s): covered 9 branches [1 reach funs, 10 reach branches].
path.constraints_idx[3]=7
-1 6 9 6 9 6 10 12 14 15 6 10 12 14 15 6 10 12 14 15 6 10 12 14 15 6 10 12 14 15 6 10 12 13 6 10 12 13 6 10 11 7 -2 
-1 6 9 6 9 6 10 11 6 10 11 6 10 11 6 10 11 6 10 11 6 10 11 6 10 11 6 10 11 7 -2 
Constraint Size : 18
files.byte = 706
no hi..
nRcv : 706
no break..
file_info.st_size : 706
files.byte 706
send done...
after run
after updatecover
after branch_idx
prev_ex 
cur_ex 
third branch_idx = 7
after checkprediction
after SymbolicPath
Solving Branch is 17!!!!
before solve at
unsat : (declare-fun x1 () Int)
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (> (+ (- 6) (* x1 1)) 0))
(assert (> (+ (- 5) (* x1 1)) 0))
(assert (> (+ (- 4) (* x1 1)) 0))
(assert (> (+ (- 3) (* x1 1)) 0))
(assert (> (+ (- 2) (* x1 1)) 0))
(assert (> (+ (- 1) (* x1 1)) 0))
(assert (> (+ 0 (* x1 1)) 0))
(assert (<= (+ 1 (* x1 1)) 0))

==============
Solving Branch is 16!!!!
before solve at
unsat : (declare-fun x0 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (< (+ 0 (* x0 1)) 0))
(assert (< (+ 1 (* x0 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (>= (+ 5 (* x0 1)) 0))
(assert (>= (+ 6 (* x0 1)) 0))
(assert (>= (+ 7 (* x0 1)) 0))
(assert (>= (+ 8 (* x0 1)) 0))
(assert (< (+ 9 (* x0 1)) 0))

==============
Solving Branch is 15!!!!
before solve at
unsat : (declare-fun x1 () Int)
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (> (+ (- 6) (* x1 1)) 0))
(assert (> (+ (- 5) (* x1 1)) 0))
(assert (> (+ (- 4) (* x1 1)) 0))
(assert (> (+ (- 3) (* x1 1)) 0))
(assert (> (+ (- 2) (* x1 1)) 0))
(assert (> (+ (- 1) (* x1 1)) 0))
(assert (<= (+ 0 (* x1 1)) 0))

==============
Solving Branch is 14!!!!
before solve at
unsat : (declare-fun x0 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (< (+ 0 (* x0 1)) 0))
(assert (< (+ 1 (* x0 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (>= (+ 5 (* x0 1)) 0))
(assert (>= (+ 6 (* x0 1)) 0))
(assert (>= (+ 7 (* x0 1)) 0))
(assert (< (+ 8 (* x0 1)) 0))

==============
Solving Branch is 13!!!!
before solve at
unsat : (declare-fun x1 () Int)
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (> (+ (- 6) (* x1 1)) 0))
(assert (> (+ (- 5) (* x1 1)) 0))
(assert (> (+ (- 4) (* x1 1)) 0))
(assert (> (+ (- 3) (* x1 1)) 0))
(assert (> (+ (- 2) (* x1 1)) 0))
(assert (<= (+ (- 1) (* x1 1)) 0))

==============
Solving Branch is 12!!!!
before solve at
unsat : (declare-fun x0 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (< (+ 0 (* x0 1)) 0))
(assert (< (+ 1 (* x0 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (>= (+ 5 (* x0 1)) 0))
(assert (>= (+ 6 (* x0 1)) 0))
(assert (< (+ 7 (* x0 1)) 0))

==============
Solving Branch is 11!!!!
before solve at
unsat : (declare-fun x1 () Int)
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (> (+ (- 6) (* x1 1)) 0))
(assert (> (+ (- 5) (* x1 1)) 0))
(assert (> (+ (- 4) (* x1 1)) 0))
(assert (> (+ (- 3) (* x1 1)) 0))
(assert (<= (+ (- 2) (* x1 1)) 0))

==============
Solving Branch is 10!!!!
before solve at
unsat : (declare-fun x0 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (< (+ 0 (* x0 1)) 0))
(assert (< (+ 1 (* x0 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (>= (+ 5 (* x0 1)) 0))
(assert (< (+ 6 (* x0 1)) 0))

==============
Solving Branch is 9!!!!
before solve at
unsat : (declare-fun x1 () Int)
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (> (+ (- 6) (* x1 1)) 0))
(assert (> (+ (- 5) (* x1 1)) 0))
(assert (> (+ (- 4) (* x1 1)) 0))
(assert (<= (+ (- 3) (* x1 1)) 0))

==============
Solving Branch is 8!!!!
before solve at
unsat : (declare-fun x0 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (< (+ 0 (* x0 1)) 0))
(assert (< (+ 1 (* x0 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (< (+ 5 (* x0 1)) 0))

==============
Solving Branch is 7!!!!
before solve at
unsat : (declare-fun x1 () Int)
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (> (+ (- 6) (* x1 1)) 0))
(assert (> (+ (- 5) (* x1 1)) 0))
(assert (<= (+ (- 4) (* x1 1)) 0))

==============
Solving Branch is 6!!!!
before solve at
unsat : (declare-fun x0 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (< (+ 0 (* x0 1)) 0))
(assert (< (+ 1 (* x0 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (< (+ 4 (* x0 1)) 0))

==============
Solving Branch is 5!!!!
before solve at
unsat : (declare-fun x1 () Int)
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (> (+ (- 6) (* x1 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))

==============
Solving Branch is 4!!!!
before solve at
unsat : (declare-fun x0 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (< (+ 0 (* x0 1)) 0))
(assert (< (+ 1 (* x0 1)) 0))
(assert (>= (+ 2 (* x0 1)) 0))
(assert (< (+ 3 (* x0 1)) 0))

==============
after for loop
after pureDfs final
Solving Branch is 2!!!!
before solve at
sat : (declare-fun x0 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (< (+ 0 (* x0 1)) 0))
(assert (< (+ 1 (* x0 1)) 0))
(assert (< (+ 2 (* x0 1)) 0))
(rmodel->model-converter-wrapper
x0 -> (- 3)
)

==============
after solve
Total Elapsed Time: 3.30449
  Search Time: 1.09762
  Solving Time: 1.27965
  Program Time: 0.927227
remote run 0
input string -3
0

parsin not complete!
branch size: 42
costraint size: 29
costraint size1: 29
costraint siz2e: 29
constraints_idx[0]:2constraints_idx[1]:4constraints_idx[2]:6constraints_idx[3]:8constraints_idx[4]:9constraints_idx[5]:10constraints_idx[6]:11constraints_idx[7]:13constraints_idx[8]:14constraints_idx[9]:15constraints_idx[10]:16constraints_idx[11]:18constraints_idx[12]:19constraints_idx[13]:20constraints_idx[14]:21constraints_idx[15]:23constraints_idx[16]:24constraints_idx[17]:25constraints_idx[18]:26constraints_idx[19]:28constraints_idx[20]:29constraints_idx[21]:30constraints_idx[22]:31constraints_idx[23]:33constraints_idx[24]:34constraints_idx[25]:35constraints_idx[26]:36constraints_idx[27]:38constraints_idx[28]:39costraint idx front: 2
parsing complete!
Iteration 49 (3s): covered 9 branches [1 reach funs, 10 reach branches].
path.constraints_idx[2]=6
-1 6 9 6 9 6 10 12 14 15 6 10 12 14 15 6 10 12 14 15 6 10 12 14 15 6 10 12 14 15 6 10 12 13 6 10 12 13 6 10 11 7 -2 
-1 6 9 6 9 6 9 6 10 12 14 15 6 10 12 14 15 6 10 12 14 15 6 10 12 14 15 6 10 12 14 15 6 10 12 14 15 6 10 11 7 -2 
Constraint Size : 29
files.byte = 1224
no hi..
nRcv : 1024
no break..
file_info.st_size : 1024
files.byte 1224
no hi..
nRcv : 200
no break..
file_info.st_size : 1224
files.byte 1224
send done...
after run
after updatecover
after branch_idx
prev_ex 
cur_ex 
third branch_idx = 6
after checkprediction
after SymbolicPath
Solving Branch is 28!!!!
before solve at
sat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (< (+ 0 (* x0 1)) 0))
(assert (< (+ 1 (* x0 1)) 0))
(assert (< (+ 2 (* x0 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))
(assert (<= (+ 3 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 7) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (<= (+ (- 4) (* x1 1)) 0))
(assert (<= (+ 4 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 6) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 5 (* x0 1)) 0))
(assert (<= (+ (- 3) (* x1 1)) 0))
(assert (<= (+ 5 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 5) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 6 (* x0 1)) 0))
(assert (<= (+ (- 2) (* x1 1)) 0))
(assert (<= (+ 6 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 4) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 7 (* x0 1)) 0))
(assert (<= (+ (- 1) (* x1 1)) 0))
(assert (<= (+ 7 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 3) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 8 (* x0 1)) 0))
(assert (<= (+ 0 (* x1 1)) 0))
(assert (<= (+ 8 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 2) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 9 (* x0 1)) 0))
(assert (<= (+ 1 (* x1 1)) 0))
(rmodel->model-converter-wrapper
x1 -> (- 1)
x0 -> (- 3)
)

==============
after solve
Total Elapsed Time: 3.33422
  Search Time: 1.0996
  Solving Time: 1.28371
  Program Time: 0.950909
remote run 0
input string -3
-1

parsin not complete!
branch size: 44
costraint size: 31
costraint size1: 31
costraint siz2e: 31
constraints_idx[0]:2constraints_idx[1]:4constraints_idx[2]:6constraints_idx[3]:8constraints_idx[4]:9constraints_idx[5]:10constraints_idx[6]:11constraints_idx[7]:13constraints_idx[8]:14constraints_idx[9]:15constraints_idx[10]:16constraints_idx[11]:18constraints_idx[12]:19constraints_idx[13]:20constraints_idx[14]:21constraints_idx[15]:23constraints_idx[16]:24constraints_idx[17]:25constraints_idx[18]:26constraints_idx[19]:28constraints_idx[20]:29constraints_idx[21]:30constraints_idx[22]:31constraints_idx[23]:33constraints_idx[24]:34constraints_idx[25]:35constraints_idx[26]:36constraints_idx[27]:38constraints_idx[28]:39constraints_idx[29]:40constraints_idx[30]:41costraint idx front: 2
parsing complete!
Iteration 50 (3s): covered 9 branches [1 reach funs, 10 reach branches].
path.constraints_idx[28]=39
-1 6 9 6 9 6 9 6 10 12 14 15 6 10 12 14 15 6 10 12 14 15 6 10 12 14 15 6 10 12 14 15 6 10 12 14 15 6 10 11 7 -2 
-1 6 9 6 9 6 9 6 10 12 14 15 6 10 12 14 15 6 10 12 14 15 6 10 12 14 15 6 10 12 14 15 6 10 12 14 15 6 10 12 14 15 7 -2 
Constraint Size : 31
files.byte = 1316
no hi..
nRcv : 1024
no break..
file_info.st_size : 1024
files.byte 1316
no hi..
nRcv : 292
no break..
file_info.st_size : 1316
files.byte 1316
send done...
after run
after updatecover
after branch_idx
prev_ex 
cur_ex 
third branch_idx = 39
after checkprediction
after SymbolicPath
Solving Branch is 30!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (< (+ 0 (* x0 1)) 0))
(assert (< (+ 1 (* x0 1)) 0))
(assert (< (+ 2 (* x0 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))
(assert (<= (+ 3 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 7) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (<= (+ (- 4) (* x1 1)) 0))
(assert (<= (+ 4 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 6) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 5 (* x0 1)) 0))
(assert (<= (+ (- 3) (* x1 1)) 0))
(assert (<= (+ 5 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 5) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 6 (* x0 1)) 0))
(assert (<= (+ (- 2) (* x1 1)) 0))
(assert (<= (+ 6 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 4) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 7 (* x0 1)) 0))
(assert (<= (+ (- 1) (* x1 1)) 0))
(assert (<= (+ 7 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 3) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 8 (* x0 1)) 0))
(assert (<= (+ 0 (* x1 1)) 0))
(assert (<= (+ 8 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 2) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 9 (* x0 1)) 0))
(assert (<= (+ 1 (* x1 1)) 0))
(assert (<= (+ 9 (* x0 3) (* x1 1)) 0))
(assert (>= (+ (- 1) (* x0 1) (* x1 1)) 0))

==============
Solving Branch is 29!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (< (+ 0 (* x0 1)) 0))
(assert (< (+ 1 (* x0 1)) 0))
(assert (< (+ 2 (* x0 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))
(assert (<= (+ 3 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 7) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (<= (+ (- 4) (* x1 1)) 0))
(assert (<= (+ 4 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 6) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 5 (* x0 1)) 0))
(assert (<= (+ (- 3) (* x1 1)) 0))
(assert (<= (+ 5 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 5) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 6 (* x0 1)) 0))
(assert (<= (+ (- 2) (* x1 1)) 0))
(assert (<= (+ 6 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 4) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 7 (* x0 1)) 0))
(assert (<= (+ (- 1) (* x1 1)) 0))
(assert (<= (+ 7 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 3) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 8 (* x0 1)) 0))
(assert (<= (+ 0 (* x1 1)) 0))
(assert (<= (+ 8 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 2) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 9 (* x0 1)) 0))
(assert (<= (+ 1 (* x1 1)) 0))
(assert (> (+ 9 (* x0 3) (* x1 1)) 0))

==============
after for loop
after pureDfs final
Solving Branch is 27!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (< (+ 0 (* x0 1)) 0))
(assert (< (+ 1 (* x0 1)) 0))
(assert (< (+ 2 (* x0 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))
(assert (<= (+ 3 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 7) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (<= (+ (- 4) (* x1 1)) 0))
(assert (<= (+ 4 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 6) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 5 (* x0 1)) 0))
(assert (<= (+ (- 3) (* x1 1)) 0))
(assert (<= (+ 5 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 5) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 6 (* x0 1)) 0))
(assert (<= (+ (- 2) (* x1 1)) 0))
(assert (<= (+ 6 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 4) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 7 (* x0 1)) 0))
(assert (<= (+ (- 1) (* x1 1)) 0))
(assert (<= (+ 7 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 3) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 8 (* x0 1)) 0))
(assert (<= (+ 0 (* x1 1)) 0))
(assert (<= (+ 8 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 2) (* x0 1) (* x1 1)) 0))
(assert (< (+ 9 (* x0 1)) 0))

==============
Solving Branch is 26!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (< (+ 0 (* x0 1)) 0))
(assert (< (+ 1 (* x0 1)) 0))
(assert (< (+ 2 (* x0 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))
(assert (<= (+ 3 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 7) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (<= (+ (- 4) (* x1 1)) 0))
(assert (<= (+ 4 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 6) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 5 (* x0 1)) 0))
(assert (<= (+ (- 3) (* x1 1)) 0))
(assert (<= (+ 5 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 5) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 6 (* x0 1)) 0))
(assert (<= (+ (- 2) (* x1 1)) 0))
(assert (<= (+ 6 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 4) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 7 (* x0 1)) 0))
(assert (<= (+ (- 1) (* x1 1)) 0))
(assert (<= (+ 7 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 3) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 8 (* x0 1)) 0))
(assert (<= (+ 0 (* x1 1)) 0))
(assert (<= (+ 8 (* x0 3) (* x1 1)) 0))
(assert (>= (+ (- 2) (* x0 1) (* x1 1)) 0))

==============
Solving Branch is 25!!!!
before solve at
unsat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (< (+ 0 (* x0 1)) 0))
(assert (< (+ 1 (* x0 1)) 0))
(assert (< (+ 2 (* x0 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))
(assert (<= (+ 3 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 7) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (<= (+ (- 4) (* x1 1)) 0))
(assert (<= (+ 4 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 6) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 5 (* x0 1)) 0))
(assert (<= (+ (- 3) (* x1 1)) 0))
(assert (<= (+ 5 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 5) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 6 (* x0 1)) 0))
(assert (<= (+ (- 2) (* x1 1)) 0))
(assert (<= (+ 6 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 4) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 7 (* x0 1)) 0))
(assert (<= (+ (- 1) (* x1 1)) 0))
(assert (<= (+ 7 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 3) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 8 (* x0 1)) 0))
(assert (<= (+ 0 (* x1 1)) 0))
(assert (> (+ 8 (* x0 3) (* x1 1)) 0))

==============
Solving Branch is 24!!!!
before solve at
sat : (declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 (- 2147483648)))
(assert (<= x0 2147483647))
(assert (>= x1 (- 2147483648)))
(assert (<= x1 2147483647))
(assert (< (+ 0 (* x0 1)) 0))
(assert (< (+ 1 (* x0 1)) 0))
(assert (< (+ 2 (* x0 1)) 0))
(assert (>= (+ 3 (* x0 1)) 0))
(assert (<= (+ (- 5) (* x1 1)) 0))
(assert (<= (+ 3 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 7) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 4 (* x0 1)) 0))
(assert (<= (+ (- 4) (* x1 1)) 0))
(assert (<= (+ 4 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 6) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 5 (* x0 1)) 0))
(assert (<= (+ (- 3) (* x1 1)) 0))
(assert (<= (+ 5 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 5) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 6 (* x0 1)) 0))
(assert (<= (+ (- 2) (* x1 1)) 0))
(assert (<= (+ 6 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 4) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 7 (* x0 1)) 0))
(assert (<= (+ (- 1) (* x1 1)) 0))
(assert (<= (+ 7 (* x0 3) (* x1 1)) 0))
(assert (< (+ (- 3) (* x0 1) (* x1 1)) 0))
(assert (>= (+ 8 (* x0 1)) 0))
(assert (> (+ 0 (* x1 1)) 0))
(rmodel->model-converter-wrapper
x1 -> 1
x0 -> (- 3)
)

==============
after solve
Total Elapsed Time: 3.37702
  Search Time: 1.10116
  Solving Time: 1.30213
  Program Time: 0.973739
